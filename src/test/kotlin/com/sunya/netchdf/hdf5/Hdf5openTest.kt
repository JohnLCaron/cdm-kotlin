package com.sunya.netchdf.hdf5

import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import test.util.testData
import test.util.testFilesIn
import java.util.*
import java.util.stream.Stream

// Sanity check read Hdf5File header, for non-netcdf4 files
class Hdf5openTest {

    companion object {
        @JvmStatic
        fun params(): Stream<Arguments> {
            val hdf5 =
                testFilesIn(testData + "devcdm/hdf5")
                    .withRecursion()
                    .build()

            // 8 of 117 fail
            val moarHdf5 =
                testFilesIn(testData + "cdmUnitTest/formats/hdf5")
                    .withPathFilter { p -> !p.toString().contains("exclude") }
                    .addNameFilter { name -> !name.endsWith(".xml") } // bug in clib
                    .withRecursion()
                    .build()

            // return stream1
            return Stream.of(hdf5, moarHdf5).flatMap { i -> i };
            //return stream2
        }
    }

    @Test
    fun superblockIsOffsetNPP() {
        openH5(testData + "cdmUnitTest/formats/hdf5/superblockIsOffsetNPP.h5")
    }

    @Test
    fun hasLinkName() {
        openH5(testData + "cdmUnitTest/formats/hdf5/aura/MLS-Aura_L2GP-BrO_v01-52-c01_2007d029.he5")
    }

    // @Test
    fun problem() {
        openH5(testData + "cdmUnitTest/formats/hdf5/exclude/OMI-Aura_L2-OMTO3_2009m0829t1219-o27250_v003-2009m0829t175727.he5")
    }

    // a compound with a member thats a type thats not a seperate typedef.
    // the obvious thing to do is to be able to add a typedef when processing the member.
    // or look for it when building H5group
    @Test
    fun compoundEnumTypedef() {
        openH5(testData + "devcdm/hdf5/enumcmpnd.h5")
    }

    @Test
    fun vlenAttribute() {
        openH5(testData + "devcdm/netcdf4/tst_vlen_data.nc4")
    }

    @Test
    fun opaqueAttribute() {
        openH5(testData + "devcdm/netcdf4/tst_opaque_data.nc4")
    }

    @Test
    fun groupHasCycle() {
        openH5(testData + "devcdm/hdf5/groupHasCycle.h5")
    }

    @ParameterizedTest
    @MethodSource("params")
    fun openH5(filename: String) {
        openH5(filename, null)
    }

    fun openH5(filename: String, varname : String? = null) {
        println("=================")
        println(filename)
        Hdf5File(filename).use { h5file ->
            println(h5file.cdl())
            if (varname != null) {
                val h5var = h5file.rootGroup().variables.find { it.name == varname } ?: throw RuntimeException("cant find $varname")
                val h5data = h5file.readArrayData(h5var)
                println(" $varname = $h5data")
            }
        }
    }

}