// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hdf_chunk_def_u {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(32, Constants$root.C_INT$LAYOUT).withName("chunk_lengths"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(32, Constants$root.C_INT$LAYOUT).withName("chunk_lengths"),
            Constants$root.C_INT$LAYOUT.withName("comp_type"),
            Constants$root.C_INT$LAYOUT.withName("model_type"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("quality"),
                    Constants$root.C_INT$LAYOUT.withName("force_baseline")
                ).withName("jpeg"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("nt"),
                    Constants$root.C_INT$LAYOUT.withName("sign_ext"),
                    Constants$root.C_INT$LAYOUT.withName("fill_one"),
                    Constants$root.C_INT$LAYOUT.withName("start_bit"),
                    Constants$root.C_INT$LAYOUT.withName("bit_len")
                ).withName("nbit"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("skp_size")
                ).withName("skphuff"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("level")
                ).withName("deflate"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("options_mask"),
                    Constants$root.C_INT$LAYOUT.withName("pixels_per_block"),
                    Constants$root.C_INT$LAYOUT.withName("pixels_per_scanline"),
                    Constants$root.C_INT$LAYOUT.withName("bits_per_pixel"),
                    Constants$root.C_INT$LAYOUT.withName("pixels")
                ).withName("szip")
            ).withName("cinfo"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("nt"),
                    Constants$root.C_INT$LAYOUT.withName("ndim"),
                    Constants$root.C_POINTER$LAYOUT.withName("dims")
                ).withName("dim")
            ).withName("minfo")
        ).withName("comp"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(32, Constants$root.C_INT$LAYOUT).withName("chunk_lengths"),
            Constants$root.C_INT$LAYOUT.withName("start_bit"),
            Constants$root.C_INT$LAYOUT.withName("bit_len"),
            Constants$root.C_INT$LAYOUT.withName("sign_ext"),
            Constants$root.C_INT$LAYOUT.withName("fill_one")
        ).withName("nbit")
    ).withName("hdf_chunk_def_u");
    public static MemoryLayout $LAYOUT() {
        return hdf_chunk_def_u.$union$LAYOUT;
    }
    public static MemorySegment chunk_lengths$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    public static class comp {

        static final  GroupLayout comp$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(32, Constants$root.C_INT$LAYOUT).withName("chunk_lengths"),
            Constants$root.C_INT$LAYOUT.withName("comp_type"),
            Constants$root.C_INT$LAYOUT.withName("model_type"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("quality"),
                    Constants$root.C_INT$LAYOUT.withName("force_baseline")
                ).withName("jpeg"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("nt"),
                    Constants$root.C_INT$LAYOUT.withName("sign_ext"),
                    Constants$root.C_INT$LAYOUT.withName("fill_one"),
                    Constants$root.C_INT$LAYOUT.withName("start_bit"),
                    Constants$root.C_INT$LAYOUT.withName("bit_len")
                ).withName("nbit"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("skp_size")
                ).withName("skphuff"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("level")
                ).withName("deflate"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("options_mask"),
                    Constants$root.C_INT$LAYOUT.withName("pixels_per_block"),
                    Constants$root.C_INT$LAYOUT.withName("pixels_per_scanline"),
                    Constants$root.C_INT$LAYOUT.withName("bits_per_pixel"),
                    Constants$root.C_INT$LAYOUT.withName("pixels")
                ).withName("szip")
            ).withName("cinfo"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("nt"),
                    Constants$root.C_INT$LAYOUT.withName("ndim"),
                    Constants$root.C_POINTER$LAYOUT.withName("dims")
                ).withName("dim")
            ).withName("minfo")
        );
        public static MemoryLayout $LAYOUT() {
            return comp.comp$struct$LAYOUT;
        }
        public static MemorySegment chunk_lengths$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        static final VarHandle comp_type$VH = comp$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("comp_type"));
        public static VarHandle comp_type$VH() {
            return comp.comp_type$VH;
        }
        public static int comp_type$get(MemorySegment seg) {
            return (int)comp.comp_type$VH.get(seg);
        }
        public static void comp_type$set( MemorySegment seg, int x) {
            comp.comp_type$VH.set(seg, x);
        }
        public static int comp_type$get(MemorySegment seg, long index) {
            return (int)comp.comp_type$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void comp_type$set(MemorySegment seg, long index, int x) {
            comp.comp_type$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle model_type$VH = comp$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("model_type"));
        public static VarHandle model_type$VH() {
            return comp.model_type$VH;
        }
        public static int model_type$get(MemorySegment seg) {
            return (int)comp.model_type$VH.get(seg);
        }
        public static void model_type$set( MemorySegment seg, int x) {
            comp.model_type$VH.set(seg, x);
        }
        public static int model_type$get(MemorySegment seg, long index) {
            return (int)comp.model_type$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void model_type$set(MemorySegment seg, long index, int x) {
            comp.model_type$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment cinfo$slice(MemorySegment seg) {
            return seg.asSlice(136, 20);
        }
        public static MemorySegment minfo$slice(MemorySegment seg) {
            return seg.asSlice(160, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment comp$slice(MemorySegment seg) {
        return seg.asSlice(0, 176);
    }
    public static class nbit {

        static final  GroupLayout nbit$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(32, Constants$root.C_INT$LAYOUT).withName("chunk_lengths"),
            Constants$root.C_INT$LAYOUT.withName("start_bit"),
            Constants$root.C_INT$LAYOUT.withName("bit_len"),
            Constants$root.C_INT$LAYOUT.withName("sign_ext"),
            Constants$root.C_INT$LAYOUT.withName("fill_one")
        );
        public static MemoryLayout $LAYOUT() {
            return nbit.nbit$struct$LAYOUT;
        }
        public static MemorySegment chunk_lengths$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        static final VarHandle start_bit$VH = nbit$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_bit"));
        public static VarHandle start_bit$VH() {
            return nbit.start_bit$VH;
        }
        public static int start_bit$get(MemorySegment seg) {
            return (int)nbit.start_bit$VH.get(seg);
        }
        public static void start_bit$set( MemorySegment seg, int x) {
            nbit.start_bit$VH.set(seg, x);
        }
        public static int start_bit$get(MemorySegment seg, long index) {
            return (int)nbit.start_bit$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void start_bit$set(MemorySegment seg, long index, int x) {
            nbit.start_bit$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle bit_len$VH = nbit$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_len"));
        public static VarHandle bit_len$VH() {
            return nbit.bit_len$VH;
        }
        public static int bit_len$get(MemorySegment seg) {
            return (int)nbit.bit_len$VH.get(seg);
        }
        public static void bit_len$set( MemorySegment seg, int x) {
            nbit.bit_len$VH.set(seg, x);
        }
        public static int bit_len$get(MemorySegment seg, long index) {
            return (int)nbit.bit_len$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void bit_len$set(MemorySegment seg, long index, int x) {
            nbit.bit_len$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sign_ext$VH = nbit$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sign_ext"));
        public static VarHandle sign_ext$VH() {
            return nbit.sign_ext$VH;
        }
        public static int sign_ext$get(MemorySegment seg) {
            return (int)nbit.sign_ext$VH.get(seg);
        }
        public static void sign_ext$set( MemorySegment seg, int x) {
            nbit.sign_ext$VH.set(seg, x);
        }
        public static int sign_ext$get(MemorySegment seg, long index) {
            return (int)nbit.sign_ext$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sign_ext$set(MemorySegment seg, long index, int x) {
            nbit.sign_ext$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle fill_one$VH = nbit$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fill_one"));
        public static VarHandle fill_one$VH() {
            return nbit.fill_one$VH;
        }
        public static int fill_one$get(MemorySegment seg) {
            return (int)nbit.fill_one$VH.get(seg);
        }
        public static void fill_one$set( MemorySegment seg, int x) {
            nbit.fill_one$VH.set(seg, x);
        }
        public static int fill_one$get(MemorySegment seg, long index) {
            return (int)nbit.fill_one$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void fill_one$set(MemorySegment seg, long index, int x) {
            nbit.fill_one$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment nbit$slice(MemorySegment seg) {
        return seg.asSlice(0, 144);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


