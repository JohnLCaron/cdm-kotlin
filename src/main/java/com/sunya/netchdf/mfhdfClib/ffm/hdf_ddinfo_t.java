// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class hdf_ddinfo_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("tag"),
        Constants$root.C_SHORT$LAYOUT.withName("ref"),
        Constants$root.C_INT$LAYOUT.withName("offset"),
        Constants$root.C_INT$LAYOUT.withName("length")
    ).withName("hdf_ddinfo_t");
    public static MemoryLayout $LAYOUT() {
        return hdf_ddinfo_t.$struct$LAYOUT;
    }
    static final VarHandle tag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tag"));
    public static VarHandle tag$VH() {
        return hdf_ddinfo_t.tag$VH;
    }
    public static short tag$get(MemorySegment seg) {
        return (short)hdf_ddinfo_t.tag$VH.get(seg);
    }
    public static void tag$set( MemorySegment seg, short x) {
        hdf_ddinfo_t.tag$VH.set(seg, x);
    }
    public static short tag$get(MemorySegment seg, long index) {
        return (short)hdf_ddinfo_t.tag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tag$set(MemorySegment seg, long index, short x) {
        hdf_ddinfo_t.tag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref"));
    public static VarHandle ref$VH() {
        return hdf_ddinfo_t.ref$VH;
    }
    public static short ref$get(MemorySegment seg) {
        return (short)hdf_ddinfo_t.ref$VH.get(seg);
    }
    public static void ref$set( MemorySegment seg, short x) {
        hdf_ddinfo_t.ref$VH.set(seg, x);
    }
    public static short ref$get(MemorySegment seg, long index) {
        return (short)hdf_ddinfo_t.ref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref$set(MemorySegment seg, long index, short x) {
        hdf_ddinfo_t.ref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return hdf_ddinfo_t.offset$VH;
    }
    public static int offset$get(MemorySegment seg) {
        return (int)hdf_ddinfo_t.offset$VH.get(seg);
    }
    public static void offset$set( MemorySegment seg, int x) {
        hdf_ddinfo_t.offset$VH.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)hdf_ddinfo_t.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        hdf_ddinfo_t.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return hdf_ddinfo_t.length$VH;
    }
    public static int length$get(MemorySegment seg) {
        return (int)hdf_ddinfo_t.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, int x) {
        hdf_ddinfo_t.length$VH.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)hdf_ddinfo_t.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        hdf_ddinfo_t.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


