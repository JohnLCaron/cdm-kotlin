package com.sunya.netchdf.hdf5Clib

import com.sunya.cdm.util.Stats
import com.sunya.netchdf.compareCdlWithClib
import com.sunya.netchdf.compareDataWithClib
import com.sunya.netchdf.netcdf4.openNetchdfFile
import com.sunya.netchdf.readNetchdfData
import com.sunya.testdata.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import java.util.stream.Stream
import kotlin.test.assertEquals

// Sanity check read Hdf5File header, for non-netcdf4 files
class H5CopenTest {

    companion object {
        @JvmStatic
        fun params(): Stream<Arguments> {
            return Stream.of( H5CFiles.params()).flatMap { i -> i };
        }

        @JvmStatic
        @BeforeAll
        fun beforeAll() {
            Stats.clear()
        }

        @JvmStatic
        @AfterAll
        fun afterAll() {
            if (versions.size > 0) {
                versions.keys.forEach{ println("$it = ${versions[it]!!.size } files") }
            }
            Stats.show()
        }

        private val versions = mutableMapOf<String, MutableList<String>>()
    }

    @Test
    fun problemReferenceObjects() {
        compareCdlWithClib(testData + "cdmUnitTest/formats/hdf5/msg/test.h5")
    }

    @Test
    fun bigAttribute() {
        compareCdlWithClib(testData + "cdmUnitTest/formats/hdf5/aura/MLS-Aura_L2GP-BrO_v01-52-c01_2007d029.he5")
    }

    @Test
    fun dimScales() {
        compareCdlWithClib(testData + "cdmUnitTest/formats/hdf5/extLink/JA2_IPR_2PcP021_001_20090126_085038_20090126_094651.nc")
    }

    // netcdf cstr.h5 {
    //  types:
    //    compound Compound_String {
    //      string a_string ;
    //      string b_string ;
    //    }; // Compound_String
    //  variables:
    //    Compound_String Compound_String(10) ;
    //}
    @Test
    fun fixlengthStringsInCompound() {
        val filename = testData + "devcdm/hdf5/cstr.h5"
        compareCdlWithClib(filename)
        readNetchdfData(filename, "Compound_String")
        compareDataWithClib(filename)
    }

    // netcdf compound_complex.h5 {
    //  types:
    //    compound CompoundComplex {
    //      int a_name ;
    //      string b_name(4) ;
    //      string c_name ;
    //      short d_name(5,4) ;
    //      float e_name ;
    //      double f_name(10) ;
    //      byte g_name ;
    //    }; // CompoundComplex
    //  variables:
    //    CompoundComplex CompoundComplex(6) ;
    //}
    @Test
    fun vlenStringsInCompound() {
        val filename = testData + "devcdm/hdf5/compound_complex.h5"
        // compareCdlWithClib(filename)
        // readNetchdfData(filename, "CompoundComplex")
        openH5C(filename, "CompoundComplex")
        // compareDataWithClib(filename)
    }

    // netcdf matlab_cols.mat {
    //  variables:
    //    double b(4, 3) ;
    //      :MATLAB_class = "double" ;
    //}
    @Test
    fun compactStorage() {
        val filename = testData + "cdmUnitTest/formats/hdf5/matlab_cols.mat"
        compareCdlWithClib(filename)
        readNetchdfData(filename, "b")
        openH5C(filename, "b")
        compareDataWithClib(filename)
    }

    @Test
    fun problem() {
        val filename = testData + "devcdm/hdf5/SDS_array_type.h5"
        compareCdlWithClib(filename)
        compareDataWithClib(filename, "IntArray")
    }

    ///////////////////////////////////////////////////////////////////////////////////

    @ParameterizedTest
    @MethodSource("params")
    fun checkVersion(filename: String) {
        openNetchdfFile(filename).use { ncfile ->
            if (ncfile == null) {
                println("Not a netchdf file=$filename ")
                return
            }
            println("${ncfile.type()} $filename ")
            val paths = versions.getOrPut(ncfile.type()) { mutableListOf() }
            paths.add(filename)
        }
    }

    @ParameterizedTest
    @MethodSource("params")
    fun testOpenH5C(filename: String) {
        openH5C(filename, null)
    }

    @ParameterizedTest
    @MethodSource("params")
    fun testCldWithH5Clib(filename: String) {
        compareCdlWithClib(filename)
    }

    @ParameterizedTest
    @MethodSource("params")
    fun testDataWithClib(filename: String) {
        compareDataWithClib(filename, null, null)
    }

    /////////////////////////////////////////////////////////

    fun openH5C(filename: String, varname : String? = null) {
        println("=================")
        println(filename)
        Hdf5ClibFile(filename).use { h5cfile ->
            println(h5cfile.cdl())
            h5cfile.rootGroup().allVariables().forEach { println("  ${it.fullname()}") }

            if (varname != null) {
                val h5var = h5cfile.rootGroup().allVariables().find { it.fullname() == varname } ?: throw RuntimeException("cant find $varname")
                val h5data = h5cfile.readArrayData(h5var)
                println(" $varname = $h5data")
            }
        }
    }

}