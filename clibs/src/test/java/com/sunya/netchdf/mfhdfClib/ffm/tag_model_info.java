// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

public class tag_model_info {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("nt"),
            Constants$root.C_INT$LAYOUT.withName("ndim"),
            Constants$root.C_POINTER$LAYOUT.withName("dims")
        ).withName("dim")
    ).withName("tag_model_info");
    public static MemoryLayout $LAYOUT() {
        return tag_model_info.$union$LAYOUT;
    }
    public static class dim {

        static final  GroupLayout dim$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("nt"),
            Constants$root.C_INT$LAYOUT.withName("ndim"),
            Constants$root.C_POINTER$LAYOUT.withName("dims")
        );
        public static MemoryLayout $LAYOUT() {
            return dim.dim$struct$LAYOUT;
        }
        static final VarHandle nt$VH = dim$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nt"));
        public static VarHandle nt$VH() {
            return dim.nt$VH;
        }
        public static int nt$get(MemorySegment seg) {
            return (int)dim.nt$VH.get(seg);
        }
        public static void nt$set( MemorySegment seg, int x) {
            dim.nt$VH.set(seg, x);
        }
        public static int nt$get(MemorySegment seg, long index) {
            return (int)dim.nt$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void nt$set(MemorySegment seg, long index, int x) {
            dim.nt$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ndim$VH = dim$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ndim"));
        public static VarHandle ndim$VH() {
            return dim.ndim$VH;
        }
        public static int ndim$get(MemorySegment seg) {
            return (int)dim.ndim$VH.get(seg);
        }
        public static void ndim$set( MemorySegment seg, int x) {
            dim.ndim$VH.set(seg, x);
        }
        public static int ndim$get(MemorySegment seg, long index) {
            return (int)dim.ndim$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ndim$set(MemorySegment seg, long index, int x) {
            dim.ndim$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle dims$VH = dim$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dims"));
        public static VarHandle dims$VH() {
            return dim.dims$VH;
        }
        public static MemoryAddress dims$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)dim.dims$VH.get(seg);
        }
        public static void dims$set( MemorySegment seg, MemoryAddress x) {
            dim.dims$VH.set(seg, x);
        }
        public static MemoryAddress dims$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)dim.dims$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void dims$set(MemorySegment seg, long index, MemoryAddress x) {
            dim.dims$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment dim$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


