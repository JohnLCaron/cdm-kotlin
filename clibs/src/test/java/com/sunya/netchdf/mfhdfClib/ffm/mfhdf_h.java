// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class mfhdf_h extends mfhdf_h_2 {

    /* package-private */ mfhdf_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int HDF() {
        return (int)1L;
    }
    public static int H4_HAVE_ARPA_INET_H() {
        return (int)1L;
    }
    public static int H4_HAVE_DLFCN_H() {
        return (int)1L;
    }
    public static int H4_HAVE_FCNTL_H() {
        return (int)1L;
    }
    public static int H4_HAVE_FORK() {
        return (int)1L;
    }
    public static int H4_HAVE_HTONL() {
        return (int)1L;
    }
    public static int H4_HAVE_HTONS() {
        return (int)1L;
    }
    public static int H4_HAVE_INTTYPES_H() {
        return (int)1L;
    }
    public static int H4_HAVE_JPEGLIB_H() {
        return (int)1L;
    }
    public static int H4_HAVE_LIBJPEG() {
        return (int)1L;
    }
    public static int H4_HAVE_LIBZ() {
        return (int)1L;
    }
    public static int H4_HAVE_NETINET_IN_H() {
        return (int)1L;
    }
    public static int H4_HAVE_NTOHL() {
        return (int)1L;
    }
    public static int H4_HAVE_NTOHS() {
        return (int)1L;
    }
    public static int H4_HAVE_STDINT_H() {
        return (int)1L;
    }
    public static int H4_HAVE_STDIO_H() {
        return (int)1L;
    }
    public static int H4_HAVE_STDLIB_H() {
        return (int)1L;
    }
    public static int H4_HAVE_STRINGS_H() {
        return (int)1L;
    }
    public static int H4_HAVE_STRING_H() {
        return (int)1L;
    }
    public static int H4_HAVE_SYSTEM() {
        return (int)1L;
    }
    public static int H4_HAVE_SYS_FILE_H() {
        return (int)1L;
    }
    public static int H4_HAVE_SYS_RESOURCE_H() {
        return (int)1L;
    }
    public static int H4_HAVE_SYS_STAT_H() {
        return (int)1L;
    }
    public static int H4_HAVE_SYS_TIME_H() {
        return (int)1L;
    }
    public static int H4_HAVE_SYS_TYPES_H() {
        return (int)1L;
    }
    public static int H4_HAVE_SYS_WAIT_H() {
        return (int)1L;
    }
    public static int H4_HAVE_UNISTD_H() {
        return (int)1L;
    }
    public static int H4_HAVE_WAIT() {
        return (int)1L;
    }
    public static int H4_HAVE_ZLIB_H() {
        return (int)1L;
    }
    public static int H4_STDC_HEADERS() {
        return (int)1L;
    }
    public static int DFMT_LE() {
        return (int)17473L;
    }
    public static int DFMT_BE() {
        return (int)4369L;
    }
    public static int UNIXUNBUFIO() {
        return (int)1L;
    }
    public static int UNIXBUFIO() {
        return (int)2L;
    }
    public static int MACIO() {
        return (int)3L;
    }
    public static int _ASSERT_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)35L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int _CTYPE_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    public static int _LIBC_LIMITS_H_() {
        return (int)1L;
    }
    public static int MB_LEN_MAX() {
        return (int)16L;
    }
    public static int _BITS_POSIX1_LIM_H() {
        return (int)1L;
    }
    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int)2L;
    }
    public static int _POSIX_AIO_MAX() {
        return (int)1L;
    }
    public static int _POSIX_ARG_MAX() {
        return (int)4096L;
    }
    public static int _POSIX_CHILD_MAX() {
        return (int)25L;
    }
    public static int _POSIX_DELAYTIMER_MAX() {
        return (int)32L;
    }
    public static int _POSIX_HOST_NAME_MAX() {
        return (int)255L;
    }
    public static int _POSIX_LINK_MAX() {
        return (int)8L;
    }
    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int)9L;
    }
    public static int _POSIX_MAX_CANON() {
        return (int)255L;
    }
    public static int _POSIX_MAX_INPUT() {
        return (int)255L;
    }
    public static int _POSIX_MQ_OPEN_MAX() {
        return (int)8L;
    }
    public static int _POSIX_MQ_PRIO_MAX() {
        return (int)32L;
    }
    public static int _POSIX_NAME_MAX() {
        return (int)14L;
    }
    public static int _POSIX_NGROUPS_MAX() {
        return (int)8L;
    }
    public static int _POSIX_OPEN_MAX() {
        return (int)20L;
    }
    public static int _POSIX_PATH_MAX() {
        return (int)256L;
    }
    public static int _POSIX_PIPE_BUF() {
        return (int)512L;
    }
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    public static int _POSIX_RTSIG_MAX() {
        return (int)8L;
    }
    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int)256L;
    }
    public static int _POSIX_SEM_VALUE_MAX() {
        return (int)32767L;
    }
    public static int _POSIX_SIGQUEUE_MAX() {
        return (int)32L;
    }
    public static int _POSIX_SSIZE_MAX() {
        return (int)32767L;
    }
    public static int _POSIX_STREAM_MAX() {
        return (int)8L;
    }
    public static int _POSIX_SYMLINK_MAX() {
        return (int)255L;
    }
    public static int _POSIX_SYMLOOP_MAX() {
        return (int)8L;
    }
    public static int _POSIX_TIMER_MAX() {
        return (int)32L;
    }
    public static int _POSIX_TTY_NAME_MAX() {
        return (int)9L;
    }
    public static int _POSIX_TZNAME_MAX() {
        return (int)6L;
    }
    public static int _POSIX_CLOCKRES_MIN() {
        return (int)20000000L;
    }
    public static int NR_OPEN() {
        return (int)1024L;
    }
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    public static int ARG_MAX() {
        return (int)131072L;
    }
    public static int LINK_MAX() {
        return (int)127L;
    }
    public static int MAX_CANON() {
        return (int)255L;
    }
    public static int MAX_INPUT() {
        return (int)255L;
    }
    public static int NAME_MAX() {
        return (int)255L;
    }
    public static int PATH_MAX() {
        return (int)4096L;
    }
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    public static int PTHREAD_KEYS_MAX() {
        return (int)1024L;
    }
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int)64L;
    }
    public static int AIO_PRIO_DELTA_MAX() {
        return (int)20L;
    }
    public static int PTHREAD_STACK_MIN() {
        return (int)16384L;
    }
    public static int DELAYTIMER_MAX() {
        return (int)2147483647L;
    }
    public static int TTY_NAME_MAX() {
        return (int)32L;
    }
    public static int LOGIN_NAME_MAX() {
        return (int)256L;
    }
    public static int HOST_NAME_MAX() {
        return (int)64L;
    }
    public static int MQ_PRIO_MAX() {
        return (int)32768L;
    }
    public static int _BITS_POSIX2_LIM_H() {
        return (int)1L;
    }
    public static int _POSIX2_BC_BASE_MAX() {
        return (int)99L;
    }
    public static int _POSIX2_BC_DIM_MAX() {
        return (int)2048L;
    }
    public static int _POSIX2_BC_SCALE_MAX() {
        return (int)99L;
    }
    public static int _POSIX2_BC_STRING_MAX() {
        return (int)1000L;
    }
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int)32L;
    }
    public static int _POSIX2_LINE_MAX() {
        return (int)2048L;
    }
    public static int _POSIX2_RE_DUP_MAX() {
        return (int)255L;
    }
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    public static int COLL_WEIGHTS_MAX() {
        return (int)255L;
    }
    public static int CHARCLASS_NAME_MAX() {
        return (int)2048L;
    }
    public static int _STDIO_H() {
        return (int)1L;
    }
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    public static int ____FILE_defined() {
        return (int)1L;
    }
    public static int __FILE_defined() {
        return (int)1L;
    }
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    public static int _IOFBF() {
        return (int)0L;
    }
    public static int _IOLBF() {
        return (int)1L;
    }
    public static int _IONBF() {
        return (int)2L;
    }
    public static int BUFSIZ() {
        return (int)8192L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    public static int L_tmpnam() {
        return (int)20L;
    }
    public static int TMP_MAX() {
        return (int)238328L;
    }
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    public static int L_ctermid() {
        return (int)9L;
    }
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    public static int _STDLIB_H() {
        return (int)1L;
    }
    public static int WNOHANG() {
        return (int)1L;
    }
    public static int WUNTRACED() {
        return (int)2L;
    }
    public static int WSTOPPED() {
        return (int)2L;
    }
    public static int WEXITED() {
        return (int)4L;
    }
    public static int WCONTINUED() {
        return (int)8L;
    }
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    public static int __WALL() {
        return (int)1073741824L;
    }
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static int _STRING_H() {
        return (int)1L;
    }
    public static int _STRINGS_H() {
        return (int)1L;
    }
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int _FCNTL_H() {
        return (int)1L;
    }
    public static int __O_LARGEFILE() {
        return (int)0L;
    }
    public static int F_GETLK64() {
        return (int)5L;
    }
    public static int F_SETLK64() {
        return (int)6L;
    }
    public static int F_SETLKW64() {
        return (int)7L;
    }
    public static int O_ACCMODE() {
        return (int)3L;
    }
    public static int O_RDONLY() {
        return (int)0L;
    }
    public static int O_WRONLY() {
        return (int)1L;
    }
    public static int O_RDWR() {
        return (int)2L;
    }
    public static int O_CREAT() {
        return (int)64L;
    }
    public static int O_EXCL() {
        return (int)128L;
    }
    public static int O_NOCTTY() {
        return (int)256L;
    }
    public static int O_TRUNC() {
        return (int)512L;
    }
    public static int O_APPEND() {
        return (int)1024L;
    }
    public static int O_NONBLOCK() {
        return (int)2048L;
    }
    public static int O_SYNC() {
        return (int)1052672L;
    }
    public static int O_ASYNC() {
        return (int)8192L;
    }
    public static int __O_DIRECTORY() {
        return (int)65536L;
    }
    public static int __O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int __O_CLOEXEC() {
        return (int)524288L;
    }
    public static int __O_DIRECT() {
        return (int)16384L;
    }
    public static int __O_NOATIME() {
        return (int)262144L;
    }
    public static int __O_PATH() {
        return (int)2097152L;
    }
    public static int __O_DSYNC() {
        return (int)4096L;
    }
    public static int F_GETLK() {
        return (int)5L;
    }
    public static int F_SETLK() {
        return (int)6L;
    }
    public static int F_SETLKW() {
        return (int)7L;
    }
    public static int F_DUPFD() {
        return (int)0L;
    }
    public static int F_GETFD() {
        return (int)1L;
    }
    public static int F_SETFD() {
        return (int)2L;
    }
    public static int F_GETFL() {
        return (int)3L;
    }
    public static int F_SETFL() {
        return (int)4L;
    }
    public static int __F_SETOWN() {
        return (int)8L;
    }
    public static int __F_GETOWN() {
        return (int)9L;
    }
    public static int __F_SETSIG() {
        return (int)10L;
    }
    public static int __F_GETSIG() {
        return (int)11L;
    }
    public static int __F_SETOWN_EX() {
        return (int)15L;
    }
    public static int __F_GETOWN_EX() {
        return (int)16L;
    }
    public static int F_DUPFD_CLOEXEC() {
        return (int)1030L;
    }
    public static int FD_CLOEXEC() {
        return (int)1L;
    }
    public static int F_RDLCK() {
        return (int)0L;
    }
    public static int F_WRLCK() {
        return (int)1L;
    }
    public static int F_UNLCK() {
        return (int)2L;
    }
    public static int F_EXLCK() {
        return (int)4L;
    }
    public static int F_SHLCK() {
        return (int)8L;
    }
    public static int LOCK_SH() {
        return (int)1L;
    }
    public static int LOCK_EX() {
        return (int)2L;
    }
    public static int LOCK_NB() {
        return (int)4L;
    }
    public static int LOCK_UN() {
        return (int)8L;
    }
    public static int __POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int __POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int POSIX_FADV_NORMAL() {
        return (int)0L;
    }
    public static int POSIX_FADV_RANDOM() {
        return (int)1L;
    }
    public static int POSIX_FADV_SEQUENTIAL() {
        return (int)2L;
    }
    public static int POSIX_FADV_WILLNEED() {
        return (int)3L;
    }
    public static int AT_SYMLINK_NOFOLLOW() {
        return (int)256L;
    }
    public static int AT_REMOVEDIR() {
        return (int)512L;
    }
    public static int AT_SYMLINK_FOLLOW() {
        return (int)1024L;
    }
    public static int AT_EACCESS() {
        return (int)512L;
    }
    public static int _BITS_STAT_H() {
        return (int)1L;
    }
    public static int _BITS_STRUCT_STAT_H() {
        return (int)1L;
    }
    public static int __S_IFMT() {
        return (int)61440L;
    }
    public static int __S_IFDIR() {
        return (int)16384L;
    }
    public static int __S_IFCHR() {
        return (int)8192L;
    }
    public static int __S_IFBLK() {
        return (int)24576L;
    }
    public static int __S_IFREG() {
        return (int)32768L;
    }
    public static int __S_IFIFO() {
        return (int)4096L;
    }
    public static int __S_IFLNK() {
        return (int)40960L;
    }
    public static int __S_IFSOCK() {
        return (int)49152L;
    }
    public static int __S_ISUID() {
        return (int)2048L;
    }
    public static int __S_ISGID() {
        return (int)1024L;
    }
    public static int __S_ISVTX() {
        return (int)512L;
    }
    public static int __S_IREAD() {
        return (int)256L;
    }
    public static int __S_IWRITE() {
        return (int)128L;
    }
    public static int __S_IEXEC() {
        return (int)64L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static int _UNISTD_H() {
        return (int)1L;
    }
    public static int _XOPEN_VERSION() {
        return (int)700L;
    }
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    public static int _XOPEN_XPG2() {
        return (int)1L;
    }
    public static int _XOPEN_XPG3() {
        return (int)1L;
    }
    public static int _XOPEN_XPG4() {
        return (int)1L;
    }
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    public static int _XOPEN_LEGACY() {
        return (int)1L;
    }
    public static int _BITS_POSIX_OPT_H() {
        return (int)1L;
    }
    public static int _POSIX_JOB_CONTROL() {
        return (int)1L;
    }
    public static int _POSIX_SAVED_IDS() {
        return (int)1L;
    }
    public static int _POSIX_CHOWN_RESTRICTED() {
        return (int)0L;
    }
    public static int _POSIX_NO_TRUNC() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)1L;
    }
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    public static int _POSIX_REENTRANT_FUNCTIONS() {
        return (int)1L;
    }
    public static int _POSIX_ASYNC_IO() {
        return (int)1L;
    }
    public static int _LFS_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS64_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_STDIO() {
        return (int)1L;
    }
    public static int _POSIX_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_REGEXP() {
        return (int)1L;
    }
    public static int _POSIX_SHELL() {
        return (int)1L;
    }
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)0L;
    }
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    public static int _GETOPT_POSIX_H() {
        return (int)1L;
    }
    public static int _GETOPT_CORE_H() {
        return (int)1L;
    }
    public static int _SYS_FILE_H() {
        return (int)1L;
    }
    public static int _SYS_STAT_H() {
        return (int)1L;
    }
    public static int S_BLKSIZE() {
        return (int)512L;
    }
    public static int _SYS_TIME_H() {
        return (int)1L;
    }
    public static int TBUF_SZ() {
        return (int)1024L;
    }
    public static int DF_MAXFNLEN() {
        return (int)256L;
    }
    public static int FIELDNAMELENMAX() {
        return (int)128L;
    }
    public static int VSFIELDMAX() {
        return (int)256L;
    }
    public static int VSNAMELENMAX() {
        return (int)64L;
    }
    public static int VGNAMELENMAX() {
        return (int)64L;
    }
    public static int MAXNVELT() {
        return (int)64L;
    }
    public static int VDEFAULTBLKSIZE() {
        return (int)4096L;
    }
    public static int VDEFAULTNBLKS() {
        return (int)32L;
    }
    public static int MAX_ORDER() {
        return (int)65535L;
    }
    public static int MAX_FIELD_SIZE() {
        return (int)65535L;
    }
    public static int MAX_FILE() {
        return (int)32L;
    }
    public static int MAX_PATH_LEN() {
        return (int)1024L;
    }
    public static int DEF_NDDS() {
        return (int)16L;
    }
    public static int MIN_NDDS() {
        return (int)4L;
    }
    public static int HDF_APPENDABLE_BLOCK_LEN() {
        return (int)4096L;
    }
    public static int HDF_APPENDABLE_BLOCK_NUM() {
        return (int)16L;
    }
    public static int HASH_MASK() {
        return (int)255L;
    }
    public static int HASH_BLOCK_SIZE() {
        return (int)100L;
    }
    public static int VDATA_BUFFER_MAX() {
        return (int)1000000L;
    }
    public static int DFS_MAXLEN() {
        return (int)255L;
    }
    public static int DFSD_MAXFILL_LEN() {
        return (int)16L;
    }
    public static int COMP_MAX_COMP() {
        return (int)12L;
    }
    public static int COMP_HEADER_LENGTH() {
        return (int)14L;
    }
    public static int MAX_GROUPS() {
        return (int)8L;
    }
    public static int FUNC_NAME_LEN() {
        return (int)32L;
    }
    public static int ERR_STACK_SZ() {
        return (int)10L;
    }
    public static int ERR_STRING_SIZE() {
        return (int)512L;
    }
    public static int H4_MAX_NC_DIMS() {
        return (int)5000L;
    }
    public static int H4_MAX_NC_ATTRS() {
        return (int)3000L;
    }
    public static int H4_MAX_NC_VARS() {
        return (int)5000L;
    }
    public static int H4_MAX_NC_NAME() {
        return (int)256L;
    }
    public static int H4_MAX_NC_CLASS() {
        return (int)128L;
    }
    public static int H4_MAX_VAR_DIMS() {
        return (int)32L;
    }
    public static int H4_MAX_GR_NAME() {
        return (int)256L;
    }
    public static int _HDF_CHK_TBL_CLASS_VER() {
        return (int)0L;
    }
    public static int DFACC_READ() {
        return (int)1L;
    }
    public static int DFACC_WRITE() {
        return (int)2L;
    }
    public static int DFACC_CREATE() {
        return (int)4L;
    }
    public static int DFACC_ALL() {
        return (int)7L;
    }
    public static int DFACC_RDONLY() {
        return (int)1L;
    }
    public static int DFACC_RDWR() {
        return (int)3L;
    }
    public static int DFACC_CLOBBER() {
        return (int)4L;
    }
    public static int DFACC_BUFFER() {
        return (int)8L;
    }
    public static int DFACC_APPENDABLE() {
        return (int)16L;
    }
    public static int DFACC_CURRENT() {
        return (int)32L;
    }
    public static int DFACC_OLD() {
        return (int)1L;
    }
    public static int DFACC_DEFAULT() {
        return (int)0L;
    }
    public static int DFACC_SERIAL() {
        return (int)1L;
    }
    public static int DFACC_PARALLEL() {
        return (int)9L;
    }
    public static int DF_START() {
        return (int)0L;
    }
    public static int DF_CURRENT() {
        return (int)1L;
    }
    public static int DF_END() {
        return (int)2L;
    }
    public static int DF_FORWARD() {
        return (int)1L;
    }
    public static int DF_BACKWARD() {
        return (int)2L;
    }
    public static int SUCCEED() {
        return (int)0L;
    }
    public static int FALSE() {
        return (int)0L;
    }
    public static int DFNT_HDF() {
        return (int)0L;
    }
    public static int DFNT_NATIVE() {
        return (int)4096L;
    }
    public static int DFNT_CUSTOM() {
        return (int)8192L;
    }
    public static int DFNT_LITEND() {
        return (int)16384L;
    }
    public static int DFNT_MASK() {
        return (int)4095L;
    }
    public static int DFNT_NONE() {
        return (int)0L;
    }
    public static int DFNT_QUERY() {
        return (int)0L;
    }
    public static int DFNT_VERSION() {
        return (int)1L;
    }
    public static int DFNT_FLOAT32() {
        return (int)5L;
    }
    public static int DFNT_FLOAT() {
        return (int)5L;
    }
    public static int DFNT_FLOAT64() {
        return (int)6L;
    }
    public static int DFNT_DOUBLE() {
        return (int)6L;
    }
    public static int DFNT_FLOAT128() {
        return (int)7L;
    }
    public static int DFNT_INT8() {
        return (int)20L;
    }
    public static int DFNT_UINT8() {
        return (int)21L;
    }
    public static int DFNT_INT16() {
        return (int)22L;
    }
    public static int DFNT_UINT16() {
        return (int)23L;
    }
    public static int DFNT_INT32() {
        return (int)24L;
    }
    public static int DFNT_UINT32() {
        return (int)25L;
    }
    public static int DFNT_INT64() {
        return (int)26L;
    }
    public static int DFNT_UINT64() {
        return (int)27L;
    }
    public static int DFNT_INT128() {
        return (int)28L;
    }
    public static int DFNT_UINT128() {
        return (int)30L;
    }
    public static int DFNT_UCHAR8() {
        return (int)3L;
    }
    public static int DFNT_UCHAR() {
        return (int)3L;
    }
    public static int DFNT_CHAR8() {
        return (int)4L;
    }
    public static int DFNT_CHAR() {
        return (int)4L;
    }
    public static int DFNT_CHAR16() {
        return (int)42L;
    }
    public static int DFNT_UCHAR16() {
        return (int)43L;
    }
    public static int DFNTI_MBO() {
        return (int)1L;
    }
    public static int DFNTI_VBO() {
        return (int)2L;
    }
    public static int DFNTI_IBO() {
        return (int)4L;
    }
    public static int DFNTF_NONE() {
        return (int)0L;
    }
    public static int DFNTF_HDFDEFAULT() {
        return (int)1L;
    }
    public static int DFNTF_IEEE() {
        return (int)1L;
    }
    public static int DFNTF_VAX() {
        return (int)2L;
    }
    public static int DFNTF_CRAY() {
        return (int)3L;
    }
    public static int DFNTF_PC() {
        return (int)4L;
    }
    public static int DFNTF_CONVEX() {
        return (int)5L;
    }
    public static int DFNTF_VP() {
        return (int)6L;
    }
    public static int DFNTC_BYTE() {
        return (int)0L;
    }
    public static int DFNTC_ASCII() {
        return (int)1L;
    }
    public static int DFNTC_EBCDIC() {
        return (int)5L;
    }
    public static int DFO_FORTRAN() {
        return (int)1L;
    }
    public static int DFO_C() {
        return (int)2L;
    }
    public static int SIZE_FLOAT32() {
        return (int)4L;
    }
    public static int SIZE_FLOAT64() {
        return (int)8L;
    }
    public static int SIZE_FLOAT128() {
        return (int)16L;
    }
    public static int SIZE_INT8() {
        return (int)1L;
    }
    public static int SIZE_UINT8() {
        return (int)1L;
    }
    public static int SIZE_INT16() {
        return (int)2L;
    }
    public static int SIZE_UINT16() {
        return (int)2L;
    }
    public static int SIZE_INT32() {
        return (int)4L;
    }
    public static int SIZE_UINT32() {
        return (int)4L;
    }
    public static int SIZE_INT64() {
        return (int)8L;
    }
    public static int SIZE_UINT64() {
        return (int)8L;
    }
    public static int SIZE_INT128() {
        return (int)16L;
    }
    public static int SIZE_UINT128() {
        return (int)16L;
    }
    public static int SIZE_CHAR8() {
        return (int)1L;
    }
    public static int SIZE_CHAR() {
        return (int)1L;
    }
    public static int SIZE_UCHAR8() {
        return (int)1L;
    }
    public static int SIZE_UCHAR() {
        return (int)1L;
    }
    public static int SIZE_CHAR16() {
        return (int)2L;
    }
    public static int SIZE_UCHAR16() {
        return (int)2L;
    }
    public static int SIZE_NFLOAT32() {
        return (int)4L;
    }
    public static int SIZE_NFLOAT64() {
        return (int)8L;
    }
    public static int SIZE_NFLOAT128() {
        return (int)16L;
    }
    public static int SIZE_NINT8() {
        return (int)1L;
    }
    public static int SIZE_NUINT8() {
        return (int)1L;
    }
    public static int SIZE_NINT16() {
        return (int)2L;
    }
    public static int SIZE_NUINT16() {
        return (int)2L;
    }
    public static int SIZE_NINT32() {
        return (int)4L;
    }
    public static int SIZE_NUINT32() {
        return (int)4L;
    }
    public static int SIZE_NINT64() {
        return (int)8L;
    }
    public static int SIZE_NUINT64() {
        return (int)8L;
    }
    public static int SIZE_NINT128() {
        return (int)16L;
    }
    public static int SIZE_NUINT128() {
        return (int)16L;
    }
    public static int SIZE_NCHAR8() {
        return (int)1L;
    }
    public static int SIZE_NCHAR() {
        return (int)1L;
    }
    public static int SIZE_NUCHAR8() {
        return (int)1L;
    }
    public static int SIZE_NUCHAR() {
        return (int)1L;
    }
    public static int SIZE_NCHAR16() {
        return (int)2L;
    }
    public static int SIZE_NUCHAR16() {
        return (int)2L;
    }
    public static int SIZE_LFLOAT32() {
        return (int)4L;
    }
    public static int SIZE_LFLOAT64() {
        return (int)8L;
    }
    public static int SIZE_LFLOAT128() {
        return (int)16L;
    }
    public static int SIZE_LINT8() {
        return (int)1L;
    }
    public static int SIZE_LUINT8() {
        return (int)1L;
    }
    public static int SIZE_LINT16() {
        return (int)2L;
    }
    public static int SIZE_LUINT16() {
        return (int)2L;
    }
    public static int SIZE_LINT32() {
        return (int)4L;
    }
    public static int SIZE_LUINT32() {
        return (int)4L;
    }
    public static int SIZE_LINT64() {
        return (int)8L;
    }
    public static int SIZE_LUINT64() {
        return (int)8L;
    }
    public static int SIZE_LINT128() {
        return (int)16L;
    }
    public static int SIZE_LUINT128() {
        return (int)16L;
    }
    public static int SIZE_LCHAR8() {
        return (int)1L;
    }
    public static int SIZE_LCHAR() {
        return (int)1L;
    }
    public static int SIZE_LUCHAR8() {
        return (int)1L;
    }
    public static int SIZE_LUCHAR() {
        return (int)1L;
    }
    public static int SIZE_LCHAR16() {
        return (int)2L;
    }
    public static int SIZE_LUCHAR16() {
        return (int)2L;
    }
    public static int MACHINE_I8_SIZE() {
        return (int)1L;
    }
    public static int MACHINE_I16_SIZE() {
        return (int)2L;
    }
    public static int MACHINE_I32_SIZE() {
        return (int)4L;
    }
    public static int MACHINE_F32_SIZE() {
        return (int)4L;
    }
    public static int MACHINE_F64_SIZE() {
        return (int)8L;
    }
    public static int MAX_NT_SIZE() {
        return (int)16L;
    }
    public static int DFREF_WILDCARD() {
        return (int)0L;
    }
    public static int DFTAG_WILDCARD() {
        return (int)0L;
    }
    public static int DFREF_NONE() {
        return (int)0L;
    }
    public static int DFTAG_NULL() {
        return (int)1L;
    }
    public static int DFTAG_LINKED() {
        return (int)20L;
    }
    public static int DFTAG_VERSION() {
        return (int)30L;
    }
    public static int DFTAG_COMPRESSED() {
        return (int)40L;
    }
    public static int DFTAG_VLINKED() {
        return (int)50L;
    }
    public static int DFTAG_VLINKED_DATA() {
        return (int)51L;
    }
    public static int DFTAG_CHUNKED() {
        return (int)60L;
    }
    public static int DFTAG_CHUNK() {
        return (int)61L;
    }
    public static int DFIL_PIXEL() {
        return (int)0L;
    }
    public static int DFIL_LINE() {
        return (int)1L;
    }
    public static int DFIL_PLANE() {
        return (int)2L;
    }
    public static int SPECIAL_LINKED() {
        return (int)1L;
    }
    public static int SPECIAL_EXT() {
        return (int)2L;
    }
    public static int SPECIAL_COMP() {
        return (int)3L;
    }
    public static int SPECIAL_VLINKED() {
        return (int)4L;
    }
    public static int SPECIAL_CHUNKED() {
        return (int)5L;
    }
    public static int SPECIAL_BUFFERED() {
        return (int)6L;
    }
    public static int SPECIAL_COMPRAS() {
        return (int)7L;
    }
    public static int FULL_INTERLACE() {
        return (int)0L;
    }
    public static int NO_INTERLACE() {
        return (int)1L;
    }
    public static int BITBUF_SIZE() {
        return (int)4096L;
    }
    public static int COMP_NONE() {
        return (int)0L;
    }
    public static int COMP_JPEG() {
        return (int)2L;
    }
    public static int COMP_RLE() {
        return (int)11L;
    }
    public static int COMP_IMCOMP() {
        return (int)12L;
    }
    public static int COMP_DECODER_ENABLED() {
        return (int)1L;
    }
    public static int COMP_ENCODER_ENABLED() {
        return (int)2L;
    }
    public static int HDF_NONE() {
        return (int)0L;
    }
    public static int HDF_CHUNK() {
        return (int)1L;
    }
    public static int HDF_COMP() {
        return (int)3L;
    }
    public static int HDF_NBIT() {
        return (int)5L;
    }
    public static int HDF_CACHEALL() {
        return (int)1L;
    }
    public static int OLD_VGDESCTAG() {
        return (int)61820L;
    }
    public static int OLD_VSDESCTAG() {
        return (int)61821L;
    }
    public static int OLD_VSDATATAG() {
        return (int)61822L;
    }
    public static int _HDF_VSPACK() {
        return (int)0L;
    }
    public static int _HDF_VSUNPACK() {
        return (int)1L;
    }
    public static int VG_ATTR_SET() {
        return (int)1L;
    }
    public static int VS_ATTR_SET() {
        return (int)1L;
    }
    public static int VATOM_HASH_SIZE() {
        return (int)256L;
    }
    public static int VSET_NEW_VERSION() {
        return (int)4L;
    }
    public static int VSET_VERSION() {
        return (int)3L;
    }
    public static int VSET_OLD_VERSION() {
        return (int)2L;
    }
    public static int MFGR_INTERLACE_PIXEL() {
        return (int)0L;
    }
    public static int MFGR_INTERLACE_LINE() {
        return (int)1L;
    }
    public static int MFGR_INTERLACE_COMPONENT() {
        return (int)2L;
    }
    public static int MP_PAGEALL() {
        return (int)1L;
    }
    public static int NC_OLD_FILLVALUES() {
        return (int)0L;
    }
    public static int NC_RDWR() {
        return (int)1L;
    }
    public static int NC_CREAT() {
        return (int)2L;
    }
    public static int NC_EXCL() {
        return (int)4L;
    }
    public static int NC_INDEF() {
        return (int)8L;
    }
    public static int NC_NSYNC() {
        return (int)16L;
    }
    public static int NC_HSYNC() {
        return (int)32L;
    }
    public static int NC_NDIRTY() {
        return (int)64L;
    }
    public static int NC_HDIRTY() {
        return (int)128L;
    }
    public static int NC_NOFILL() {
        return (int)256L;
    }
    public static int NC_LINK() {
        return (int)32768L;
    }
    public static int NC_FILL() {
        return (int)0L;
    }
    public static int NC_NOWRITE() {
        return (int)0L;
    }
    public static int NC_UNSPECIFIED() {
        return (int)0L;
    }
    public static int NC_BYTE() {
        return (int)1L;
    }
    public static int NC_CHAR() {
        return (int)2L;
    }
    public static int NC_SHORT() {
        return (int)3L;
    }
    public static int NC_LONG() {
        return (int)4L;
    }
    public static int NC_FLOAT() {
        return (int)5L;
    }
    public static int NC_DOUBLE() {
        return (int)6L;
    }
    public static int NC_BITFIELD() {
        return (int)7L;
    }
    public static int NC_STRING() {
        return (int)8L;
    }
    public static int NC_IARRAY() {
        return (int)9L;
    }
    public static int NC_DIMENSION() {
        return (int)10L;
    }
    public static int NC_VARIABLE() {
        return (int)11L;
    }
    public static int NC_ATTRIBUTE() {
        return (int)12L;
    }
    public static int NC_NOERR() {
        return (int)0L;
    }
    public static int NC_EBADID() {
        return (int)1L;
    }
    public static int NC_ENFILE() {
        return (int)2L;
    }
    public static int NC_EEXIST() {
        return (int)3L;
    }
    public static int NC_EINVAL() {
        return (int)4L;
    }
    public static int NC_EPERM() {
        return (int)5L;
    }
    public static int NC_ENOTINDEFINE() {
        return (int)6L;
    }
    public static int NC_EINDEFINE() {
        return (int)7L;
    }
    public static int NC_EINVALCOORDS() {
        return (int)8L;
    }
    public static int NC_EMAXDIMS() {
        return (int)9L;
    }
    public static int NC_ENAMEINUSE() {
        return (int)10L;
    }
    public static int NC_ENOTATT() {
        return (int)11L;
    }
    public static int NC_EMAXATTS() {
        return (int)12L;
    }
    public static int NC_EBADTYPE() {
        return (int)13L;
    }
    public static int NC_EBADDIM() {
        return (int)14L;
    }
    public static int NC_EUNLIMPOS() {
        return (int)15L;
    }
    public static int NC_EMAXVARS() {
        return (int)16L;
    }
    public static int NC_ENOTVAR() {
        return (int)17L;
    }
    public static int NC_EGLOBAL() {
        return (int)18L;
    }
    public static int NC_ENOTNC() {
        return (int)19L;
    }
    public static int NC_ESTS() {
        return (int)20L;
    }
    public static int NC_EMAXNAME() {
        return (int)21L;
    }
    public static int NC_EUNLIMIT() {
        return (int)22L;
    }
    public static int NC_EXDR() {
        return (int)32L;
    }
    public static int NC_FATAL() {
        return (int)1L;
    }
    public static int NC_VERBOSE() {
        return (int)2L;
    }
    public static int SD_DIMVAL_BW_COMP() {
        return (int)1L;
    }
    public static int SD_DIMVAL_BW_INCOMP() {
        return (int)0L;
    }
    public static MethodHandle __assert_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__assert_fail$MH,"__assert_fail");
    }
    public static void __assert_fail ( Addressable __assertion,  Addressable __file,  int __line,  Addressable __function) {
        var mh$ = __assert_fail$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert_perror_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__assert_perror_fail$MH,"__assert_perror_fail");
    }
    public static void __assert_perror_fail ( int __errnum,  Addressable __file,  int __line,  Addressable __function) {
        var mh$ = __assert_perror_fail$MH();
        try {
            mh$.invokeExact(__errnum, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__assert$MH,"__assert");
    }
    public static void __assert ( Addressable __assertion,  Addressable __file,  int __line) {
        var mh$ = __assert$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static int _ISupper() {
        return (int)256L;
    }
    public static int _ISlower() {
        return (int)512L;
    }
    public static int _ISalpha() {
        return (int)1024L;
    }
    public static int _ISdigit() {
        return (int)2048L;
    }
    public static int _ISxdigit() {
        return (int)4096L;
    }
    public static int _ISspace() {
        return (int)8192L;
    }
    public static int _ISprint() {
        return (int)16384L;
    }
    public static int _ISgraph() {
        return (int)32768L;
    }
    public static int _ISblank() {
        return (int)1L;
    }
    public static int _IScntrl() {
        return (int)2L;
    }
    public static int _ISpunct() {
        return (int)4L;
    }
    public static int _ISalnum() {
        return (int)8L;
    }
    public static MethodHandle __ctype_b_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_b_loc$MH,"__ctype_b_loc");
    }
    public static MemoryAddress __ctype_b_loc () {
        var mh$ = __ctype_b_loc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_tolower_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_tolower_loc$MH,"__ctype_tolower_loc");
    }
    public static MemoryAddress __ctype_tolower_loc () {
        var mh$ = __ctype_tolower_loc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_toupper_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_toupper_loc$MH,"__ctype_toupper_loc");
    }
    public static MemoryAddress __ctype_toupper_loc () {
        var mh$ = __ctype_toupper_loc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$1.isalnum$MH,"isalnum");
    }
    public static int isalnum ( int x0) {
        var mh$ = isalnum$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$1.isalpha$MH,"isalpha");
    }
    public static int isalpha ( int x0) {
        var mh$ = isalpha$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$1.iscntrl$MH,"iscntrl");
    }
    public static int iscntrl ( int x0) {
        var mh$ = iscntrl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$1.isdigit$MH,"isdigit");
    }
    public static int isdigit ( int x0) {
        var mh$ = isdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$1.islower$MH,"islower");
    }
    public static int islower ( int x0) {
        var mh$ = islower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$1.isgraph$MH,"isgraph");
    }
    public static int isgraph ( int x0) {
        var mh$ = isgraph$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$2.isprint$MH,"isprint");
    }
    public static int isprint ( int x0) {
        var mh$ = isprint$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$2.ispunct$MH,"ispunct");
    }
    public static int ispunct ( int x0) {
        var mh$ = ispunct$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$2.isspace$MH,"isspace");
    }
    public static int isspace ( int x0) {
        var mh$ = isspace$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$2.isupper$MH,"isupper");
    }
    public static int isupper ( int x0) {
        var mh$ = isupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$2.isxdigit$MH,"isxdigit");
    }
    public static int isxdigit ( int x0) {
        var mh$ = isxdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tolower$MH,"tolower");
    }
    public static int tolower ( int __c) {
        var mh$ = tolower$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$3.toupper$MH,"toupper");
    }
    public static int toupper ( int __c) {
        var mh$ = toupper$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$3.isblank$MH,"isblank");
    }
    public static int isblank ( int x0) {
        var mh$ = isblank$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$3.isascii$MH,"isascii");
    }
    public static int isascii ( int __c) {
        var mh$ = isascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$3.toascii$MH,"toascii");
    }
    public static int toascii ( int __c) {
        var mh$ = toascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$3._toupper$MH,"_toupper");
    }
    public static int _toupper ( int x0) {
        var mh$ = _toupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$3._tolower$MH,"_tolower");
    }
    public static int _tolower ( int x0) {
        var mh$ = _tolower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isalnum_l$MH,"isalnum_l");
    }
    public static int isalnum_l ( int x0,  Addressable x1) {
        var mh$ = isalnum_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isalpha_l$MH,"isalpha_l");
    }
    public static int isalpha_l ( int x0,  Addressable x1) {
        var mh$ = isalpha_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iscntrl_l$MH,"iscntrl_l");
    }
    public static int iscntrl_l ( int x0,  Addressable x1) {
        var mh$ = iscntrl_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isdigit_l$MH,"isdigit_l");
    }
    public static int isdigit_l ( int x0,  Addressable x1) {
        var mh$ = isdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.islower_l$MH,"islower_l");
    }
    public static int islower_l ( int x0,  Addressable x1) {
        var mh$ = islower_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isgraph_l$MH,"isgraph_l");
    }
    public static int isgraph_l ( int x0,  Addressable x1) {
        var mh$ = isgraph_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.isprint_l$MH,"isprint_l");
    }
    public static int isprint_l ( int x0,  Addressable x1) {
        var mh$ = isprint_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.ispunct_l$MH,"ispunct_l");
    }
    public static int ispunct_l ( int x0,  Addressable x1) {
        var mh$ = ispunct_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.isspace_l$MH,"isspace_l");
    }
    public static int isspace_l ( int x0,  Addressable x1) {
        var mh$ = isspace_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.isupper_l$MH,"isupper_l");
    }
    public static int isupper_l ( int x0,  Addressable x1) {
        var mh$ = isupper_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.isxdigit_l$MH,"isxdigit_l");
    }
    public static int isxdigit_l ( int x0,  Addressable x1) {
        var mh$ = isxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5.isblank_l$MH,"isblank_l");
    }
    public static int isblank_l ( int x0,  Addressable x1) {
        var mh$ = isblank_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__tolower_l$MH,"__tolower_l");
    }
    public static int __tolower_l ( int __c,  Addressable __l) {
        var mh$ = __tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.tolower_l$MH,"tolower_l");
    }
    public static int tolower_l ( int __c,  Addressable __l) {
        var mh$ = tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__toupper_l$MH,"__toupper_l");
    }
    public static int __toupper_l ( int __c,  Addressable __l) {
        var mh$ = __toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6.toupper_l$MH,"toupper_l");
    }
    public static int toupper_l ( int __c,  Addressable __l) {
        var mh$ = toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __gwchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$6.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$6.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$7.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$7.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MemoryLayout stdin$LAYOUT() {
        return constants$7.stdin$LAYOUT;
    }
    public static VarHandle stdin$VH() {
        return constants$7.stdin$VH;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$7.stdin$SEGMENT,"stdin");
    }
    public static MemoryAddress stdin$get() {
        return (java.lang.foreign.MemoryAddress) constants$7.stdin$VH.get(RuntimeHelper.requireNonNull(constants$7.stdin$SEGMENT, "stdin"));
    }
    public static void stdin$set( MemoryAddress x) {
        constants$7.stdin$VH.set(RuntimeHelper.requireNonNull(constants$7.stdin$SEGMENT, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return constants$7.stdout$LAYOUT;
    }
    public static VarHandle stdout$VH() {
        return constants$7.stdout$VH;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$7.stdout$SEGMENT,"stdout");
    }
    public static MemoryAddress stdout$get() {
        return (java.lang.foreign.MemoryAddress) constants$7.stdout$VH.get(RuntimeHelper.requireNonNull(constants$7.stdout$SEGMENT, "stdout"));
    }
    public static void stdout$set( MemoryAddress x) {
        constants$7.stdout$VH.set(RuntimeHelper.requireNonNull(constants$7.stdout$SEGMENT, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return constants$8.stderr$LAYOUT;
    }
    public static VarHandle stderr$VH() {
        return constants$8.stderr$VH;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.stderr$SEGMENT,"stderr");
    }
    public static MemoryAddress stderr$get() {
        return (java.lang.foreign.MemoryAddress) constants$8.stderr$VH.get(RuntimeHelper.requireNonNull(constants$8.stderr$SEGMENT, "stderr"));
    }
    public static void stderr$set( MemoryAddress x) {
        constants$8.stderr$VH.set(RuntimeHelper.requireNonNull(constants$8.stderr$SEGMENT, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$8.remove$MH,"remove");
    }
    public static int remove ( Addressable __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$8.rename$MH,"rename");
    }
    public static int rename ( Addressable __old,  Addressable __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$8.renameat$MH,"renameat");
    }
    public static int renameat ( int __oldfd,  Addressable __old,  int __newfd,  Addressable __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$8.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tmpnam_r$MH,"tmpnam_r");
    }
    public static MemoryAddress tmpnam_r ( Addressable __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable __dir,  Addressable __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fflush_unlocked$MH,"fflush_unlocked");
    }
    public static int fflush_unlocked ( Addressable __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable __filename,  Addressable __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable __filename,  Addressable __modes,  Addressable __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int __fd,  Addressable __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fmemopen$MH,"fmemopen");
    }
    public static MemoryAddress fmemopen ( Addressable __s,  long __len,  Addressable __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$10.open_memstream$MH,"open_memstream");
    }
    public static MemoryAddress open_memstream ( Addressable __bufloc,  Addressable __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$10.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable __stream,  Addressable __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$10.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable __stream,  Addressable __buf,  int __modes,  long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$11.setbuffer$MH,"setbuffer");
    }
    public static void setbuffer ( Addressable __stream,  Addressable __buf,  long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.setlinebuf$MH,"setlinebuf");
    }
    public static void setlinebuf ( Addressable __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable __stream,  Addressable __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.printf$MH,"printf");
    }
    public static int printf ( Addressable __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable __s,  Addressable __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable __format,  Addressable __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable __s,  long __maxlen,  Addressable __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable __s,  long __maxlen,  Addressable __format,  Addressable __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vdprintf$MH,"vdprintf");
    }
    public static int vdprintf ( int __fd,  Addressable __fmt,  Addressable __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.dprintf$MH,"dprintf");
    }
    public static int dprintf ( int __fd,  Addressable __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable __stream,  Addressable __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable __s,  Addressable __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable __format,  Addressable __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$14.getc$MH,"getc");
    }
    public static int getc ( Addressable __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$14.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$14.getc_unlocked$MH,"getc_unlocked");
    }
    public static int getc_unlocked ( Addressable __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$14.getchar_unlocked$MH,"getchar_unlocked");
    }
    public static int getchar_unlocked () {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fgetc_unlocked$MH,"fgetc_unlocked");
    }
    public static int fgetc_unlocked ( Addressable __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fputc$MH,"fputc");
    }
    public static int fputc ( int __c,  Addressable __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$15.putc$MH,"putc");
    }
    public static int putc ( int __c,  Addressable __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$15.putchar$MH,"putchar");
    }
    public static int putchar ( int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fputc_unlocked$MH,"fputc_unlocked");
    }
    public static int fputc_unlocked ( int __c,  Addressable __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.putc_unlocked$MH,"putc_unlocked");
    }
    public static int putc_unlocked ( int __c,  Addressable __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$15.putchar_unlocked$MH,"putchar_unlocked");
    }
    public static int putchar_unlocked ( int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getw$MH,"getw");
    }
    public static int getw ( Addressable __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$16.putw$MH,"putw");
    }
    public static int putw ( int __w,  Addressable __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable __s,  int __n,  Addressable __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__getdelim$MH,"__getdelim");
    }
    public static long __getdelim ( Addressable __lineptr,  Addressable __n,  int __delimiter,  Addressable __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getdelim$MH,"getdelim");
    }
    public static long getdelim ( Addressable __lineptr,  Addressable __n,  int __delimiter,  Addressable __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getline$MH,"getline");
    }
    public static long getline ( Addressable __lineptr,  Addressable __n,  Addressable __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable __s,  Addressable __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$17.puts$MH,"puts");
    }
    public static int puts ( Addressable __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int __c,  Addressable __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fread$MH,"fread");
    }
    public static long fread ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable __ptr,  long __size,  long __n,  Addressable __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fread_unlocked$MH,"fread_unlocked");
    }
    public static long fread_unlocked ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fwrite_unlocked$MH,"fwrite_unlocked");
    }
    public static long fwrite_unlocked ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable __stream,  long __off,  int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$18.ftell$MH,"ftell");
    }
    public static long ftell ( Addressable __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$18.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fseeko$MH,"fseeko");
    }
    public static int fseeko ( Addressable __stream,  long __off,  int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$18.ftello$MH,"ftello");
    }
    public static long ftello ( Addressable __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable __stream,  Addressable __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable __stream,  Addressable __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$19.feof$MH,"feof");
    }
    public static int feof ( Addressable __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$19.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$19.clearerr_unlocked$MH,"clearerr_unlocked");
    }
    public static void clearerr_unlocked ( Addressable __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.feof_unlocked$MH,"feof_unlocked");
    }
    public static int feof_unlocked ( Addressable __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.ferror_unlocked$MH,"ferror_unlocked");
    }
    public static int ferror_unlocked ( Addressable __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$20.perror$MH,"perror");
    }
    public static void perror ( Addressable __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fileno_unlocked$MH,"fileno_unlocked");
    }
    public static int fileno_unlocked ( Addressable __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$20.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$21.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable __command,  Addressable __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$21.ctermid$MH,"ctermid");
    }
    public static MemoryAddress ctermid ( Addressable __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.flockfile$MH,"flockfile");
    }
    public static void flockfile ( Addressable __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.ftrylockfile$MH,"ftrylockfile");
    }
    public static int ftrylockfile ( Addressable __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.funlockfile$MH,"funlockfile");
    }
    public static void funlockfile ( Addressable __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__uflow$MH,"__uflow");
    }
    public static int __uflow ( Addressable x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__overflow$MH,"__overflow");
    }
    public static int __overflow ( Addressable x0,  int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$22.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$22.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$22.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$22.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$24.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$24.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$24.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$24.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$24.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$25.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$25.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$26.random$MH,"random");
    }
    public static long random () {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$26.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$26.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$26.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$26.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$26.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$27.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$27.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$27.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$27.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$27.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$27.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$28.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$29.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$29.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$29.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$29.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$30.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$30.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$31.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$31.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$31.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$32.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$32.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$32.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$33.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$33.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$34.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$34.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$34._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$35.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$36.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$36.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$36.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$36.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$37.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$37.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$37.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$37.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$37.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$37.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$38.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$38.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$39.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$39.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$39.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$39.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$39.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$40.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$40.memcpy$MH,"memcpy");
    }
    public static MemoryAddress memcpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$40.memmove$MH,"memmove");
    }
    public static MemoryAddress memmove ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$40.memccpy$MH,"memccpy");
    }
    public static MemoryAddress memccpy ( Addressable __dest,  Addressable __src,  int __c,  long __n) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$40.memset$MH,"memset");
    }
    public static MemoryAddress memset ( Addressable __s,  int __c,  long __n) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$40.memcmp$MH,"memcmp");
    }
    public static int memcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __memcmpeq$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__memcmpeq$MH,"__memcmpeq");
    }
    public static int __memcmpeq ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = __memcmpeq$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$41.memchr$MH,"memchr");
    }
    public static MemoryAddress memchr ( Addressable __s,  int __c,  long __n) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strcpy$MH,"strcpy");
    }
    public static MemoryAddress strcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strncpy$MH,"strncpy");
    }
    public static MemoryAddress strncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strcat$MH,"strcat");
    }
    public static MemoryAddress strcat ( Addressable __dest,  Addressable __src) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strncat$MH,"strncat");
    }
    public static MemoryAddress strncat ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strcmp$MH,"strcmp");
    }
    public static int strcmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strncmp$MH,"strncmp");
    }
    public static int strncmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strcoll$MH,"strcoll");
    }
    public static int strcoll ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strxfrm$MH,"strxfrm");
    }
    public static long strxfrm ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strcoll_l$MH,"strcoll_l");
    }
    public static int strcoll_l ( Addressable __s1,  Addressable __s2,  Addressable __l) {
        var mh$ = strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strxfrm_l$MH,"strxfrm_l");
    }
    public static long strxfrm_l ( Addressable __dest,  Addressable __src,  long __n,  Addressable __l) {
        var mh$ = strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strdup$MH,"strdup");
    }
    public static MemoryAddress strdup ( Addressable __s) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strndup$MH,"strndup");
    }
    public static MemoryAddress strndup ( Addressable __string,  long __n) {
        var mh$ = strndup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strchr$MH,"strchr");
    }
    public static MemoryAddress strchr ( Addressable __s,  int __c) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strrchr$MH,"strrchr");
    }
    public static MemoryAddress strrchr ( Addressable __s,  int __c) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strcspn$MH,"strcspn");
    }
    public static long strcspn ( Addressable __s,  Addressable __reject) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


