// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

public class bitrec_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("acc_id"),
        Constants$root.C_INT$LAYOUT.withName("bit_id"),
        Constants$root.C_INT$LAYOUT.withName("block_offset"),
        Constants$root.C_INT$LAYOUT.withName("max_offset"),
        Constants$root.C_INT$LAYOUT.withName("byte_offset"),
        Constants$root.C_INT$LAYOUT.withName("count"),
        Constants$root.C_INT$LAYOUT.withName("buf_read"),
        Constants$root.C_CHAR$LAYOUT.withName("access"),
        Constants$root.C_CHAR$LAYOUT.withName("mode"),
        Constants$root.C_CHAR$LAYOUT.withName("bits"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_POINTER$LAYOUT.withName("bytep"),
        Constants$root.C_POINTER$LAYOUT.withName("bytez"),
        Constants$root.C_POINTER$LAYOUT.withName("bytea")
    ).withName("bitrec_t");
    public static MemoryLayout $LAYOUT() {
        return bitrec_t.$struct$LAYOUT;
    }
    static final VarHandle acc_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("acc_id"));
    public static VarHandle acc_id$VH() {
        return bitrec_t.acc_id$VH;
    }
    public static int acc_id$get(MemorySegment seg) {
        return (int)bitrec_t.acc_id$VH.get(seg);
    }
    public static void acc_id$set( MemorySegment seg, int x) {
        bitrec_t.acc_id$VH.set(seg, x);
    }
    public static int acc_id$get(MemorySegment seg, long index) {
        return (int)bitrec_t.acc_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void acc_id$set(MemorySegment seg, long index, int x) {
        bitrec_t.acc_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bit_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_id"));
    public static VarHandle bit_id$VH() {
        return bitrec_t.bit_id$VH;
    }
    public static int bit_id$get(MemorySegment seg) {
        return (int)bitrec_t.bit_id$VH.get(seg);
    }
    public static void bit_id$set( MemorySegment seg, int x) {
        bitrec_t.bit_id$VH.set(seg, x);
    }
    public static int bit_id$get(MemorySegment seg, long index) {
        return (int)bitrec_t.bit_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_id$set(MemorySegment seg, long index, int x) {
        bitrec_t.bit_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle block_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("block_offset"));
    public static VarHandle block_offset$VH() {
        return bitrec_t.block_offset$VH;
    }
    public static int block_offset$get(MemorySegment seg) {
        return (int)bitrec_t.block_offset$VH.get(seg);
    }
    public static void block_offset$set( MemorySegment seg, int x) {
        bitrec_t.block_offset$VH.set(seg, x);
    }
    public static int block_offset$get(MemorySegment seg, long index) {
        return (int)bitrec_t.block_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void block_offset$set(MemorySegment seg, long index, int x) {
        bitrec_t.block_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_offset"));
    public static VarHandle max_offset$VH() {
        return bitrec_t.max_offset$VH;
    }
    public static int max_offset$get(MemorySegment seg) {
        return (int)bitrec_t.max_offset$VH.get(seg);
    }
    public static void max_offset$set( MemorySegment seg, int x) {
        bitrec_t.max_offset$VH.set(seg, x);
    }
    public static int max_offset$get(MemorySegment seg, long index) {
        return (int)bitrec_t.max_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_offset$set(MemorySegment seg, long index, int x) {
        bitrec_t.max_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte_offset"));
    public static VarHandle byte_offset$VH() {
        return bitrec_t.byte_offset$VH;
    }
    public static int byte_offset$get(MemorySegment seg) {
        return (int)bitrec_t.byte_offset$VH.get(seg);
    }
    public static void byte_offset$set( MemorySegment seg, int x) {
        bitrec_t.byte_offset$VH.set(seg, x);
    }
    public static int byte_offset$get(MemorySegment seg, long index) {
        return (int)bitrec_t.byte_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte_offset$set(MemorySegment seg, long index, int x) {
        bitrec_t.byte_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("count"));
    public static VarHandle count$VH() {
        return bitrec_t.count$VH;
    }
    public static int count$get(MemorySegment seg) {
        return (int)bitrec_t.count$VH.get(seg);
    }
    public static void count$set( MemorySegment seg, int x) {
        bitrec_t.count$VH.set(seg, x);
    }
    public static int count$get(MemorySegment seg, long index) {
        return (int)bitrec_t.count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, int x) {
        bitrec_t.count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buf_read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf_read"));
    public static VarHandle buf_read$VH() {
        return bitrec_t.buf_read$VH;
    }
    public static int buf_read$get(MemorySegment seg) {
        return (int)bitrec_t.buf_read$VH.get(seg);
    }
    public static void buf_read$set( MemorySegment seg, int x) {
        bitrec_t.buf_read$VH.set(seg, x);
    }
    public static int buf_read$get(MemorySegment seg, long index) {
        return (int)bitrec_t.buf_read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf_read$set(MemorySegment seg, long index, int x) {
        bitrec_t.buf_read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle access$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("access"));
    public static VarHandle access$VH() {
        return bitrec_t.access$VH;
    }
    public static byte access$get(MemorySegment seg) {
        return (byte)bitrec_t.access$VH.get(seg);
    }
    public static void access$set( MemorySegment seg, byte x) {
        bitrec_t.access$VH.set(seg, x);
    }
    public static byte access$get(MemorySegment seg, long index) {
        return (byte)bitrec_t.access$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void access$set(MemorySegment seg, long index, byte x) {
        bitrec_t.access$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mode"));
    public static VarHandle mode$VH() {
        return bitrec_t.mode$VH;
    }
    public static byte mode$get(MemorySegment seg) {
        return (byte)bitrec_t.mode$VH.get(seg);
    }
    public static void mode$set( MemorySegment seg, byte x) {
        bitrec_t.mode$VH.set(seg, x);
    }
    public static byte mode$get(MemorySegment seg, long index) {
        return (byte)bitrec_t.mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, byte x) {
        bitrec_t.mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits"));
    public static VarHandle bits$VH() {
        return bitrec_t.bits$VH;
    }
    public static byte bits$get(MemorySegment seg) {
        return (byte)bitrec_t.bits$VH.get(seg);
    }
    public static void bits$set( MemorySegment seg, byte x) {
        bitrec_t.bits$VH.set(seg, x);
    }
    public static byte bits$get(MemorySegment seg, long index) {
        return (byte)bitrec_t.bits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits$set(MemorySegment seg, long index, byte x) {
        bitrec_t.bits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytep$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytep"));
    public static VarHandle bytep$VH() {
        return bitrec_t.bytep$VH;
    }
    public static MemoryAddress bytep$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)bitrec_t.bytep$VH.get(seg);
    }
    public static void bytep$set( MemorySegment seg, MemoryAddress x) {
        bitrec_t.bytep$VH.set(seg, x);
    }
    public static MemoryAddress bytep$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)bitrec_t.bytep$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytep$set(MemorySegment seg, long index, MemoryAddress x) {
        bitrec_t.bytep$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytez$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytez"));
    public static VarHandle bytez$VH() {
        return bitrec_t.bytez$VH;
    }
    public static MemoryAddress bytez$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)bitrec_t.bytez$VH.get(seg);
    }
    public static void bytez$set( MemorySegment seg, MemoryAddress x) {
        bitrec_t.bytez$VH.set(seg, x);
    }
    public static MemoryAddress bytez$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)bitrec_t.bytez$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytez$set(MemorySegment seg, long index, MemoryAddress x) {
        bitrec_t.bytez$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytea$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytea"));
    public static VarHandle bytea$VH() {
        return bitrec_t.bytea$VH;
    }
    public static MemoryAddress bytea$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)bitrec_t.bytea$VH.get(seg);
    }
    public static void bytea$set( MemorySegment seg, MemoryAddress x) {
        bitrec_t.bytea$VH.set(seg, x);
    }
    public static MemoryAddress bytea$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)bitrec_t.bytea$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytea$set(MemorySegment seg, long index, MemoryAddress x) {
        bitrec_t.bytea$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


