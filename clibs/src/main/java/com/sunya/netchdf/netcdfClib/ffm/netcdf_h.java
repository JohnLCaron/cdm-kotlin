// Generated by jextract

package com.sunya.netchdf.netcdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class netcdf_h  {

    /* package-private */ netcdf_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _ERRNO_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)35L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int _BITS_ERRNO_H() {
        return (int)1L;
    }
    public static int EPERM() {
        return (int)1L;
    }
    public static int ENOENT() {
        return (int)2L;
    }
    public static int ESRCH() {
        return (int)3L;
    }
    public static int EINTR() {
        return (int)4L;
    }
    public static int EIO() {
        return (int)5L;
    }
    public static int ENXIO() {
        return (int)6L;
    }
    public static int E2BIG() {
        return (int)7L;
    }
    public static int ENOEXEC() {
        return (int)8L;
    }
    public static int EBADF() {
        return (int)9L;
    }
    public static int ECHILD() {
        return (int)10L;
    }
    public static int EAGAIN() {
        return (int)11L;
    }
    public static int ENOMEM() {
        return (int)12L;
    }
    public static int EACCES() {
        return (int)13L;
    }
    public static int EFAULT() {
        return (int)14L;
    }
    public static int ENOTBLK() {
        return (int)15L;
    }
    public static int EBUSY() {
        return (int)16L;
    }
    public static int EEXIST() {
        return (int)17L;
    }
    public static int EXDEV() {
        return (int)18L;
    }
    public static int ENODEV() {
        return (int)19L;
    }
    public static int ENOTDIR() {
        return (int)20L;
    }
    public static int EISDIR() {
        return (int)21L;
    }
    public static int EINVAL() {
        return (int)22L;
    }
    public static int ENFILE() {
        return (int)23L;
    }
    public static int EMFILE() {
        return (int)24L;
    }
    public static int ENOTTY() {
        return (int)25L;
    }
    public static int ETXTBSY() {
        return (int)26L;
    }
    public static int EFBIG() {
        return (int)27L;
    }
    public static int ENOSPC() {
        return (int)28L;
    }
    public static int ESPIPE() {
        return (int)29L;
    }
    public static int EROFS() {
        return (int)30L;
    }
    public static int EMLINK() {
        return (int)31L;
    }
    public static int EPIPE() {
        return (int)32L;
    }
    public static int EDOM() {
        return (int)33L;
    }
    public static int ERANGE() {
        return (int)34L;
    }
    public static int EDEADLK() {
        return (int)35L;
    }
    public static int ENAMETOOLONG() {
        return (int)36L;
    }
    public static int ENOLCK() {
        return (int)37L;
    }
    public static int ENOSYS() {
        return (int)38L;
    }
    public static int ENOTEMPTY() {
        return (int)39L;
    }
    public static int ELOOP() {
        return (int)40L;
    }
    public static int ENOMSG() {
        return (int)42L;
    }
    public static int EIDRM() {
        return (int)43L;
    }
    public static int ECHRNG() {
        return (int)44L;
    }
    public static int EL2NSYNC() {
        return (int)45L;
    }
    public static int EL3HLT() {
        return (int)46L;
    }
    public static int EL3RST() {
        return (int)47L;
    }
    public static int ELNRNG() {
        return (int)48L;
    }
    public static int EUNATCH() {
        return (int)49L;
    }
    public static int ENOCSI() {
        return (int)50L;
    }
    public static int EL2HLT() {
        return (int)51L;
    }
    public static int EBADE() {
        return (int)52L;
    }
    public static int EBADR() {
        return (int)53L;
    }
    public static int EXFULL() {
        return (int)54L;
    }
    public static int ENOANO() {
        return (int)55L;
    }
    public static int EBADRQC() {
        return (int)56L;
    }
    public static int EBADSLT() {
        return (int)57L;
    }
    public static int EBFONT() {
        return (int)59L;
    }
    public static int ENOSTR() {
        return (int)60L;
    }
    public static int ENODATA() {
        return (int)61L;
    }
    public static int ETIME() {
        return (int)62L;
    }
    public static int ENOSR() {
        return (int)63L;
    }
    public static int ENONET() {
        return (int)64L;
    }
    public static int ENOPKG() {
        return (int)65L;
    }
    public static int EREMOTE() {
        return (int)66L;
    }
    public static int ENOLINK() {
        return (int)67L;
    }
    public static int EADV() {
        return (int)68L;
    }
    public static int ESRMNT() {
        return (int)69L;
    }
    public static int ECOMM() {
        return (int)70L;
    }
    public static int EPROTO() {
        return (int)71L;
    }
    public static int EMULTIHOP() {
        return (int)72L;
    }
    public static int EDOTDOT() {
        return (int)73L;
    }
    public static int EBADMSG() {
        return (int)74L;
    }
    public static int EOVERFLOW() {
        return (int)75L;
    }
    public static int ENOTUNIQ() {
        return (int)76L;
    }
    public static int EBADFD() {
        return (int)77L;
    }
    public static int EREMCHG() {
        return (int)78L;
    }
    public static int ELIBACC() {
        return (int)79L;
    }
    public static int ELIBBAD() {
        return (int)80L;
    }
    public static int ELIBSCN() {
        return (int)81L;
    }
    public static int ELIBMAX() {
        return (int)82L;
    }
    public static int ELIBEXEC() {
        return (int)83L;
    }
    public static int EILSEQ() {
        return (int)84L;
    }
    public static int ERESTART() {
        return (int)85L;
    }
    public static int ESTRPIPE() {
        return (int)86L;
    }
    public static int EUSERS() {
        return (int)87L;
    }
    public static int ENOTSOCK() {
        return (int)88L;
    }
    public static int EDESTADDRREQ() {
        return (int)89L;
    }
    public static int EMSGSIZE() {
        return (int)90L;
    }
    public static int EPROTOTYPE() {
        return (int)91L;
    }
    public static int ENOPROTOOPT() {
        return (int)92L;
    }
    public static int EPROTONOSUPPORT() {
        return (int)93L;
    }
    public static int ESOCKTNOSUPPORT() {
        return (int)94L;
    }
    public static int EOPNOTSUPP() {
        return (int)95L;
    }
    public static int EPFNOSUPPORT() {
        return (int)96L;
    }
    public static int EAFNOSUPPORT() {
        return (int)97L;
    }
    public static int EADDRINUSE() {
        return (int)98L;
    }
    public static int EADDRNOTAVAIL() {
        return (int)99L;
    }
    public static int ENETDOWN() {
        return (int)100L;
    }
    public static int ENETUNREACH() {
        return (int)101L;
    }
    public static int ENETRESET() {
        return (int)102L;
    }
    public static int ECONNABORTED() {
        return (int)103L;
    }
    public static int ECONNRESET() {
        return (int)104L;
    }
    public static int ENOBUFS() {
        return (int)105L;
    }
    public static int EISCONN() {
        return (int)106L;
    }
    public static int ENOTCONN() {
        return (int)107L;
    }
    public static int ESHUTDOWN() {
        return (int)108L;
    }
    public static int ETOOMANYREFS() {
        return (int)109L;
    }
    public static int ETIMEDOUT() {
        return (int)110L;
    }
    public static int ECONNREFUSED() {
        return (int)111L;
    }
    public static int EHOSTDOWN() {
        return (int)112L;
    }
    public static int EHOSTUNREACH() {
        return (int)113L;
    }
    public static int EALREADY() {
        return (int)114L;
    }
    public static int EINPROGRESS() {
        return (int)115L;
    }
    public static int ESTALE() {
        return (int)116L;
    }
    public static int EUCLEAN() {
        return (int)117L;
    }
    public static int ENOTNAM() {
        return (int)118L;
    }
    public static int ENAVAIL() {
        return (int)119L;
    }
    public static int EISNAM() {
        return (int)120L;
    }
    public static int EREMOTEIO() {
        return (int)121L;
    }
    public static int EDQUOT() {
        return (int)122L;
    }
    public static int ENOMEDIUM() {
        return (int)123L;
    }
    public static int EMEDIUMTYPE() {
        return (int)124L;
    }
    public static int ECANCELED() {
        return (int)125L;
    }
    public static int ENOKEY() {
        return (int)126L;
    }
    public static int EKEYEXPIRED() {
        return (int)127L;
    }
    public static int EKEYREVOKED() {
        return (int)128L;
    }
    public static int EKEYREJECTED() {
        return (int)129L;
    }
    public static int EOWNERDEAD() {
        return (int)130L;
    }
    public static int ENOTRECOVERABLE() {
        return (int)131L;
    }
    public static int ERFKILL() {
        return (int)132L;
    }
    public static int EHWPOISON() {
        return (int)133L;
    }
    public static int NC_NAT() {
        return (int)0L;
    }
    public static int NC_BYTE() {
        return (int)1L;
    }
    public static int NC_CHAR() {
        return (int)2L;
    }
    public static int NC_SHORT() {
        return (int)3L;
    }
    public static int NC_INT() {
        return (int)4L;
    }
    public static int NC_FLOAT() {
        return (int)5L;
    }
    public static int NC_DOUBLE() {
        return (int)6L;
    }
    public static int NC_UBYTE() {
        return (int)7L;
    }
    public static int NC_USHORT() {
        return (int)8L;
    }
    public static int NC_UINT() {
        return (int)9L;
    }
    public static int NC_INT64() {
        return (int)10L;
    }
    public static int NC_UINT64() {
        return (int)11L;
    }
    public static int NC_STRING() {
        return (int)12L;
    }
    public static int NC_VLEN() {
        return (int)13L;
    }
    public static int NC_OPAQUE() {
        return (int)14L;
    }
    public static int NC_ENUM() {
        return (int)15L;
    }
    public static int NC_COMPOUND() {
        return (int)16L;
    }
    public static int NC_FIRSTUSERTYPEID() {
        return (int)32L;
    }
    public static int NC_MAX_BYTE() {
        return (int)127L;
    }
    public static int NC_MAX_CHAR() {
        return (int)255L;
    }
    public static int NC_MAX_SHORT() {
        return (int)32767L;
    }
    public static int NC_MAX_INT() {
        return (int)2147483647L;
    }
    public static int NC_FILL() {
        return (int)0L;
    }
    public static int NC_NOFILL() {
        return (int)256L;
    }
    public static int NC_NOWRITE() {
        return (int)0L;
    }
    public static int NC_WRITE() {
        return (int)1L;
    }
    public static int NC_CLOBBER() {
        return (int)0L;
    }
    public static int NC_NOCLOBBER() {
        return (int)4L;
    }
    public static int NC_DISKLESS() {
        return (int)8L;
    }
    public static int NC_MMAP() {
        return (int)16L;
    }
    public static int NC_64BIT_DATA() {
        return (int)32L;
    }
    public static int NC_UDF0() {
        return (int)64L;
    }
    public static int NC_UDF1() {
        return (int)128L;
    }
    public static int NC_CLASSIC_MODEL() {
        return (int)256L;
    }
    public static int NC_64BIT_OFFSET() {
        return (int)512L;
    }
    public static int NC_LOCK() {
        return (int)1024L;
    }
    public static int NC_SHARE() {
        return (int)2048L;
    }
    public static int NC_NETCDF4() {
        return (int)4096L;
    }
    public static int NC_MPIIO() {
        return (int)8192L;
    }
    public static int NC_PERSIST() {
        return (int)16384L;
    }
    public static int NC_INMEMORY() {
        return (int)32768L;
    }
    public static int NC_NOATTCREORD() {
        return (int)131072L;
    }
    public static int NC_NODIMSCALE_ATTACH() {
        return (int)262144L;
    }
    public static int NC_MAX_MAGIC_NUMBER_LEN() {
        return (int)8L;
    }
    public static int NC_SIZEHINT_DEFAULT() {
        return (int)0L;
    }
    public static int NC_MAX_DIMS() {
        return (int)1024L;
    }
    public static int NC_MAX_ATTRS() {
        return (int)8192L;
    }
    public static int NC_MAX_VARS() {
        return (int)8192L;
    }
    public static int NC_MAX_NAME() {
        return (int)256L;
    }
    public static int NC_MAX_VAR_DIMS() {
        return (int)1024L;
    }
    public static int NC_ENDIAN_NATIVE() {
        return (int)0L;
    }
    public static int NC_ENDIAN_LITTLE() {
        return (int)1L;
    }
    public static int NC_ENDIAN_BIG() {
        return (int)2L;
    }
    public static int NC_CHUNKED() {
        return (int)0L;
    }
    public static int NC_CONTIGUOUS() {
        return (int)1L;
    }
    public static int NC_COMPACT() {
        return (int)2L;
    }
    public static int NC_UNKNOWN_STORAGE() {
        return (int)3L;
    }
    public static int NC_VIRTUAL() {
        return (int)4L;
    }
    public static int NC_NOCHECKSUM() {
        return (int)0L;
    }
    public static int NC_FLETCHER32() {
        return (int)1L;
    }
    public static int NC_NOSHUFFLE() {
        return (int)0L;
    }
    public static int NC_SHUFFLE() {
        return (int)1L;
    }
    public static int NC_MIN_DEFLATE_LEVEL() {
        return (int)0L;
    }
    public static int NC_MAX_DEFLATE_LEVEL() {
        return (int)9L;
    }
    public static int NC_SZIP_NN() {
        return (int)32L;
    }
    public static int NC_SZIP_EC() {
        return (int)4L;
    }
    public static int NC_NOQUANTIZE() {
        return (int)0L;
    }
    public static int NC_QUANTIZE_BITGROOM() {
        return (int)1L;
    }
    public static int NC_QUANTIZE_GRANULARBR() {
        return (int)2L;
    }
    public static int NC_QUANTIZE_BITROUND() {
        return (int)3L;
    }
    public static int NC_NOERR() {
        return (int)0L;
    }
    public static int NC_HAVE_NEW_CHUNKING_API() {
        return (int)1L;
    }
    public static int NC_FATAL() {
        return (int)1L;
    }
    public static int NC_VERBOSE() {
        return (int)2L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__errno_location$MH,"__errno_location");
    }
    public static MemoryAddress __errno_location () {
        var mh$ = __errno_location$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt nc_type = Constants$root.C_INT$LAYOUT;
    public static MethodHandle nc_inq_libvers$MH() {
        return RuntimeHelper.requireNonNull(constants$0.nc_inq_libvers$MH,"nc_inq_libvers");
    }
    public static MemoryAddress nc_inq_libvers () {
        var mh$ = nc_inq_libvers$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$0.nc_strerror$MH,"nc_strerror");
    }
    public static MemoryAddress nc_strerror ( int ncerr) {
        var mh$ = nc_strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ncerr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_user_format$MH() {
        return RuntimeHelper.requireNonNull(constants$0.nc_def_user_format$MH,"nc_def_user_format");
    }
    public static int nc_def_user_format ( int mode_flag,  Addressable dispatch_table,  Addressable magic_number) {
        var mh$ = nc_def_user_format$MH();
        try {
            return (int)mh$.invokeExact(mode_flag, dispatch_table, magic_number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_user_format$MH() {
        return RuntimeHelper.requireNonNull(constants$0.nc_inq_user_format$MH,"nc_inq_user_format");
    }
    public static int nc_inq_user_format ( int mode_flag,  Addressable dispatch_table,  Addressable magic_number) {
        var mh$ = nc_inq_user_format$MH();
        try {
            return (int)mh$.invokeExact(mode_flag, dispatch_table, magic_number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$0.nc_set_alignment$MH,"nc_set_alignment");
    }
    public static int nc_set_alignment ( int threshold,  int alignment) {
        var mh$ = nc_set_alignment$MH();
        try {
            return (int)mh$.invokeExact(threshold, alignment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$1.nc_get_alignment$MH,"nc_get_alignment");
    }
    public static int nc_get_alignment ( Addressable thresholdp,  Addressable alignmentp) {
        var mh$ = nc_get_alignment$MH();
        try {
            return (int)mh$.invokeExact(thresholdp, alignmentp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__create$MH() {
        return RuntimeHelper.requireNonNull(constants$1.nc__create$MH,"nc__create");
    }
    public static int nc__create ( Addressable path,  int cmode,  long initialsz,  Addressable chunksizehintp,  Addressable ncidp) {
        var mh$ = nc__create$MH();
        try {
            return (int)mh$.invokeExact(path, cmode, initialsz, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1.nc_create$MH,"nc_create");
    }
    public static int nc_create ( Addressable path,  int cmode,  Addressable ncidp) {
        var mh$ = nc_create$MH();
        try {
            return (int)mh$.invokeExact(path, cmode, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__open$MH() {
        return RuntimeHelper.requireNonNull(constants$1.nc__open$MH,"nc__open");
    }
    public static int nc__open ( Addressable path,  int mode,  Addressable chunksizehintp,  Addressable ncidp) {
        var mh$ = nc__open$MH();
        try {
            return (int)mh$.invokeExact(path, mode, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_open$MH() {
        return RuntimeHelper.requireNonNull(constants$1.nc_open$MH,"nc_open");
    }
    public static int nc_open ( Addressable path,  int mode,  Addressable ncidp) {
        var mh$ = nc_open$MH();
        try {
            return (int)mh$.invokeExact(path, mode, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1.nc_inq_path$MH,"nc_inq_path");
    }
    public static int nc_inq_path ( int ncid,  Addressable pathlen,  Addressable path) {
        var mh$ = nc_inq_path$MH();
        try {
            return (int)mh$.invokeExact(ncid, pathlen, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_ncid$MH() {
        return RuntimeHelper.requireNonNull(constants$2.nc_inq_ncid$MH,"nc_inq_ncid");
    }
    public static int nc_inq_ncid ( int ncid,  Addressable name,  Addressable grp_ncid) {
        var mh$ = nc_inq_ncid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, grp_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grps$MH() {
        return RuntimeHelper.requireNonNull(constants$2.nc_inq_grps$MH,"nc_inq_grps");
    }
    public static int nc_inq_grps ( int ncid,  Addressable numgrps,  Addressable ncids) {
        var mh$ = nc_inq_grps$MH();
        try {
            return (int)mh$.invokeExact(ncid, numgrps, ncids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grpname$MH() {
        return RuntimeHelper.requireNonNull(constants$2.nc_inq_grpname$MH,"nc_inq_grpname");
    }
    public static int nc_inq_grpname ( int ncid,  Addressable name) {
        var mh$ = nc_inq_grpname$MH();
        try {
            return (int)mh$.invokeExact(ncid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grpname_full$MH() {
        return RuntimeHelper.requireNonNull(constants$2.nc_inq_grpname_full$MH,"nc_inq_grpname_full");
    }
    public static int nc_inq_grpname_full ( int ncid,  Addressable lenp,  Addressable full_name) {
        var mh$ = nc_inq_grpname_full$MH();
        try {
            return (int)mh$.invokeExact(ncid, lenp, full_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grpname_len$MH() {
        return RuntimeHelper.requireNonNull(constants$2.nc_inq_grpname_len$MH,"nc_inq_grpname_len");
    }
    public static int nc_inq_grpname_len ( int ncid,  Addressable lenp) {
        var mh$ = nc_inq_grpname_len$MH();
        try {
            return (int)mh$.invokeExact(ncid, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grp_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$2.nc_inq_grp_parent$MH,"nc_inq_grp_parent");
    }
    public static int nc_inq_grp_parent ( int ncid,  Addressable parent_ncid) {
        var mh$ = nc_inq_grp_parent$MH();
        try {
            return (int)mh$.invokeExact(ncid, parent_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grp_ncid$MH() {
        return RuntimeHelper.requireNonNull(constants$3.nc_inq_grp_ncid$MH,"nc_inq_grp_ncid");
    }
    public static int nc_inq_grp_ncid ( int ncid,  Addressable grp_name,  Addressable grp_ncid) {
        var mh$ = nc_inq_grp_ncid$MH();
        try {
            return (int)mh$.invokeExact(ncid, grp_name, grp_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_grp_full_ncid$MH() {
        return RuntimeHelper.requireNonNull(constants$3.nc_inq_grp_full_ncid$MH,"nc_inq_grp_full_ncid");
    }
    public static int nc_inq_grp_full_ncid ( int ncid,  Addressable full_name,  Addressable grp_ncid) {
        var mh$ = nc_inq_grp_full_ncid$MH();
        try {
            return (int)mh$.invokeExact(ncid, full_name, grp_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varids$MH() {
        return RuntimeHelper.requireNonNull(constants$3.nc_inq_varids$MH,"nc_inq_varids");
    }
    public static int nc_inq_varids ( int ncid,  Addressable nvars,  Addressable varids) {
        var mh$ = nc_inq_varids$MH();
        try {
            return (int)mh$.invokeExact(ncid, nvars, varids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimids$MH() {
        return RuntimeHelper.requireNonNull(constants$3.nc_inq_dimids$MH,"nc_inq_dimids");
    }
    public static int nc_inq_dimids ( int ncid,  Addressable ndims,  Addressable dimids,  int include_parents) {
        var mh$ = nc_inq_dimids$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndims, dimids, include_parents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_typeids$MH() {
        return RuntimeHelper.requireNonNull(constants$3.nc_inq_typeids$MH,"nc_inq_typeids");
    }
    public static int nc_inq_typeids ( int ncid,  Addressable ntypes,  Addressable typeids) {
        var mh$ = nc_inq_typeids$MH();
        try {
            return (int)mh$.invokeExact(ncid, ntypes, typeids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_type_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$3.nc_inq_type_equal$MH,"nc_inq_type_equal");
    }
    public static int nc_inq_type_equal ( int ncid1,  int typeid1,  int ncid2,  int typeid2,  Addressable equal) {
        var mh$ = nc_inq_type_equal$MH();
        try {
            return (int)mh$.invokeExact(ncid1, typeid1, ncid2, typeid2, equal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_grp$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nc_def_grp$MH,"nc_def_grp");
    }
    public static int nc_def_grp ( int parent_ncid,  Addressable name,  Addressable new_ncid) {
        var mh$ = nc_def_grp$MH();
        try {
            return (int)mh$.invokeExact(parent_ncid, name, new_ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_grp$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nc_rename_grp$MH,"nc_rename_grp");
    }
    public static int nc_rename_grp ( int grpid,  Addressable name) {
        var mh$ = nc_rename_grp$MH();
        try {
            return (int)mh$.invokeExact(grpid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nc_def_compound$MH,"nc_def_compound");
    }
    public static int nc_def_compound ( int ncid,  long size,  Addressable name,  Addressable typeidp) {
        var mh$ = nc_def_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, size, name, typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_insert_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nc_insert_compound$MH,"nc_insert_compound");
    }
    public static int nc_insert_compound ( int ncid,  int xtype,  Addressable name,  long offset,  int field_typeid) {
        var mh$ = nc_insert_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, offset, field_typeid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_insert_array_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nc_insert_array_compound$MH,"nc_insert_array_compound");
    }
    public static int nc_insert_array_compound ( int ncid,  int xtype,  Addressable name,  long offset,  int field_typeid,  int ndims,  Addressable dim_sizes) {
        var mh$ = nc_insert_array_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, offset, field_typeid, ndims, dim_sizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_type$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nc_inq_type$MH,"nc_inq_type");
    }
    public static int nc_inq_type ( int ncid,  int xtype,  Addressable name,  Addressable size) {
        var mh$ = nc_inq_type$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_typeid$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nc_inq_typeid$MH,"nc_inq_typeid");
    }
    public static int nc_inq_typeid ( int ncid,  Addressable name,  Addressable typeidp) {
        var mh$ = nc_inq_typeid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nc_inq_compound$MH,"nc_inq_compound");
    }
    public static int nc_inq_compound ( int ncid,  int xtype,  Addressable name,  Addressable sizep,  Addressable nfieldsp) {
        var mh$ = nc_inq_compound$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, sizep, nfieldsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_name$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nc_inq_compound_name$MH,"nc_inq_compound_name");
    }
    public static int nc_inq_compound_name ( int ncid,  int xtype,  Addressable name) {
        var mh$ = nc_inq_compound_name$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_size$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nc_inq_compound_size$MH,"nc_inq_compound_size");
    }
    public static int nc_inq_compound_size ( int ncid,  int xtype,  Addressable sizep) {
        var mh$ = nc_inq_compound_size$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_nfields$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nc_inq_compound_nfields$MH,"nc_inq_compound_nfields");
    }
    public static int nc_inq_compound_nfields ( int ncid,  int xtype,  Addressable nfieldsp) {
        var mh$ = nc_inq_compound_nfields$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, nfieldsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_field$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nc_inq_compound_field$MH,"nc_inq_compound_field");
    }
    public static int nc_inq_compound_field ( int ncid,  int xtype,  int fieldid,  Addressable name,  Addressable offsetp,  Addressable field_typeidp,  Addressable ndimsp,  Addressable dim_sizesp) {
        var mh$ = nc_inq_compound_field$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, name, offsetp, field_typeidp, ndimsp, dim_sizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldname$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nc_inq_compound_fieldname$MH,"nc_inq_compound_fieldname");
    }
    public static int nc_inq_compound_fieldname ( int ncid,  int xtype,  int fieldid,  Addressable name) {
        var mh$ = nc_inq_compound_fieldname$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldindex$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nc_inq_compound_fieldindex$MH,"nc_inq_compound_fieldindex");
    }
    public static int nc_inq_compound_fieldindex ( int ncid,  int xtype,  Addressable name,  Addressable fieldidp) {
        var mh$ = nc_inq_compound_fieldindex$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, fieldidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldoffset$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nc_inq_compound_fieldoffset$MH,"nc_inq_compound_fieldoffset");
    }
    public static int nc_inq_compound_fieldoffset ( int ncid,  int xtype,  int fieldid,  Addressable offsetp) {
        var mh$ = nc_inq_compound_fieldoffset$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, offsetp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldtype$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nc_inq_compound_fieldtype$MH,"nc_inq_compound_fieldtype");
    }
    public static int nc_inq_compound_fieldtype ( int ncid,  int xtype,  int fieldid,  Addressable field_typeidp) {
        var mh$ = nc_inq_compound_fieldtype$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, field_typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fieldndims$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nc_inq_compound_fieldndims$MH,"nc_inq_compound_fieldndims");
    }
    public static int nc_inq_compound_fieldndims ( int ncid,  int xtype,  int fieldid,  Addressable ndimsp) {
        var mh$ = nc_inq_compound_fieldndims$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, ndimsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_compound_fielddim_sizes$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nc_inq_compound_fielddim_sizes$MH,"nc_inq_compound_fielddim_sizes");
    }
    public static int nc_inq_compound_fielddim_sizes ( int ncid,  int xtype,  int fieldid,  Addressable dim_sizes) {
        var mh$ = nc_inq_compound_fielddim_sizes$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, fieldid, dim_sizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_vlen$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nc_def_vlen$MH,"nc_def_vlen");
    }
    public static int nc_def_vlen ( int ncid,  Addressable name,  int base_typeid,  Addressable xtypep) {
        var mh$ = nc_def_vlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, base_typeid, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_vlen$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nc_inq_vlen$MH,"nc_inq_vlen");
    }
    public static int nc_inq_vlen ( int ncid,  int xtype,  Addressable name,  Addressable datum_sizep,  Addressable base_nc_typep) {
        var mh$ = nc_inq_vlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, datum_sizep, base_nc_typep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_free_vlen$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nc_free_vlen$MH,"nc_free_vlen");
    }
    public static int nc_free_vlen ( Addressable vl) {
        var mh$ = nc_free_vlen$MH();
        try {
            return (int)mh$.invokeExact(vl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_free_vlens$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nc_free_vlens$MH,"nc_free_vlens");
    }
    public static int nc_free_vlens ( long len,  Addressable vlens) {
        var mh$ = nc_free_vlens$MH();
        try {
            return (int)mh$.invokeExact(len, vlens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vlen_element$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nc_put_vlen_element$MH,"nc_put_vlen_element");
    }
    public static int nc_put_vlen_element ( int ncid,  int typeid1,  Addressable vlen_element,  long len,  Addressable data) {
        var mh$ = nc_put_vlen_element$MH();
        try {
            return (int)mh$.invokeExact(ncid, typeid1, vlen_element, len, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vlen_element$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nc_get_vlen_element$MH,"nc_get_vlen_element");
    }
    public static int nc_get_vlen_element ( int ncid,  int typeid1,  Addressable vlen_element,  Addressable len,  Addressable data) {
        var mh$ = nc_get_vlen_element$MH();
        try {
            return (int)mh$.invokeExact(ncid, typeid1, vlen_element, len, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_free_string$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nc_free_string$MH,"nc_free_string");
    }
    public static int nc_free_string ( long len,  Addressable data) {
        var mh$ = nc_free_string$MH();
        try {
            return (int)mh$.invokeExact(len, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_user_type$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nc_inq_user_type$MH,"nc_inq_user_type");
    }
    public static int nc_inq_user_type ( int ncid,  int xtype,  Addressable name,  Addressable size,  Addressable base_nc_typep,  Addressable nfieldsp,  Addressable classp) {
        var mh$ = nc_inq_user_type$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, size, base_nc_typep, nfieldsp, classp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nc_put_att$MH,"nc_put_att");
    }
    public static int nc_put_att ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nc_get_att$MH,"nc_get_att");
    }
    public static int nc_get_att ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nc_def_enum$MH,"nc_def_enum");
    }
    public static int nc_def_enum ( int ncid,  int base_typeid,  Addressable name,  Addressable typeidp) {
        var mh$ = nc_def_enum$MH();
        try {
            return (int)mh$.invokeExact(ncid, base_typeid, name, typeidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_insert_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nc_insert_enum$MH,"nc_insert_enum");
    }
    public static int nc_insert_enum ( int ncid,  int xtype,  Addressable name,  Addressable value) {
        var mh$ = nc_insert_enum$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$9.nc_inq_enum$MH,"nc_inq_enum");
    }
    public static int nc_inq_enum ( int ncid,  int xtype,  Addressable name,  Addressable base_nc_typep,  Addressable base_sizep,  Addressable num_membersp) {
        var mh$ = nc_inq_enum$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, base_nc_typep, base_sizep, num_membersp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_enum_member$MH() {
        return RuntimeHelper.requireNonNull(constants$9.nc_inq_enum_member$MH,"nc_inq_enum_member");
    }
    public static int nc_inq_enum_member ( int ncid,  int xtype,  int idx,  Addressable name,  Addressable value) {
        var mh$ = nc_inq_enum_member$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, idx, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_enum_ident$MH() {
        return RuntimeHelper.requireNonNull(constants$9.nc_inq_enum_ident$MH,"nc_inq_enum_ident");
    }
    public static int nc_inq_enum_ident ( int ncid,  int xtype,  long value,  Addressable identifier) {
        var mh$ = nc_inq_enum_ident$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, value, identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$9.nc_def_opaque$MH,"nc_def_opaque");
    }
    public static int nc_def_opaque ( int ncid,  long size,  Addressable name,  Addressable xtypep) {
        var mh$ = nc_def_opaque$MH();
        try {
            return (int)mh$.invokeExact(ncid, size, name, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$9.nc_inq_opaque$MH,"nc_inq_opaque");
    }
    public static int nc_inq_opaque ( int ncid,  int xtype,  Addressable name,  Addressable sizep) {
        var mh$ = nc_inq_opaque$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtype, name, sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var$MH() {
        return RuntimeHelper.requireNonNull(constants$9.nc_put_var$MH,"nc_put_var");
    }
    public static int nc_put_var ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nc_get_var$MH,"nc_get_var");
    }
    public static int nc_get_var ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nc_put_var1$MH,"nc_put_var1");
    }
    public static int nc_put_var1 ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nc_get_var1$MH,"nc_get_var1");
    }
    public static int nc_get_var1 ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nc_put_vara$MH,"nc_put_vara");
    }
    public static int nc_put_vara ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nc_get_vara$MH,"nc_get_vara");
    }
    public static int nc_get_vara ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nc_put_vars$MH,"nc_put_vars");
    }
    public static int nc_put_vars ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars$MH() {
        return RuntimeHelper.requireNonNull(constants$11.nc_get_vars$MH,"nc_get_vars");
    }
    public static int nc_get_vars ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm$MH() {
        return RuntimeHelper.requireNonNull(constants$11.nc_put_varm$MH,"nc_put_varm");
    }
    public static int nc_put_varm ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm$MH() {
        return RuntimeHelper.requireNonNull(constants$11.nc_get_varm$MH,"nc_get_varm");
    }
    public static int nc_get_varm ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_quantize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.nc_def_var_quantize$MH,"nc_def_var_quantize");
    }
    public static int nc_def_var_quantize ( int ncid,  int varid,  int quantize_mode,  int nsd) {
        var mh$ = nc_def_var_quantize$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, quantize_mode, nsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_quantize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.nc_inq_var_quantize$MH,"nc_inq_var_quantize");
    }
    public static int nc_inq_var_quantize ( int ncid,  int varid,  Addressable quantize_modep,  Addressable nsdp) {
        var mh$ = nc_inq_var_quantize$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, quantize_modep, nsdp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_deflate$MH() {
        return RuntimeHelper.requireNonNull(constants$11.nc_def_var_deflate$MH,"nc_def_var_deflate");
    }
    public static int nc_def_var_deflate ( int ncid,  int varid,  int shuffle,  int deflate,  int deflate_level) {
        var mh$ = nc_def_var_deflate$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, shuffle, deflate, deflate_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_deflate$MH() {
        return RuntimeHelper.requireNonNull(constants$12.nc_inq_var_deflate$MH,"nc_inq_var_deflate");
    }
    public static int nc_inq_var_deflate ( int ncid,  int varid,  Addressable shufflep,  Addressable deflatep,  Addressable deflate_levelp) {
        var mh$ = nc_inq_var_deflate$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, shufflep, deflatep, deflate_levelp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_szip$MH() {
        return RuntimeHelper.requireNonNull(constants$12.nc_def_var_szip$MH,"nc_def_var_szip");
    }
    public static int nc_def_var_szip ( int ncid,  int varid,  int options_mask,  int pixels_per_block) {
        var mh$ = nc_def_var_szip$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, options_mask, pixels_per_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_szip$MH() {
        return RuntimeHelper.requireNonNull(constants$12.nc_inq_var_szip$MH,"nc_inq_var_szip");
    }
    public static int nc_inq_var_szip ( int ncid,  int varid,  Addressable options_maskp,  Addressable pixels_per_blockp) {
        var mh$ = nc_inq_var_szip$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, options_maskp, pixels_per_blockp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_fletcher32$MH() {
        return RuntimeHelper.requireNonNull(constants$12.nc_def_var_fletcher32$MH,"nc_def_var_fletcher32");
    }
    public static int nc_def_var_fletcher32 ( int ncid,  int varid,  int fletcher32) {
        var mh$ = nc_def_var_fletcher32$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, fletcher32);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_fletcher32$MH() {
        return RuntimeHelper.requireNonNull(constants$12.nc_inq_var_fletcher32$MH,"nc_inq_var_fletcher32");
    }
    public static int nc_inq_var_fletcher32 ( int ncid,  int varid,  Addressable fletcher32p) {
        var mh$ = nc_inq_var_fletcher32$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, fletcher32p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_chunking$MH() {
        return RuntimeHelper.requireNonNull(constants$12.nc_def_var_chunking$MH,"nc_def_var_chunking");
    }
    public static int nc_def_var_chunking ( int ncid,  int varid,  int storage,  Addressable chunksizesp) {
        var mh$ = nc_def_var_chunking$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, storage, chunksizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_chunking$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nc_inq_var_chunking$MH,"nc_inq_var_chunking");
    }
    public static int nc_inq_var_chunking ( int ncid,  int varid,  Addressable storagep,  Addressable chunksizesp) {
        var mh$ = nc_inq_var_chunking$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, storagep, chunksizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_fill$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nc_def_var_fill$MH,"nc_def_var_fill");
    }
    public static int nc_def_var_fill ( int ncid,  int varid,  int no_fill,  Addressable fill_value) {
        var mh$ = nc_def_var_fill$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, no_fill, fill_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_fill$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nc_inq_var_fill$MH,"nc_inq_var_fill");
    }
    public static int nc_inq_var_fill ( int ncid,  int varid,  Addressable no_fill,  Addressable fill_valuep) {
        var mh$ = nc_inq_var_fill$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, no_fill, fill_valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_endian$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nc_def_var_endian$MH,"nc_def_var_endian");
    }
    public static int nc_def_var_endian ( int ncid,  int varid,  int endian) {
        var mh$ = nc_def_var_endian$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, endian);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_endian$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nc_inq_var_endian$MH,"nc_inq_var_endian");
    }
    public static int nc_inq_var_endian ( int ncid,  int varid,  Addressable endianp) {
        var mh$ = nc_inq_var_endian$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, endianp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var_filter$MH() {
        return RuntimeHelper.requireNonNull(constants$13.nc_def_var_filter$MH,"nc_def_var_filter");
    }
    public static int nc_def_var_filter ( int ncid,  int varid,  int id,  long nparams,  Addressable parms) {
        var mh$ = nc_def_var_filter$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, id, nparams, parms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var_filter$MH() {
        return RuntimeHelper.requireNonNull(constants$14.nc_inq_var_filter$MH,"nc_inq_var_filter");
    }
    public static int nc_inq_var_filter ( int ncid,  int varid,  Addressable idp,  Addressable nparams,  Addressable params) {
        var mh$ = nc_inq_var_filter$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, idp, nparams, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_fill$MH() {
        return RuntimeHelper.requireNonNull(constants$14.nc_set_fill$MH,"nc_set_fill");
    }
    public static int nc_set_fill ( int ncid,  int fillmode,  Addressable old_modep) {
        var mh$ = nc_set_fill$MH();
        try {
            return (int)mh$.invokeExact(ncid, fillmode, old_modep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_default_format$MH() {
        return RuntimeHelper.requireNonNull(constants$14.nc_set_default_format$MH,"nc_set_default_format");
    }
    public static int nc_set_default_format ( int format,  Addressable old_formatp) {
        var mh$ = nc_set_default_format$MH();
        try {
            return (int)mh$.invokeExact(format, old_formatp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$14.nc_set_chunk_cache$MH,"nc_set_chunk_cache");
    }
    public static int nc_set_chunk_cache ( long size,  long nelems,  float preemption) {
        var mh$ = nc_set_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(size, nelems, preemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$14.nc_get_chunk_cache$MH,"nc_get_chunk_cache");
    }
    public static int nc_get_chunk_cache ( Addressable sizep,  Addressable nelemsp,  Addressable preemptionp) {
        var mh$ = nc_get_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(sizep, nelemsp, preemptionp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_var_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$14.nc_set_var_chunk_cache$MH,"nc_set_var_chunk_cache");
    }
    public static int nc_set_var_chunk_cache ( int ncid,  int varid,  long size,  long nelems,  float preemption) {
        var mh$ = nc_set_var_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, size, nelems, preemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_chunk_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$15.nc_get_var_chunk_cache$MH,"nc_get_var_chunk_cache");
    }
    public static int nc_get_var_chunk_cache ( int ncid,  int varid,  Addressable sizep,  Addressable nelemsp,  Addressable preemptionp) {
        var mh$ = nc_get_var_chunk_cache$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, sizep, nelemsp, preemptionp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_redef$MH() {
        return RuntimeHelper.requireNonNull(constants$15.nc_redef$MH,"nc_redef");
    }
    public static int nc_redef ( int ncid) {
        var mh$ = nc_redef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__enddef$MH() {
        return RuntimeHelper.requireNonNull(constants$15.nc__enddef$MH,"nc__enddef");
    }
    public static int nc__enddef ( int ncid,  long h_minfree,  long v_align,  long v_minfree,  long r_align) {
        var mh$ = nc__enddef$MH();
        try {
            return (int)mh$.invokeExact(ncid, h_minfree, v_align, v_minfree, r_align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_enddef$MH() {
        return RuntimeHelper.requireNonNull(constants$15.nc_enddef$MH,"nc_enddef");
    }
    public static int nc_enddef ( int ncid) {
        var mh$ = nc_enddef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$15.nc_sync$MH,"nc_sync");
    }
    public static int nc_sync ( int ncid) {
        var mh$ = nc_sync$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_abort$MH() {
        return RuntimeHelper.requireNonNull(constants$15.nc_abort$MH,"nc_abort");
    }
    public static int nc_abort ( int ncid) {
        var mh$ = nc_abort$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_close$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nc_close$MH,"nc_close");
    }
    public static int nc_close ( int ncid) {
        var mh$ = nc_close$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nc_inq$MH,"nc_inq");
    }
    public static int nc_inq ( int ncid,  Addressable ndimsp,  Addressable nvarsp,  Addressable nattsp,  Addressable unlimdimidp) {
        var mh$ = nc_inq$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndimsp, nvarsp, nattsp, unlimdimidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_ndims$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nc_inq_ndims$MH,"nc_inq_ndims");
    }
    public static int nc_inq_ndims ( int ncid,  Addressable ndimsp) {
        var mh$ = nc_inq_ndims$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndimsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_nvars$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nc_inq_nvars$MH,"nc_inq_nvars");
    }
    public static int nc_inq_nvars ( int ncid,  Addressable nvarsp) {
        var mh$ = nc_inq_nvars$MH();
        try {
            return (int)mh$.invokeExact(ncid, nvarsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_natts$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nc_inq_natts$MH,"nc_inq_natts");
    }
    public static int nc_inq_natts ( int ncid,  Addressable nattsp) {
        var mh$ = nc_inq_natts$MH();
        try {
            return (int)mh$.invokeExact(ncid, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_unlimdim$MH() {
        return RuntimeHelper.requireNonNull(constants$16.nc_inq_unlimdim$MH,"nc_inq_unlimdim");
    }
    public static int nc_inq_unlimdim ( int ncid,  Addressable unlimdimidp) {
        var mh$ = nc_inq_unlimdim$MH();
        try {
            return (int)mh$.invokeExact(ncid, unlimdimidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_unlimdims$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nc_inq_unlimdims$MH,"nc_inq_unlimdims");
    }
    public static int nc_inq_unlimdims ( int ncid,  Addressable nunlimdimsp,  Addressable unlimdimidsp) {
        var mh$ = nc_inq_unlimdims$MH();
        try {
            return (int)mh$.invokeExact(ncid, nunlimdimsp, unlimdimidsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_format$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nc_inq_format$MH,"nc_inq_format");
    }
    public static int nc_inq_format ( int ncid,  Addressable formatp) {
        var mh$ = nc_inq_format$MH();
        try {
            return (int)mh$.invokeExact(ncid, formatp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_format_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nc_inq_format_extended$MH,"nc_inq_format_extended");
    }
    public static int nc_inq_format_extended ( int ncid,  Addressable formatp,  Addressable modep) {
        var mh$ = nc_inq_format_extended$MH();
        try {
            return (int)mh$.invokeExact(ncid, formatp, modep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nc_def_dim$MH,"nc_def_dim");
    }
    public static int nc_def_dim ( int ncid,  Addressable name,  long len,  Addressable idp) {
        var mh$ = nc_def_dim$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, len, idp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimid$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nc_inq_dimid$MH,"nc_inq_dimid");
    }
    public static int nc_inq_dimid ( int ncid,  Addressable name,  Addressable idp) {
        var mh$ = nc_inq_dimid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, idp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nc_inq_dim$MH,"nc_inq_dim");
    }
    public static int nc_inq_dim ( int ncid,  int dimid,  Addressable name,  Addressable lenp) {
        var mh$ = nc_inq_dim$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimname$MH() {
        return RuntimeHelper.requireNonNull(constants$18.nc_inq_dimname$MH,"nc_inq_dimname");
    }
    public static int nc_inq_dimname ( int ncid,  int dimid,  Addressable name) {
        var mh$ = nc_inq_dimname$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_dimlen$MH() {
        return RuntimeHelper.requireNonNull(constants$18.nc_inq_dimlen$MH,"nc_inq_dimlen");
    }
    public static int nc_inq_dimlen ( int ncid,  int dimid,  Addressable lenp) {
        var mh$ = nc_inq_dimlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_dim$MH() {
        return RuntimeHelper.requireNonNull(constants$18.nc_rename_dim$MH,"nc_rename_dim");
    }
    public static int nc_rename_dim ( int ncid,  int dimid,  Addressable name) {
        var mh$ = nc_rename_dim$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_att$MH() {
        return RuntimeHelper.requireNonNull(constants$18.nc_inq_att$MH,"nc_inq_att");
    }
    public static int nc_inq_att ( int ncid,  int varid,  Addressable name,  Addressable xtypep,  Addressable lenp) {
        var mh$ = nc_inq_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_attid$MH() {
        return RuntimeHelper.requireNonNull(constants$18.nc_inq_attid$MH,"nc_inq_attid");
    }
    public static int nc_inq_attid ( int ncid,  int varid,  Addressable name,  Addressable idp) {
        var mh$ = nc_inq_attid$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, idp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_atttype$MH() {
        return RuntimeHelper.requireNonNull(constants$18.nc_inq_atttype$MH,"nc_inq_atttype");
    }
    public static int nc_inq_atttype ( int ncid,  int varid,  Addressable name,  Addressable xtypep) {
        var mh$ = nc_inq_atttype$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_attlen$MH() {
        return RuntimeHelper.requireNonNull(constants$19.nc_inq_attlen$MH,"nc_inq_attlen");
    }
    public static int nc_inq_attlen ( int ncid,  int varid,  Addressable name,  Addressable lenp) {
        var mh$ = nc_inq_attlen$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_attname$MH() {
        return RuntimeHelper.requireNonNull(constants$19.nc_inq_attname$MH,"nc_inq_attname");
    }
    public static int nc_inq_attname ( int ncid,  int varid,  int attnum,  Addressable name) {
        var mh$ = nc_inq_attname$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, attnum, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_att$MH() {
        return RuntimeHelper.requireNonNull(constants$19.nc_copy_att$MH,"nc_copy_att");
    }
    public static int nc_copy_att ( int ncid_in,  int varid_in,  Addressable name,  int ncid_out,  int varid_out) {
        var mh$ = nc_copy_att$MH();
        try {
            return (int)mh$.invokeExact(ncid_in, varid_in, name, ncid_out, varid_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_att$MH() {
        return RuntimeHelper.requireNonNull(constants$19.nc_rename_att$MH,"nc_rename_att");
    }
    public static int nc_rename_att ( int ncid,  int varid,  Addressable name,  Addressable newname) {
        var mh$ = nc_rename_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, newname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_del_att$MH() {
        return RuntimeHelper.requireNonNull(constants$19.nc_del_att$MH,"nc_del_att");
    }
    public static int nc_del_att ( int ncid,  int varid,  Addressable name) {
        var mh$ = nc_del_att$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_text$MH() {
        return RuntimeHelper.requireNonNull(constants$19.nc_put_att_text$MH,"nc_put_att_text");
    }
    public static int nc_put_att_text ( int ncid,  int varid,  Addressable name,  long len,  Addressable op) {
        var mh$ = nc_put_att_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_text$MH() {
        return RuntimeHelper.requireNonNull(constants$20.nc_get_att_text$MH,"nc_get_att_text");
    }
    public static int nc_get_att_text ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_string$MH() {
        return RuntimeHelper.requireNonNull(constants$20.nc_put_att_string$MH,"nc_put_att_string");
    }
    public static int nc_put_att_string ( int ncid,  int varid,  Addressable name,  long len,  Addressable op) {
        var mh$ = nc_put_att_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_string$MH() {
        return RuntimeHelper.requireNonNull(constants$20.nc_get_att_string$MH,"nc_get_att_string");
    }
    public static int nc_get_att_string ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$20.nc_put_att_uchar$MH,"nc_put_att_uchar");
    }
    public static int nc_put_att_uchar ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$20.nc_get_att_uchar$MH,"nc_get_att_uchar");
    }
    public static int nc_get_att_uchar ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$20.nc_put_att_schar$MH,"nc_put_att_schar");
    }
    public static int nc_put_att_schar ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nc_get_att_schar$MH,"nc_get_att_schar");
    }
    public static int nc_get_att_schar ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_short$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nc_put_att_short$MH,"nc_put_att_short");
    }
    public static int nc_put_att_short ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_short$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nc_get_att_short$MH,"nc_get_att_short");
    }
    public static int nc_get_att_short ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_int$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nc_put_att_int$MH,"nc_put_att_int");
    }
    public static int nc_put_att_int ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_int$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nc_get_att_int$MH,"nc_get_att_int");
    }
    public static int nc_get_att_int ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_long$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nc_put_att_long$MH,"nc_put_att_long");
    }
    public static int nc_put_att_long ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_long$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nc_get_att_long$MH,"nc_get_att_long");
    }
    public static int nc_get_att_long ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_float$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nc_put_att_float$MH,"nc_put_att_float");
    }
    public static int nc_put_att_float ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_float$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nc_get_att_float$MH,"nc_get_att_float");
    }
    public static int nc_get_att_float ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_double$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nc_put_att_double$MH,"nc_put_att_double");
    }
    public static int nc_put_att_double ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_double$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nc_get_att_double$MH,"nc_get_att_double");
    }
    public static int nc_get_att_double ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nc_put_att_ushort$MH,"nc_put_att_ushort");
    }
    public static int nc_put_att_ushort ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nc_get_att_ushort$MH,"nc_get_att_ushort");
    }
    public static int nc_get_att_ushort ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nc_put_att_uint$MH,"nc_put_att_uint");
    }
    public static int nc_put_att_uint ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nc_get_att_uint$MH,"nc_get_att_uint");
    }
    public static int nc_get_att_uint ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nc_put_att_longlong$MH,"nc_put_att_longlong");
    }
    public static int nc_put_att_longlong ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nc_get_att_longlong$MH,"nc_get_att_longlong");
    }
    public static int nc_get_att_longlong ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nc_put_att_ulonglong$MH,"nc_put_att_ulonglong");
    }
    public static int nc_put_att_ulonglong ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nc_get_att_ulonglong$MH,"nc_get_att_ulonglong");
    }
    public static int nc_get_att_ulonglong ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_def_var$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nc_def_var$MH,"nc_def_var");
    }
    public static int nc_def_var ( int ncid,  Addressable name,  int xtype,  int ndims,  Addressable dimidsp,  Addressable varidp) {
        var mh$ = nc_def_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, xtype, ndims, dimidsp, varidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_var$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nc_inq_var$MH,"nc_inq_var");
    }
    public static int nc_inq_var ( int ncid,  int varid,  Addressable name,  Addressable xtypep,  Addressable ndimsp,  Addressable dimidsp,  Addressable nattsp) {
        var mh$ = nc_inq_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, ndimsp, dimidsp, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varid$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nc_inq_varid$MH,"nc_inq_varid");
    }
    public static int nc_inq_varid ( int ncid,  Addressable name,  Addressable varidp) {
        var mh$ = nc_inq_varid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, varidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varname$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nc_inq_varname$MH,"nc_inq_varname");
    }
    public static int nc_inq_varname ( int ncid,  int varid,  Addressable name) {
        var mh$ = nc_inq_varname$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_vartype$MH() {
        return RuntimeHelper.requireNonNull(constants$24.nc_inq_vartype$MH,"nc_inq_vartype");
    }
    public static int nc_inq_vartype ( int ncid,  int varid,  Addressable xtypep) {
        var mh$ = nc_inq_vartype$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, xtypep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varndims$MH() {
        return RuntimeHelper.requireNonNull(constants$25.nc_inq_varndims$MH,"nc_inq_varndims");
    }
    public static int nc_inq_varndims ( int ncid,  int varid,  Addressable ndimsp) {
        var mh$ = nc_inq_varndims$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ndimsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_vardimid$MH() {
        return RuntimeHelper.requireNonNull(constants$25.nc_inq_vardimid$MH,"nc_inq_vardimid");
    }
    public static int nc_inq_vardimid ( int ncid,  int varid,  Addressable dimidsp) {
        var mh$ = nc_inq_vardimid$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, dimidsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_varnatts$MH() {
        return RuntimeHelper.requireNonNull(constants$25.nc_inq_varnatts$MH,"nc_inq_varnatts");
    }
    public static int nc_inq_varnatts ( int ncid,  int varid,  Addressable nattsp) {
        var mh$ = nc_inq_varnatts$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rename_var$MH() {
        return RuntimeHelper.requireNonNull(constants$25.nc_rename_var$MH,"nc_rename_var");
    }
    public static int nc_rename_var ( int ncid,  int varid,  Addressable name) {
        var mh$ = nc_rename_var$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_var$MH() {
        return RuntimeHelper.requireNonNull(constants$25.nc_copy_var$MH,"nc_copy_var");
    }
    public static int nc_copy_var ( int ncid_in,  int varid,  int ncid_out) {
        var mh$ = nc_copy_var$MH();
        try {
            return (int)mh$.invokeExact(ncid_in, varid, ncid_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_text$MH() {
        return RuntimeHelper.requireNonNull(constants$25.nc_put_var1_text$MH,"nc_put_var1_text");
    }
    public static int nc_put_var1_text ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_text$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nc_get_var1_text$MH,"nc_get_var1_text");
    }
    public static int nc_get_var1_text ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nc_put_var1_uchar$MH,"nc_put_var1_uchar");
    }
    public static int nc_put_var1_uchar ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nc_get_var1_uchar$MH,"nc_get_var1_uchar");
    }
    public static int nc_get_var1_uchar ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nc_put_var1_schar$MH,"nc_put_var1_schar");
    }
    public static int nc_put_var1_schar ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nc_get_var1_schar$MH,"nc_get_var1_schar");
    }
    public static int nc_get_var1_schar ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_short$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nc_put_var1_short$MH,"nc_put_var1_short");
    }
    public static int nc_put_var1_short ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_short$MH() {
        return RuntimeHelper.requireNonNull(constants$27.nc_get_var1_short$MH,"nc_get_var1_short");
    }
    public static int nc_get_var1_short ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_int$MH() {
        return RuntimeHelper.requireNonNull(constants$27.nc_put_var1_int$MH,"nc_put_var1_int");
    }
    public static int nc_put_var1_int ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_int$MH() {
        return RuntimeHelper.requireNonNull(constants$27.nc_get_var1_int$MH,"nc_get_var1_int");
    }
    public static int nc_get_var1_int ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_long$MH() {
        return RuntimeHelper.requireNonNull(constants$27.nc_put_var1_long$MH,"nc_put_var1_long");
    }
    public static int nc_put_var1_long ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_long$MH() {
        return RuntimeHelper.requireNonNull(constants$27.nc_get_var1_long$MH,"nc_get_var1_long");
    }
    public static int nc_get_var1_long ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_float$MH() {
        return RuntimeHelper.requireNonNull(constants$27.nc_put_var1_float$MH,"nc_put_var1_float");
    }
    public static int nc_put_var1_float ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_float$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nc_get_var1_float$MH,"nc_get_var1_float");
    }
    public static int nc_get_var1_float ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_double$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nc_put_var1_double$MH,"nc_put_var1_double");
    }
    public static int nc_put_var1_double ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_double$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nc_get_var1_double$MH,"nc_get_var1_double");
    }
    public static int nc_get_var1_double ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nc_put_var1_ushort$MH,"nc_put_var1_ushort");
    }
    public static int nc_put_var1_ushort ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nc_get_var1_ushort$MH,"nc_get_var1_ushort");
    }
    public static int nc_get_var1_ushort ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$28.nc_put_var1_uint$MH,"nc_put_var1_uint");
    }
    public static int nc_put_var1_uint ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nc_get_var1_uint$MH,"nc_get_var1_uint");
    }
    public static int nc_get_var1_uint ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nc_put_var1_longlong$MH,"nc_put_var1_longlong");
    }
    public static int nc_put_var1_longlong ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nc_get_var1_longlong$MH,"nc_get_var1_longlong");
    }
    public static int nc_get_var1_longlong ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nc_put_var1_ulonglong$MH,"nc_put_var1_ulonglong");
    }
    public static int nc_put_var1_ulonglong ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nc_get_var1_ulonglong$MH,"nc_get_var1_ulonglong");
    }
    public static int nc_get_var1_ulonglong ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_string$MH() {
        return RuntimeHelper.requireNonNull(constants$29.nc_put_var1_string$MH,"nc_put_var1_string");
    }
    public static int nc_put_var1_string ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_string$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nc_get_var1_string$MH,"nc_get_var1_string");
    }
    public static int nc_get_var1_string ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_text$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nc_put_vara_text$MH,"nc_put_vara_text");
    }
    public static int nc_put_vara_text ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_text$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nc_get_vara_text$MH,"nc_get_vara_text");
    }
    public static int nc_get_vara_text ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nc_put_vara_uchar$MH,"nc_put_vara_uchar");
    }
    public static int nc_put_vara_uchar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nc_get_vara_uchar$MH,"nc_get_vara_uchar");
    }
    public static int nc_get_vara_uchar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nc_put_vara_schar$MH,"nc_put_vara_schar");
    }
    public static int nc_put_vara_schar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$31.nc_get_vara_schar$MH,"nc_get_vara_schar");
    }
    public static int nc_get_vara_schar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_short$MH() {
        return RuntimeHelper.requireNonNull(constants$31.nc_put_vara_short$MH,"nc_put_vara_short");
    }
    public static int nc_put_vara_short ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_short$MH() {
        return RuntimeHelper.requireNonNull(constants$31.nc_get_vara_short$MH,"nc_get_vara_short");
    }
    public static int nc_get_vara_short ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_int$MH() {
        return RuntimeHelper.requireNonNull(constants$31.nc_put_vara_int$MH,"nc_put_vara_int");
    }
    public static int nc_put_vara_int ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_int$MH() {
        return RuntimeHelper.requireNonNull(constants$31.nc_get_vara_int$MH,"nc_get_vara_int");
    }
    public static int nc_get_vara_int ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_long$MH() {
        return RuntimeHelper.requireNonNull(constants$31.nc_put_vara_long$MH,"nc_put_vara_long");
    }
    public static int nc_put_vara_long ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_long$MH() {
        return RuntimeHelper.requireNonNull(constants$32.nc_get_vara_long$MH,"nc_get_vara_long");
    }
    public static int nc_get_vara_long ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_float$MH() {
        return RuntimeHelper.requireNonNull(constants$32.nc_put_vara_float$MH,"nc_put_vara_float");
    }
    public static int nc_put_vara_float ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_float$MH() {
        return RuntimeHelper.requireNonNull(constants$32.nc_get_vara_float$MH,"nc_get_vara_float");
    }
    public static int nc_get_vara_float ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_double$MH() {
        return RuntimeHelper.requireNonNull(constants$32.nc_put_vara_double$MH,"nc_put_vara_double");
    }
    public static int nc_put_vara_double ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_double$MH() {
        return RuntimeHelper.requireNonNull(constants$32.nc_get_vara_double$MH,"nc_get_vara_double");
    }
    public static int nc_get_vara_double ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$32.nc_put_vara_ushort$MH,"nc_put_vara_ushort");
    }
    public static int nc_put_vara_ushort ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$33.nc_get_vara_ushort$MH,"nc_get_vara_ushort");
    }
    public static int nc_get_vara_ushort ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$33.nc_put_vara_uint$MH,"nc_put_vara_uint");
    }
    public static int nc_put_vara_uint ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$33.nc_get_vara_uint$MH,"nc_get_vara_uint");
    }
    public static int nc_get_vara_uint ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$33.nc_put_vara_longlong$MH,"nc_put_vara_longlong");
    }
    public static int nc_put_vara_longlong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$33.nc_get_vara_longlong$MH,"nc_get_vara_longlong");
    }
    public static int nc_get_vara_longlong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$33.nc_put_vara_ulonglong$MH,"nc_put_vara_ulonglong");
    }
    public static int nc_put_vara_ulonglong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$34.nc_get_vara_ulonglong$MH,"nc_get_vara_ulonglong");
    }
    public static int nc_get_vara_ulonglong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_string$MH() {
        return RuntimeHelper.requireNonNull(constants$34.nc_put_vara_string$MH,"nc_put_vara_string");
    }
    public static int nc_put_vara_string ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_string$MH() {
        return RuntimeHelper.requireNonNull(constants$34.nc_get_vara_string$MH,"nc_get_vara_string");
    }
    public static int nc_get_vara_string ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_text$MH() {
        return RuntimeHelper.requireNonNull(constants$34.nc_put_vars_text$MH,"nc_put_vars_text");
    }
    public static int nc_put_vars_text ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_text$MH() {
        return RuntimeHelper.requireNonNull(constants$34.nc_get_vars_text$MH,"nc_get_vars_text");
    }
    public static int nc_get_vars_text ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$34.nc_put_vars_uchar$MH,"nc_put_vars_uchar");
    }
    public static int nc_put_vars_uchar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nc_get_vars_uchar$MH,"nc_get_vars_uchar");
    }
    public static int nc_get_vars_uchar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nc_put_vars_schar$MH,"nc_put_vars_schar");
    }
    public static int nc_put_vars_schar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nc_get_vars_schar$MH,"nc_get_vars_schar");
    }
    public static int nc_get_vars_schar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_short$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nc_put_vars_short$MH,"nc_put_vars_short");
    }
    public static int nc_put_vars_short ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_short$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nc_get_vars_short$MH,"nc_get_vars_short");
    }
    public static int nc_get_vars_short ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_int$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nc_put_vars_int$MH,"nc_put_vars_int");
    }
    public static int nc_put_vars_int ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_int$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nc_get_vars_int$MH,"nc_get_vars_int");
    }
    public static int nc_get_vars_int ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_long$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nc_put_vars_long$MH,"nc_put_vars_long");
    }
    public static int nc_put_vars_long ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_long$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nc_get_vars_long$MH,"nc_get_vars_long");
    }
    public static int nc_get_vars_long ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_float$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nc_put_vars_float$MH,"nc_put_vars_float");
    }
    public static int nc_put_vars_float ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_float$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nc_get_vars_float$MH,"nc_get_vars_float");
    }
    public static int nc_get_vars_float ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_double$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nc_put_vars_double$MH,"nc_put_vars_double");
    }
    public static int nc_put_vars_double ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_double$MH() {
        return RuntimeHelper.requireNonNull(constants$37.nc_get_vars_double$MH,"nc_get_vars_double");
    }
    public static int nc_get_vars_double ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$37.nc_put_vars_ushort$MH,"nc_put_vars_ushort");
    }
    public static int nc_put_vars_ushort ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$37.nc_get_vars_ushort$MH,"nc_get_vars_ushort");
    }
    public static int nc_get_vars_ushort ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$37.nc_put_vars_uint$MH,"nc_put_vars_uint");
    }
    public static int nc_put_vars_uint ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$37.nc_get_vars_uint$MH,"nc_get_vars_uint");
    }
    public static int nc_get_vars_uint ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$37.nc_put_vars_longlong$MH,"nc_put_vars_longlong");
    }
    public static int nc_put_vars_longlong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$38.nc_get_vars_longlong$MH,"nc_get_vars_longlong");
    }
    public static int nc_get_vars_longlong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$38.nc_put_vars_ulonglong$MH,"nc_put_vars_ulonglong");
    }
    public static int nc_put_vars_ulonglong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$38.nc_get_vars_ulonglong$MH,"nc_get_vars_ulonglong");
    }
    public static int nc_get_vars_ulonglong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_string$MH() {
        return RuntimeHelper.requireNonNull(constants$38.nc_put_vars_string$MH,"nc_put_vars_string");
    }
    public static int nc_put_vars_string ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_string$MH() {
        return RuntimeHelper.requireNonNull(constants$38.nc_get_vars_string$MH,"nc_get_vars_string");
    }
    public static int nc_get_vars_string ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_text$MH() {
        return RuntimeHelper.requireNonNull(constants$38.nc_put_varm_text$MH,"nc_put_varm_text");
    }
    public static int nc_put_varm_text ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_text$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nc_get_varm_text$MH,"nc_get_varm_text");
    }
    public static int nc_get_varm_text ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nc_put_varm_uchar$MH,"nc_put_varm_uchar");
    }
    public static int nc_put_varm_uchar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nc_get_varm_uchar$MH,"nc_get_varm_uchar");
    }
    public static int nc_get_varm_uchar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nc_put_varm_schar$MH,"nc_put_varm_schar");
    }
    public static int nc_put_varm_schar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nc_get_varm_schar$MH,"nc_get_varm_schar");
    }
    public static int nc_get_varm_schar ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_short$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nc_put_varm_short$MH,"nc_put_varm_short");
    }
    public static int nc_put_varm_short ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_short$MH() {
        return RuntimeHelper.requireNonNull(constants$40.nc_get_varm_short$MH,"nc_get_varm_short");
    }
    public static int nc_get_varm_short ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_int$MH() {
        return RuntimeHelper.requireNonNull(constants$40.nc_put_varm_int$MH,"nc_put_varm_int");
    }
    public static int nc_put_varm_int ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_int$MH() {
        return RuntimeHelper.requireNonNull(constants$40.nc_get_varm_int$MH,"nc_get_varm_int");
    }
    public static int nc_get_varm_int ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_long$MH() {
        return RuntimeHelper.requireNonNull(constants$40.nc_put_varm_long$MH,"nc_put_varm_long");
    }
    public static int nc_put_varm_long ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_long$MH() {
        return RuntimeHelper.requireNonNull(constants$40.nc_get_varm_long$MH,"nc_get_varm_long");
    }
    public static int nc_get_varm_long ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_float$MH() {
        return RuntimeHelper.requireNonNull(constants$40.nc_put_varm_float$MH,"nc_put_varm_float");
    }
    public static int nc_put_varm_float ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_float$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nc_get_varm_float$MH,"nc_get_varm_float");
    }
    public static int nc_get_varm_float ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_double$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nc_put_varm_double$MH,"nc_put_varm_double");
    }
    public static int nc_put_varm_double ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_double$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nc_get_varm_double$MH,"nc_get_varm_double");
    }
    public static int nc_get_varm_double ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nc_put_varm_ushort$MH,"nc_put_varm_ushort");
    }
    public static int nc_put_varm_ushort ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nc_get_varm_ushort$MH,"nc_get_varm_ushort");
    }
    public static int nc_get_varm_ushort ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nc_put_varm_uint$MH,"nc_put_varm_uint");
    }
    public static int nc_put_varm_uint ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$42.nc_get_varm_uint$MH,"nc_get_varm_uint");
    }
    public static int nc_get_varm_uint ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$42.nc_put_varm_longlong$MH,"nc_put_varm_longlong");
    }
    public static int nc_put_varm_longlong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$42.nc_get_varm_longlong$MH,"nc_get_varm_longlong");
    }
    public static int nc_get_varm_longlong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$42.nc_put_varm_ulonglong$MH,"nc_put_varm_ulonglong");
    }
    public static int nc_put_varm_ulonglong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$42.nc_get_varm_ulonglong$MH,"nc_get_varm_ulonglong");
    }
    public static int nc_get_varm_ulonglong ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_string$MH() {
        return RuntimeHelper.requireNonNull(constants$42.nc_put_varm_string$MH,"nc_put_varm_string");
    }
    public static int nc_put_varm_string ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_string$MH() {
        return RuntimeHelper.requireNonNull(constants$43.nc_get_varm_string$MH,"nc_get_varm_string");
    }
    public static int nc_get_varm_string ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_text$MH() {
        return RuntimeHelper.requireNonNull(constants$43.nc_put_var_text$MH,"nc_put_var_text");
    }
    public static int nc_put_var_text ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_text$MH() {
        return RuntimeHelper.requireNonNull(constants$43.nc_get_var_text$MH,"nc_get_var_text");
    }
    public static int nc_get_var_text ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_text$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$43.nc_put_var_uchar$MH,"nc_put_var_uchar");
    }
    public static int nc_put_var_uchar ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$43.nc_get_var_uchar$MH,"nc_get_var_uchar");
    }
    public static int nc_get_var_uchar ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_uchar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$43.nc_put_var_schar$MH,"nc_put_var_schar");
    }
    public static int nc_put_var_schar ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_schar$MH() {
        return RuntimeHelper.requireNonNull(constants$44.nc_get_var_schar$MH,"nc_get_var_schar");
    }
    public static int nc_get_var_schar ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_schar$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_short$MH() {
        return RuntimeHelper.requireNonNull(constants$44.nc_put_var_short$MH,"nc_put_var_short");
    }
    public static int nc_put_var_short ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_short$MH() {
        return RuntimeHelper.requireNonNull(constants$44.nc_get_var_short$MH,"nc_get_var_short");
    }
    public static int nc_get_var_short ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_short$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_int$MH() {
        return RuntimeHelper.requireNonNull(constants$44.nc_put_var_int$MH,"nc_put_var_int");
    }
    public static int nc_put_var_int ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_int$MH() {
        return RuntimeHelper.requireNonNull(constants$44.nc_get_var_int$MH,"nc_get_var_int");
    }
    public static int nc_get_var_int ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_int$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_long$MH() {
        return RuntimeHelper.requireNonNull(constants$44.nc_put_var_long$MH,"nc_put_var_long");
    }
    public static int nc_put_var_long ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_long$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nc_get_var_long$MH,"nc_get_var_long");
    }
    public static int nc_get_var_long ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_long$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_float$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nc_put_var_float$MH,"nc_put_var_float");
    }
    public static int nc_put_var_float ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_float$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nc_get_var_float$MH,"nc_get_var_float");
    }
    public static int nc_get_var_float ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_float$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_double$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nc_put_var_double$MH,"nc_put_var_double");
    }
    public static int nc_put_var_double ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_double$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nc_get_var_double$MH,"nc_get_var_double");
    }
    public static int nc_get_var_double ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_double$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nc_put_var_ushort$MH,"nc_put_var_ushort");
    }
    public static int nc_put_var_ushort ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_ushort$MH() {
        return RuntimeHelper.requireNonNull(constants$46.nc_get_var_ushort$MH,"nc_get_var_ushort");
    }
    public static int nc_get_var_ushort ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_ushort$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$46.nc_put_var_uint$MH,"nc_put_var_uint");
    }
    public static int nc_put_var_uint ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_uint$MH() {
        return RuntimeHelper.requireNonNull(constants$46.nc_get_var_uint$MH,"nc_get_var_uint");
    }
    public static int nc_get_var_uint ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_uint$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$46.nc_put_var_longlong$MH,"nc_put_var_longlong");
    }
    public static int nc_put_var_longlong ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_longlong$MH() {
        return RuntimeHelper.requireNonNull(constants$46.nc_get_var_longlong$MH,"nc_get_var_longlong");
    }
    public static int nc_get_var_longlong ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_longlong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$46.nc_put_var_ulonglong$MH,"nc_put_var_ulonglong");
    }
    public static int nc_put_var_ulonglong ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_ulonglong$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nc_get_var_ulonglong$MH,"nc_get_var_ulonglong");
    }
    public static int nc_get_var_ulonglong ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_ulonglong$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_string$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nc_put_var_string$MH,"nc_put_var_string");
    }
    public static int nc_put_var_string ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_string$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nc_get_var_string$MH,"nc_get_var_string");
    }
    public static int nc_get_var_string ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_string$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_reclaim_data$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nc_reclaim_data$MH,"nc_reclaim_data");
    }
    public static int nc_reclaim_data ( int ncid,  int xtypeid,  Addressable memory,  long count) {
        var mh$ = nc_reclaim_data$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_reclaim_data_all$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nc_reclaim_data_all$MH,"nc_reclaim_data_all");
    }
    public static int nc_reclaim_data_all ( int ncid,  int xtypeid,  Addressable memory,  long count) {
        var mh$ = nc_reclaim_data_all$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_data$MH() {
        return RuntimeHelper.requireNonNull(constants$47.nc_copy_data$MH,"nc_copy_data");
    }
    public static int nc_copy_data ( int ncid,  int xtypeid,  Addressable memory,  long count,  Addressable copy) {
        var mh$ = nc_copy_data$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count, copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_copy_data_all$MH() {
        return RuntimeHelper.requireNonNull(constants$48.nc_copy_data_all$MH,"nc_copy_data_all");
    }
    public static int nc_copy_data_all ( int ncid,  int xtypeid,  Addressable memory,  long count,  Addressable copyp) {
        var mh$ = nc_copy_data_all$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count, copyp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_dump_data$MH() {
        return RuntimeHelper.requireNonNull(constants$48.nc_dump_data$MH,"nc_dump_data");
    }
    public static int nc_dump_data ( int ncid,  int xtypeid,  Addressable memory,  long count,  Addressable buf) {
        var mh$ = nc_dump_data$MH();
        try {
            return (int)mh$.invokeExact(ncid, xtypeid, memory, count, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_att_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$48.nc_put_att_ubyte$MH,"nc_put_att_ubyte");
    }
    public static int nc_put_att_ubyte ( int ncid,  int varid,  Addressable name,  int xtype,  long len,  Addressable op) {
        var mh$ = nc_put_att_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_att_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$48.nc_get_att_ubyte$MH,"nc_get_att_ubyte");
    }
    public static int nc_get_att_ubyte ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = nc_get_att_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var1_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$48.nc_put_var1_ubyte$MH,"nc_put_var1_ubyte");
    }
    public static int nc_put_var1_ubyte ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = nc_put_var1_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var1_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$48.nc_get_var1_ubyte$MH,"nc_get_var1_ubyte");
    }
    public static int nc_get_var1_ubyte ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = nc_get_var1_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vara_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nc_put_vara_ubyte$MH,"nc_put_vara_ubyte");
    }
    public static int nc_put_vara_ubyte ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = nc_put_vara_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vara_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nc_get_vara_ubyte$MH,"nc_get_vara_ubyte");
    }
    public static int nc_get_vara_ubyte ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = nc_get_vara_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_vars_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nc_put_vars_ubyte$MH,"nc_put_vars_ubyte");
    }
    public static int nc_put_vars_ubyte ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = nc_put_vars_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_vars_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nc_get_vars_ubyte$MH,"nc_get_vars_ubyte");
    }
    public static int nc_get_vars_ubyte ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = nc_get_vars_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_varm_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nc_put_varm_ubyte$MH,"nc_put_varm_ubyte");
    }
    public static int nc_put_varm_ubyte ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = nc_put_varm_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_varm_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$49.nc_get_varm_ubyte$MH,"nc_get_varm_ubyte");
    }
    public static int nc_get_varm_ubyte ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = nc_get_varm_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_put_var_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$50.nc_put_var_ubyte$MH,"nc_put_var_ubyte");
    }
    public static int nc_put_var_ubyte ( int ncid,  int varid,  Addressable op) {
        var mh$ = nc_put_var_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_get_var_ubyte$MH() {
        return RuntimeHelper.requireNonNull(constants$50.nc_get_var_ubyte$MH,"nc_get_var_ubyte");
    }
    public static int nc_get_var_ubyte ( int ncid,  int varid,  Addressable ip) {
        var mh$ = nc_get_var_ubyte$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_log_level$MH() {
        return RuntimeHelper.requireNonNull(constants$50.nc_set_log_level$MH,"nc_set_log_level");
    }
    public static int nc_set_log_level ( int new_level) {
        var mh$ = nc_set_log_level$MH();
        try {
            return (int)mh$.invokeExact(new_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_show_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$50.nc_show_metadata$MH,"nc_show_metadata");
    }
    public static int nc_show_metadata ( int ncid) {
        var mh$ = nc_show_metadata$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$50.nc_delete$MH,"nc_delete");
    }
    public static int nc_delete ( Addressable path) {
        var mh$ = nc_delete$MH();
        try {
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__create_mp$MH() {
        return RuntimeHelper.requireNonNull(constants$50.nc__create_mp$MH,"nc__create_mp");
    }
    public static int nc__create_mp ( Addressable path,  int cmode,  long initialsz,  int basepe,  Addressable chunksizehintp,  Addressable ncidp) {
        var mh$ = nc__create_mp$MH();
        try {
            return (int)mh$.invokeExact(path, cmode, initialsz, basepe, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc__open_mp$MH() {
        return RuntimeHelper.requireNonNull(constants$51.nc__open_mp$MH,"nc__open_mp");
    }
    public static int nc__open_mp ( Addressable path,  int mode,  int basepe,  Addressable chunksizehintp,  Addressable ncidp) {
        var mh$ = nc__open_mp$MH();
        try {
            return (int)mh$.invokeExact(path, mode, basepe, chunksizehintp, ncidp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_delete_mp$MH() {
        return RuntimeHelper.requireNonNull(constants$51.nc_delete_mp$MH,"nc_delete_mp");
    }
    public static int nc_delete_mp ( Addressable path,  int basepe) {
        var mh$ = nc_delete_mp$MH();
        try {
            return (int)mh$.invokeExact(path, basepe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_set_base_pe$MH() {
        return RuntimeHelper.requireNonNull(constants$51.nc_set_base_pe$MH,"nc_set_base_pe");
    }
    public static int nc_set_base_pe ( int ncid,  int pe) {
        var mh$ = nc_set_base_pe$MH();
        try {
            return (int)mh$.invokeExact(ncid, pe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_inq_base_pe$MH() {
        return RuntimeHelper.requireNonNull(constants$51.nc_inq_base_pe$MH,"nc_inq_base_pe");
    }
    public static int nc_inq_base_pe ( int ncid,  Addressable pe) {
        var mh$ = nc_inq_base_pe$MH();
        try {
            return (int)mh$.invokeExact(ncid, pe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nctypelen$MH() {
        return RuntimeHelper.requireNonNull(constants$51.nctypelen$MH,"nctypelen");
    }
    public static int nctypelen ( int datatype) {
        var mh$ = nctypelen$MH();
        try {
            return (int)mh$.invokeExact(datatype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout ncerr$LAYOUT() {
        return constants$51.ncerr$LAYOUT;
    }
    public static VarHandle ncerr$VH() {
        return constants$51.ncerr$VH;
    }
    public static MemorySegment ncerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.ncerr$SEGMENT,"ncerr");
    }
    public static int ncerr$get() {
        return (int) constants$51.ncerr$VH.get(RuntimeHelper.requireNonNull(constants$51.ncerr$SEGMENT, "ncerr"));
    }
    public static void ncerr$set( int x) {
        constants$51.ncerr$VH.set(RuntimeHelper.requireNonNull(constants$51.ncerr$SEGMENT, "ncerr"), x);
    }
    public static MemoryLayout ncopts$LAYOUT() {
        return constants$52.ncopts$LAYOUT;
    }
    public static VarHandle ncopts$VH() {
        return constants$52.ncopts$VH;
    }
    public static MemorySegment ncopts$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.ncopts$SEGMENT,"ncopts");
    }
    public static int ncopts$get() {
        return (int) constants$52.ncopts$VH.get(RuntimeHelper.requireNonNull(constants$52.ncopts$SEGMENT, "ncopts"));
    }
    public static void ncopts$set( int x) {
        constants$52.ncopts$VH.set(RuntimeHelper.requireNonNull(constants$52.ncopts$SEGMENT, "ncopts"), x);
    }
    public static MethodHandle nc_advise$MH() {
        return RuntimeHelper.requireNonNull(constants$52.nc_advise$MH,"nc_advise");
    }
    public static void nc_advise ( Addressable cdf_routine_name,  int err,  Addressable fmt, Object... x3) {
        var mh$ = nc_advise$MH();
        try {
            mh$.invokeExact(cdf_routine_name, err, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt nclong = Constants$root.C_INT$LAYOUT;
    public static MethodHandle nccreate$MH() {
        return RuntimeHelper.requireNonNull(constants$52.nccreate$MH,"nccreate");
    }
    public static int nccreate ( Addressable path,  int cmode) {
        var mh$ = nccreate$MH();
        try {
            return (int)mh$.invokeExact(path, cmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncopen$MH() {
        return RuntimeHelper.requireNonNull(constants$52.ncopen$MH,"ncopen");
    }
    public static int ncopen ( Addressable path,  int mode) {
        var mh$ = ncopen$MH();
        try {
            return (int)mh$.invokeExact(path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncsetfill$MH() {
        return RuntimeHelper.requireNonNull(constants$52.ncsetfill$MH,"ncsetfill");
    }
    public static int ncsetfill ( int ncid,  int fillmode) {
        var mh$ = ncsetfill$MH();
        try {
            return (int)mh$.invokeExact(ncid, fillmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncredef$MH() {
        return RuntimeHelper.requireNonNull(constants$52.ncredef$MH,"ncredef");
    }
    public static int ncredef ( int ncid) {
        var mh$ = ncredef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncendef$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ncendef$MH,"ncendef");
    }
    public static int ncendef ( int ncid) {
        var mh$ = ncendef$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncsync$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ncsync$MH,"ncsync");
    }
    public static int ncsync ( int ncid) {
        var mh$ = ncsync$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncabort$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ncabort$MH,"ncabort");
    }
    public static int ncabort ( int ncid) {
        var mh$ = ncabort$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncclose$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ncclose$MH,"ncclose");
    }
    public static int ncclose ( int ncid) {
        var mh$ = ncclose$MH();
        try {
            return (int)mh$.invokeExact(ncid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ncinquire$MH,"ncinquire");
    }
    public static int ncinquire ( int ncid,  Addressable ndimsp,  Addressable nvarsp,  Addressable nattsp,  Addressable unlimdimp) {
        var mh$ = ncinquire$MH();
        try {
            return (int)mh$.invokeExact(ncid, ndimsp, nvarsp, nattsp, unlimdimp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdimdef$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ncdimdef$MH,"ncdimdef");
    }
    public static int ncdimdef ( int ncid,  Addressable name,  long len) {
        var mh$ = ncdimdef$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdimid$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ncdimid$MH,"ncdimid");
    }
    public static int ncdimid ( int ncid,  Addressable name) {
        var mh$ = ncdimid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdiminq$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ncdiminq$MH,"ncdiminq");
    }
    public static int ncdiminq ( int ncid,  int dimid,  Addressable name,  Addressable lenp) {
        var mh$ = ncdiminq$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncdimrename$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ncdimrename$MH,"ncdimrename");
    }
    public static int ncdimrename ( int ncid,  int dimid,  Addressable name) {
        var mh$ = ncdimrename$MH();
        try {
            return (int)mh$.invokeExact(ncid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattput$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ncattput$MH,"ncattput");
    }
    public static int ncattput ( int ncid,  int varid,  Addressable name,  int xtype,  int len,  Addressable op) {
        var mh$ = ncattput$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtype, len, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattinq$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ncattinq$MH,"ncattinq");
    }
    public static int ncattinq ( int ncid,  int varid,  Addressable name,  Addressable xtypep,  Addressable lenp) {
        var mh$ = ncattinq$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, lenp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattget$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ncattget$MH,"ncattget");
    }
    public static int ncattget ( int ncid,  int varid,  Addressable name,  Addressable ip) {
        var mh$ = ncattget$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ncattcopy$MH,"ncattcopy");
    }
    public static int ncattcopy ( int ncid_in,  int varid_in,  Addressable name,  int ncid_out,  int varid_out) {
        var mh$ = ncattcopy$MH();
        try {
            return (int)mh$.invokeExact(ncid_in, varid_in, name, ncid_out, varid_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattname$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ncattname$MH,"ncattname");
    }
    public static int ncattname ( int ncid,  int varid,  int attnum,  Addressable name) {
        var mh$ = ncattname$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, attnum, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattrename$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ncattrename$MH,"ncattrename");
    }
    public static int ncattrename ( int ncid,  int varid,  Addressable name,  Addressable newname) {
        var mh$ = ncattrename$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, newname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncattdel$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ncattdel$MH,"ncattdel");
    }
    public static int ncattdel ( int ncid,  int varid,  Addressable name) {
        var mh$ = ncattdel$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvardef$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ncvardef$MH,"ncvardef");
    }
    public static int ncvardef ( int ncid,  Addressable name,  int xtype,  int ndims,  Addressable dimidsp) {
        var mh$ = ncvardef$MH();
        try {
            return (int)mh$.invokeExact(ncid, name, xtype, ndims, dimidsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarid$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ncvarid$MH,"ncvarid");
    }
    public static int ncvarid ( int ncid,  Addressable name) {
        var mh$ = ncvarid$MH();
        try {
            return (int)mh$.invokeExact(ncid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarinq$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ncvarinq$MH,"ncvarinq");
    }
    public static int ncvarinq ( int ncid,  int varid,  Addressable name,  Addressable xtypep,  Addressable ndimsp,  Addressable dimidsp,  Addressable nattsp) {
        var mh$ = ncvarinq$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name, xtypep, ndimsp, dimidsp, nattsp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarput1$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ncvarput1$MH,"ncvarput1");
    }
    public static int ncvarput1 ( int ncid,  int varid,  Addressable indexp,  Addressable op) {
        var mh$ = ncvarput1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarget1$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ncvarget1$MH,"ncvarget1");
    }
    public static int ncvarget1 ( int ncid,  int varid,  Addressable indexp,  Addressable ip) {
        var mh$ = ncvarget1$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, indexp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarput$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ncvarput$MH,"ncvarput");
    }
    public static int ncvarput ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable op) {
        var mh$ = ncvarput$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarget$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ncvarget$MH,"ncvarget");
    }
    public static int ncvarget ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable ip) {
        var mh$ = ncvarget$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarputs$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ncvarputs$MH,"ncvarputs");
    }
    public static int ncvarputs ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable op) {
        var mh$ = ncvarputs$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvargets$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ncvargets$MH,"ncvargets");
    }
    public static int ncvargets ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable ip) {
        var mh$ = ncvargets$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarputg$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ncvarputg$MH,"ncvarputg");
    }
    public static int ncvarputg ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable op) {
        var mh$ = ncvarputg$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvargetg$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ncvargetg$MH,"ncvargetg");
    }
    public static int ncvargetg ( int ncid,  int varid,  Addressable startp,  Addressable countp,  Addressable stridep,  Addressable imapp,  Addressable ip) {
        var mh$ = ncvargetg$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, startp, countp, stridep, imapp, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncvarrename$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ncvarrename$MH,"ncvarrename");
    }
    public static int ncvarrename ( int ncid,  int varid,  Addressable name) {
        var mh$ = ncvarrename$MH();
        try {
            return (int)mh$.invokeExact(ncid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncrecinq$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ncrecinq$MH,"ncrecinq");
    }
    public static int ncrecinq ( int ncid,  Addressable nrecvarsp,  Addressable recvaridsp,  Addressable recsizesp) {
        var mh$ = ncrecinq$MH();
        try {
            return (int)mh$.invokeExact(ncid, nrecvarsp, recvaridsp, recsizesp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncrecget$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ncrecget$MH,"ncrecget");
    }
    public static int ncrecget ( int ncid,  long recnum,  Addressable datap) {
        var mh$ = ncrecget$MH();
        try {
            return (int)mh$.invokeExact(ncid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ncrecput$MH() {
        return RuntimeHelper.requireNonNull(constants$58.ncrecput$MH,"ncrecput");
    }
    public static int ncrecput ( int ncid,  long recnum,  Addressable datap) {
        var mh$ = ncrecput$MH();
        try {
            return (int)mh$.invokeExact(ncid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$58.nc_initialize$MH,"nc_initialize");
    }
    public static int nc_initialize () {
        var mh$ = nc_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$58.nc_finalize$MH,"nc_finalize");
    }
    public static int nc_finalize () {
        var mh$ = nc_finalize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rc_get$MH() {
        return RuntimeHelper.requireNonNull(constants$58.nc_rc_get$MH,"nc_rc_get");
    }
    public static MemoryAddress nc_rc_get ( Addressable key) {
        var mh$ = nc_rc_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nc_rc_set$MH() {
        return RuntimeHelper.requireNonNull(constants$58.nc_rc_set$MH,"nc_rc_set");
    }
    public static int nc_rc_set ( Addressable key,  Addressable value) {
        var mh$ = nc_rc_set$MH();
        try {
            return (int)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryAddress NULL() {
        return constants$58.NULL$ADDR;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int EWOULDBLOCK() {
        return (int)11L;
    }
    public static int EDEADLOCK() {
        return (int)35L;
    }
    public static int ENOTSUP() {
        return (int)95L;
    }
    public static int NC_LONG() {
        return (int)4L;
    }
    public static int NC_MAX_ATOMIC_TYPE() {
        return (int)12L;
    }
    public static byte NC_FILL_BYTE() {
        return (byte)-127L;
    }
    public static byte NC_FILL_CHAR() {
        return (byte)0L;
    }
    public static short NC_FILL_SHORT() {
        return (short)-32767L;
    }
    public static int NC_FILL_INT() {
        return (int)-2147483647L;
    }
    public static float NC_FILL_FLOAT() {
        return 9.969209968386869E36f;
    }
    public static double NC_FILL_DOUBLE() {
        return 9.969209968386869E36d;
    }
    public static int NC_FILL_UBYTE() {
        return (int)255L;
    }
    public static int NC_FILL_USHORT() {
        return (int)65535L;
    }
    public static int NC_FILL_UINT() {
        return (int)4294967295L;
    }
    public static long NC_FILL_INT64() {
        return -9223372036854775806L;
    }
    public static long NC_FILL_UINT64() {
        return -2L;
    }
    public static int NC_MIN_BYTE() {
        return (int)-128L;
    }
    public static int NC_MIN_SHORT() {
        return (int)-32768L;
    }
    public static int NC_MIN_INT() {
        return (int)-2147483648L;
    }
    public static float NC_MAX_FLOAT() {
        return 3.4028234663852886E38f;
    }
    public static float NC_MIN_FLOAT() {
        return -3.4028234663852886E38f;
    }
    public static double NC_MAX_DOUBLE() {
        return 1.7976931348623157E308d;
    }
    public static double NC_MIN_DOUBLE() {
        return -1.7976931348623157E308d;
    }
    public static int NC_MAX_UBYTE() {
        return (int)255L;
    }
    public static int NC_MAX_USHORT() {
        return (int)65535L;
    }
    public static int NC_MAX_UINT() {
        return (int)4294967295L;
    }
    public static long NC_MAX_INT64() {
        return 9223372036854775807L;
    }
    public static long NC_MIN_INT64() {
        return -9223372036854775808L;
    }
    public static long NC_MAX_UINT64() {
        return -1L;
    }
    public static MemorySegment _FillValue() {
        return constants$59._FillValue$SEGMENT;
    }
    public static int NC_CDF5() {
        return (int)32L;
    }
    public static int NC_MPIPOSIX() {
        return (int)8192L;
    }
    public static int NC_PNETCDF() {
        return (int)8192L;
    }
    public static int NC_FORMAT_CLASSIC() {
        return (int)1L;
    }
    public static int NC_FORMAT_64BIT_OFFSET() {
        return (int)2L;
    }
    public static int NC_FORMAT_64BIT() {
        return (int)2L;
    }
    public static int NC_FORMAT_NETCDF4() {
        return (int)3L;
    }
    public static int NC_FORMAT_NETCDF4_CLASSIC() {
        return (int)4L;
    }
    public static int NC_FORMAT_64BIT_DATA() {
        return (int)5L;
    }
    public static int NC_FORMAT_CDF5() {
        return (int)5L;
    }
    public static int NC_FORMAT_ALL() {
        return (int)5088L;
    }
    public static int NC_FORMATX_NC3() {
        return (int)1L;
    }
    public static int NC_FORMATX_NC_HDF5() {
        return (int)2L;
    }
    public static int NC_FORMATX_NC4() {
        return (int)2L;
    }
    public static int NC_FORMATX_NC_HDF4() {
        return (int)3L;
    }
    public static int NC_FORMATX_PNETCDF() {
        return (int)4L;
    }
    public static int NC_FORMATX_DAP2() {
        return (int)5L;
    }
    public static int NC_FORMATX_DAP4() {
        return (int)6L;
    }
    public static int NC_FORMATX_UDF0() {
        return (int)8L;
    }
    public static int NC_FORMATX_UDF1() {
        return (int)9L;
    }
    public static int NC_FORMATX_NCZARR() {
        return (int)10L;
    }
    public static int NC_FORMATX_UNDEFINED() {
        return (int)0L;
    }
    public static int NC_FORMAT_NC3() {
        return (int)1L;
    }
    public static int NC_FORMAT_NC_HDF5() {
        return (int)2L;
    }
    public static int NC_FORMAT_NC4() {
        return (int)2L;
    }
    public static int NC_FORMAT_NC_HDF4() {
        return (int)3L;
    }
    public static int NC_FORMAT_PNETCDF() {
        return (int)4L;
    }
    public static int NC_FORMAT_DAP2() {
        return (int)5L;
    }
    public static int NC_FORMAT_DAP4() {
        return (int)6L;
    }
    public static int NC_FORMAT_UNDEFINED() {
        return (int)0L;
    }
    public static long NC_ALIGN_CHUNK() {
        return -1L;
    }
    public static long NC_UNLIMITED() {
        return 0L;
    }
    public static int NC_GLOBAL() {
        return (int)-1L;
    }
    public static int NC_MAX_HDF4_NAME() {
        return (int)256L;
    }
    public static MemorySegment NC_QUANTIZE_BITGROOM_ATT_NAME() {
        return constants$59.NC_QUANTIZE_BITGROOM_ATT_NAME$SEGMENT;
    }
    public static MemorySegment NC_QUANTIZE_GRANULARBR_ATT_NAME() {
        return constants$59.NC_QUANTIZE_GRANULARBR_ATT_NAME$SEGMENT;
    }
    public static MemorySegment NC_QUANTIZE_BITROUND_ATT_NAME() {
        return constants$59.NC_QUANTIZE_BITROUND_ATT_NAME$SEGMENT;
    }
    public static int NC_QUANTIZE_MAX_FLOAT_NSD() {
        return (int)7L;
    }
    public static int NC_QUANTIZE_MAX_FLOAT_NSB() {
        return (int)23L;
    }
    public static int NC_QUANTIZE_MAX_DOUBLE_NSD() {
        return (int)15L;
    }
    public static int NC_QUANTIZE_MAX_DOUBLE_NSB() {
        return (int)52L;
    }
    public static int NC2_ERR() {
        return (int)-1L;
    }
    public static int NC_EBADID() {
        return (int)-33L;
    }
    public static int NC_ENFILE() {
        return (int)-34L;
    }
    public static int NC_EEXIST() {
        return (int)-35L;
    }
    public static int NC_EINVAL() {
        return (int)-36L;
    }
    public static int NC_EPERM() {
        return (int)-37L;
    }
    public static int NC_ENOTINDEFINE() {
        return (int)-38L;
    }
    public static int NC_EINDEFINE() {
        return (int)-39L;
    }
    public static int NC_EINVALCOORDS() {
        return (int)-40L;
    }
    public static int NC_EMAXDIMS() {
        return (int)-41L;
    }
    public static int NC_ENAMEINUSE() {
        return (int)-42L;
    }
    public static int NC_ENOTATT() {
        return (int)-43L;
    }
    public static int NC_EMAXATTS() {
        return (int)-44L;
    }
    public static int NC_EBADTYPE() {
        return (int)-45L;
    }
    public static int NC_EBADDIM() {
        return (int)-46L;
    }
    public static int NC_EUNLIMPOS() {
        return (int)-47L;
    }
    public static int NC_EMAXVARS() {
        return (int)-48L;
    }
    public static int NC_ENOTVAR() {
        return (int)-49L;
    }
    public static int NC_EGLOBAL() {
        return (int)-50L;
    }
    public static int NC_ENOTNC() {
        return (int)-51L;
    }
    public static int NC_ESTS() {
        return (int)-52L;
    }
    public static int NC_EMAXNAME() {
        return (int)-53L;
    }
    public static int NC_EUNLIMIT() {
        return (int)-54L;
    }
    public static int NC_ENORECVARS() {
        return (int)-55L;
    }
    public static int NC_ECHAR() {
        return (int)-56L;
    }
    public static int NC_EEDGE() {
        return (int)-57L;
    }
    public static int NC_ESTRIDE() {
        return (int)-58L;
    }
    public static int NC_EBADNAME() {
        return (int)-59L;
    }
    public static int NC_ERANGE() {
        return (int)-60L;
    }
    public static int NC_ENOMEM() {
        return (int)-61L;
    }
    public static int NC_EVARSIZE() {
        return (int)-62L;
    }
    public static int NC_EDIMSIZE() {
        return (int)-63L;
    }
    public static int NC_ETRUNC() {
        return (int)-64L;
    }
    public static int NC_EAXISTYPE() {
        return (int)-65L;
    }
    public static int NC_EDAP() {
        return (int)-66L;
    }
    public static int NC_ECURL() {
        return (int)-67L;
    }
    public static int NC_EIO() {
        return (int)-68L;
    }
    public static int NC_ENODATA() {
        return (int)-69L;
    }
    public static int NC_EDAPSVC() {
        return (int)-70L;
    }
    public static int NC_EDAS() {
        return (int)-71L;
    }
    public static int NC_EDDS() {
        return (int)-72L;
    }
    public static int NC_EDMR() {
        return (int)-72L;
    }
    public static int NC_EDATADDS() {
        return (int)-73L;
    }
    public static int NC_EDATADAP() {
        return (int)-73L;
    }
    public static int NC_EDAPURL() {
        return (int)-74L;
    }
    public static int NC_EDAPCONSTRAINT() {
        return (int)-75L;
    }
    public static int NC_ETRANSLATION() {
        return (int)-76L;
    }
    public static int NC_EACCESS() {
        return (int)-77L;
    }
    public static int NC_EAUTH() {
        return (int)-78L;
    }
    public static int NC_ENOTFOUND() {
        return (int)-90L;
    }
    public static int NC_ECANTREMOVE() {
        return (int)-91L;
    }
    public static int NC_EINTERNAL() {
        return (int)-92L;
    }
    public static int NC_EPNETCDF() {
        return (int)-93L;
    }
    public static int NC4_FIRST_ERROR() {
        return (int)-100L;
    }
    public static int NC_EHDFERR() {
        return (int)-101L;
    }
    public static int NC_ECANTREAD() {
        return (int)-102L;
    }
    public static int NC_ECANTWRITE() {
        return (int)-103L;
    }
    public static int NC_ECANTCREATE() {
        return (int)-104L;
    }
    public static int NC_EFILEMETA() {
        return (int)-105L;
    }
    public static int NC_EDIMMETA() {
        return (int)-106L;
    }
    public static int NC_EATTMETA() {
        return (int)-107L;
    }
    public static int NC_EVARMETA() {
        return (int)-108L;
    }
    public static int NC_ENOCOMPOUND() {
        return (int)-109L;
    }
    public static int NC_EATTEXISTS() {
        return (int)-110L;
    }
    public static int NC_ENOTNC4() {
        return (int)-111L;
    }
    public static int NC_ESTRICTNC3() {
        return (int)-112L;
    }
    public static int NC_ENOTNC3() {
        return (int)-113L;
    }
    public static int NC_ENOPAR() {
        return (int)-114L;
    }
    public static int NC_EPARINIT() {
        return (int)-115L;
    }
    public static int NC_EBADGRPID() {
        return (int)-116L;
    }
    public static int NC_EBADTYPID() {
        return (int)-117L;
    }
    public static int NC_ETYPDEFINED() {
        return (int)-118L;
    }
    public static int NC_EBADFIELD() {
        return (int)-119L;
    }
    public static int NC_EBADCLASS() {
        return (int)-120L;
    }
    public static int NC_EMAPTYPE() {
        return (int)-121L;
    }
    public static int NC_ELATEFILL() {
        return (int)-122L;
    }
    public static int NC_ELATEDEF() {
        return (int)-123L;
    }
    public static int NC_EDIMSCALE() {
        return (int)-124L;
    }
    public static int NC_ENOGRP() {
        return (int)-125L;
    }
    public static int NC_ESTORAGE() {
        return (int)-126L;
    }
    public static int NC_EBADCHUNK() {
        return (int)-127L;
    }
    public static int NC_ENOTBUILT() {
        return (int)-128L;
    }
    public static int NC_EDISKLESS() {
        return (int)-129L;
    }
    public static int NC_ECANTEXTEND() {
        return (int)-130L;
    }
    public static int NC_EMPI() {
        return (int)-131L;
    }
    public static int NC_EFILTER() {
        return (int)-132L;
    }
    public static int NC_ERCFILE() {
        return (int)-133L;
    }
    public static int NC_ENULLPAD() {
        return (int)-134L;
    }
    public static int NC_EINMEMORY() {
        return (int)-135L;
    }
    public static int NC_ENOFILTER() {
        return (int)-136L;
    }
    public static int NC_ENCZARR() {
        return (int)-137L;
    }
    public static int NC_ES3() {
        return (int)-138L;
    }
    public static int NC_EEMPTY() {
        return (int)-139L;
    }
    public static int NC_EOBJECT() {
        return (int)-140L;
    }
    public static int NC_ENOOBJECT() {
        return (int)-141L;
    }
    public static int NC_EPLUGIN() {
        return (int)-142L;
    }
    public static int NC4_LAST_ERROR() {
        return (int)-142L;
    }
    public static int NC_EURL() {
        return (int)-74L;
    }
    public static int NC_ECONSTRAINT() {
        return (int)-75L;
    }
    public static MemorySegment DIM_WITHOUT_VARIABLE() {
        return constants$59.DIM_WITHOUT_VARIABLE$SEGMENT;
    }
    public static MemorySegment NC_UNDEFINED_ENUM_IDENT() {
        return constants$59.NC_UNDEFINED_ENUM_IDENT$SEGMENT;
    }
    public static int NC_TURN_OFF_LOGGING() {
        return (int)-1L;
    }
    public static byte FILL_BYTE() {
        return (byte)-127L;
    }
    public static byte FILL_CHAR() {
        return (byte)0L;
    }
    public static short FILL_SHORT() {
        return (short)-32767L;
    }
    public static int FILL_LONG() {
        return (int)-2147483647L;
    }
    public static float FILL_FLOAT() {
        return 9.969209968386869E36f;
    }
    public static double FILL_DOUBLE() {
        return 9.969209968386869E36d;
    }
    public static int MAX_NC_DIMS() {
        return (int)1024L;
    }
    public static int MAX_NC_ATTRS() {
        return (int)8192L;
    }
    public static int MAX_NC_VARS() {
        return (int)8192L;
    }
    public static int MAX_NC_NAME() {
        return (int)256L;
    }
    public static int MAX_VAR_DIMS() {
        return (int)1024L;
    }
    public static int NC_ENTOOL() {
        return (int)-53L;
    }
    public static int NC_EXDR() {
        return (int)-32L;
    }
    public static int NC_SYSERR() {
        return (int)-31L;
    }
}


