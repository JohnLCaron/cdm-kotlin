// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5F_info1_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("super_ext_size"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("hdr_size"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("index_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("heap_size")
            ).withName("msgs_info")
        ).withName("sohm")
    ).withName("H5F_info1_t");
    public static MemoryLayout $LAYOUT() {
        return H5F_info1_t.$struct$LAYOUT;
    }
    static final VarHandle super_ext_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("super_ext_size"));
    public static VarHandle super_ext_size$VH() {
        return H5F_info1_t.super_ext_size$VH;
    }
    public static long super_ext_size$get(MemorySegment seg) {
        return (long)H5F_info1_t.super_ext_size$VH.get(seg);
    }
    public static void super_ext_size$set( MemorySegment seg, long x) {
        H5F_info1_t.super_ext_size$VH.set(seg, x);
    }
    public static long super_ext_size$get(MemorySegment seg, long index) {
        return (long)H5F_info1_t.super_ext_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void super_ext_size$set(MemorySegment seg, long index, long x) {
        H5F_info1_t.super_ext_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class sohm {

        static final  GroupLayout sohm$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("hdr_size"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("index_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("heap_size")
            ).withName("msgs_info")
        );
        public static MemoryLayout $LAYOUT() {
            return sohm.sohm$struct$LAYOUT;
        }
        static final VarHandle hdr_size$VH = sohm$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hdr_size"));
        public static VarHandle hdr_size$VH() {
            return sohm.hdr_size$VH;
        }
        public static long hdr_size$get(MemorySegment seg) {
            return (long)sohm.hdr_size$VH.get(seg);
        }
        public static void hdr_size$set( MemorySegment seg, long x) {
            sohm.hdr_size$VH.set(seg, x);
        }
        public static long hdr_size$get(MemorySegment seg, long index) {
            return (long)sohm.hdr_size$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void hdr_size$set(MemorySegment seg, long index, long x) {
            sohm.hdr_size$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment msgs_info$slice(MemorySegment seg) {
            return seg.asSlice(8, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment sohm$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


