// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5_alloc_stats_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("total_alloc_bytes"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("curr_alloc_bytes"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("peak_alloc_bytes"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_block_size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("total_alloc_blocks_count"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("curr_alloc_blocks_count"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("peak_alloc_blocks_count")
    ).withName("H5_alloc_stats_t");
    public static MemoryLayout $LAYOUT() {
        return H5_alloc_stats_t.$struct$LAYOUT;
    }
    static final VarHandle total_alloc_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("total_alloc_bytes"));
    public static VarHandle total_alloc_bytes$VH() {
        return H5_alloc_stats_t.total_alloc_bytes$VH;
    }
    public static long total_alloc_bytes$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.total_alloc_bytes$VH.get(seg);
    }
    public static void total_alloc_bytes$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.total_alloc_bytes$VH.set(seg, x);
    }
    public static long total_alloc_bytes$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.total_alloc_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void total_alloc_bytes$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.total_alloc_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle curr_alloc_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("curr_alloc_bytes"));
    public static VarHandle curr_alloc_bytes$VH() {
        return H5_alloc_stats_t.curr_alloc_bytes$VH;
    }
    public static long curr_alloc_bytes$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.curr_alloc_bytes$VH.get(seg);
    }
    public static void curr_alloc_bytes$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.curr_alloc_bytes$VH.set(seg, x);
    }
    public static long curr_alloc_bytes$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.curr_alloc_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void curr_alloc_bytes$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.curr_alloc_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle peak_alloc_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("peak_alloc_bytes"));
    public static VarHandle peak_alloc_bytes$VH() {
        return H5_alloc_stats_t.peak_alloc_bytes$VH;
    }
    public static long peak_alloc_bytes$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.peak_alloc_bytes$VH.get(seg);
    }
    public static void peak_alloc_bytes$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.peak_alloc_bytes$VH.set(seg, x);
    }
    public static long peak_alloc_bytes$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.peak_alloc_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void peak_alloc_bytes$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.peak_alloc_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_block_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_block_size"));
    public static VarHandle max_block_size$VH() {
        return H5_alloc_stats_t.max_block_size$VH;
    }
    public static long max_block_size$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.max_block_size$VH.get(seg);
    }
    public static void max_block_size$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.max_block_size$VH.set(seg, x);
    }
    public static long max_block_size$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.max_block_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_block_size$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.max_block_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle total_alloc_blocks_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("total_alloc_blocks_count"));
    public static VarHandle total_alloc_blocks_count$VH() {
        return H5_alloc_stats_t.total_alloc_blocks_count$VH;
    }
    public static long total_alloc_blocks_count$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.total_alloc_blocks_count$VH.get(seg);
    }
    public static void total_alloc_blocks_count$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.total_alloc_blocks_count$VH.set(seg, x);
    }
    public static long total_alloc_blocks_count$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.total_alloc_blocks_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void total_alloc_blocks_count$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.total_alloc_blocks_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle curr_alloc_blocks_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("curr_alloc_blocks_count"));
    public static VarHandle curr_alloc_blocks_count$VH() {
        return H5_alloc_stats_t.curr_alloc_blocks_count$VH;
    }
    public static long curr_alloc_blocks_count$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.curr_alloc_blocks_count$VH.get(seg);
    }
    public static void curr_alloc_blocks_count$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.curr_alloc_blocks_count$VH.set(seg, x);
    }
    public static long curr_alloc_blocks_count$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.curr_alloc_blocks_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void curr_alloc_blocks_count$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.curr_alloc_blocks_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle peak_alloc_blocks_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("peak_alloc_blocks_count"));
    public static VarHandle peak_alloc_blocks_count$VH() {
        return H5_alloc_stats_t.peak_alloc_blocks_count$VH;
    }
    public static long peak_alloc_blocks_count$get(MemorySegment seg) {
        return (long)H5_alloc_stats_t.peak_alloc_blocks_count$VH.get(seg);
    }
    public static void peak_alloc_blocks_count$set( MemorySegment seg, long x) {
        H5_alloc_stats_t.peak_alloc_blocks_count$VH.set(seg, x);
    }
    public static long peak_alloc_blocks_count$get(MemorySegment seg, long index) {
        return (long)H5_alloc_stats_t.peak_alloc_blocks_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void peak_alloc_blocks_count$set(MemorySegment seg, long index, long x) {
        H5_alloc_stats_t.peak_alloc_blocks_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


