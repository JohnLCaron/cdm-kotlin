// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5AC_cache_image_config_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("version"),
        Constants$root.C_BOOL$LAYOUT.withName("generate_image"),
        Constants$root.C_BOOL$LAYOUT.withName("save_resize_status"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("entry_ageout")
    ).withName("H5AC_cache_image_config_t");
    public static MemoryLayout $LAYOUT() {
        return H5AC_cache_image_config_t.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return H5AC_cache_image_config_t.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)H5AC_cache_image_config_t.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        H5AC_cache_image_config_t.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)H5AC_cache_image_config_t.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        H5AC_cache_image_config_t.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle generate_image$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("generate_image"));
    public static VarHandle generate_image$VH() {
        return H5AC_cache_image_config_t.generate_image$VH;
    }
    public static boolean generate_image$get(MemorySegment seg) {
        return (boolean)H5AC_cache_image_config_t.generate_image$VH.get(seg);
    }
    public static void generate_image$set( MemorySegment seg, boolean x) {
        H5AC_cache_image_config_t.generate_image$VH.set(seg, x);
    }
    public static boolean generate_image$get(MemorySegment seg, long index) {
        return (boolean)H5AC_cache_image_config_t.generate_image$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void generate_image$set(MemorySegment seg, long index, boolean x) {
        H5AC_cache_image_config_t.generate_image$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle save_resize_status$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("save_resize_status"));
    public static VarHandle save_resize_status$VH() {
        return H5AC_cache_image_config_t.save_resize_status$VH;
    }
    public static boolean save_resize_status$get(MemorySegment seg) {
        return (boolean)H5AC_cache_image_config_t.save_resize_status$VH.get(seg);
    }
    public static void save_resize_status$set( MemorySegment seg, boolean x) {
        H5AC_cache_image_config_t.save_resize_status$VH.set(seg, x);
    }
    public static boolean save_resize_status$get(MemorySegment seg, long index) {
        return (boolean)H5AC_cache_image_config_t.save_resize_status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save_resize_status$set(MemorySegment seg, long index, boolean x) {
        H5AC_cache_image_config_t.save_resize_status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle entry_ageout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("entry_ageout"));
    public static VarHandle entry_ageout$VH() {
        return H5AC_cache_image_config_t.entry_ageout$VH;
    }
    public static int entry_ageout$get(MemorySegment seg) {
        return (int)H5AC_cache_image_config_t.entry_ageout$VH.get(seg);
    }
    public static void entry_ageout$set( MemorySegment seg, int x) {
        H5AC_cache_image_config_t.entry_ageout$VH.set(seg, x);
    }
    public static int entry_ageout$get(MemorySegment seg, long index) {
        return (int)H5AC_cache_image_config_t.entry_ageout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void entry_ageout$set(MemorySegment seg, long index, int x) {
        H5AC_cache_image_config_t.entry_ageout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


