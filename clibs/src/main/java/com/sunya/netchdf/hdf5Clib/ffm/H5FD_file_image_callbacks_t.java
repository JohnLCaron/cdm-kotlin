// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5FD_file_image_callbacks_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("image_malloc"),
        Constants$root.C_POINTER$LAYOUT.withName("image_memcpy"),
        Constants$root.C_POINTER$LAYOUT.withName("image_realloc"),
        Constants$root.C_POINTER$LAYOUT.withName("image_free"),
        Constants$root.C_POINTER$LAYOUT.withName("udata_copy"),
        Constants$root.C_POINTER$LAYOUT.withName("udata_free"),
        Constants$root.C_POINTER$LAYOUT.withName("udata")
    );
    public static MemoryLayout $LAYOUT() {
        return H5FD_file_image_callbacks_t.$struct$LAYOUT;
    }
    static final FunctionDescriptor image_malloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle image_malloc$MH = RuntimeHelper.downcallHandle(
        H5FD_file_image_callbacks_t.image_malloc$FUNC
    );
    public interface image_malloc {

        java.lang.foreign.Addressable apply(long _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(image_malloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(image_malloc.class, fi, H5FD_file_image_callbacks_t.image_malloc$FUNC, session);
        }
        static image_malloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_malloc$MH.invokeExact((Addressable)symbol, __x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle image_malloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("image_malloc"));
    public static VarHandle image_malloc$VH() {
        return H5FD_file_image_callbacks_t.image_malloc$VH;
    }
    public static MemoryAddress image_malloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_malloc$VH.get(seg);
    }
    public static void image_malloc$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_malloc$VH.set(seg, x);
    }
    public static MemoryAddress image_malloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_malloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void image_malloc$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_malloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_malloc image_malloc (MemorySegment segment, MemorySession session) {
        return image_malloc.ofAddress(image_malloc$get(segment), session);
    }
    static final FunctionDescriptor image_memcpy$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle image_memcpy$MH = RuntimeHelper.downcallHandle(
        H5FD_file_image_callbacks_t.image_memcpy$FUNC
    );
    public interface image_memcpy {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, int _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(image_memcpy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(image_memcpy.class, fi, H5FD_file_image_callbacks_t.image_memcpy$FUNC, session);
        }
        static image_memcpy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, int __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_memcpy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle image_memcpy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("image_memcpy"));
    public static VarHandle image_memcpy$VH() {
        return H5FD_file_image_callbacks_t.image_memcpy$VH;
    }
    public static MemoryAddress image_memcpy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_memcpy$VH.get(seg);
    }
    public static void image_memcpy$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_memcpy$VH.set(seg, x);
    }
    public static MemoryAddress image_memcpy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_memcpy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void image_memcpy$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_memcpy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_memcpy image_memcpy (MemorySegment segment, MemorySession session) {
        return image_memcpy.ofAddress(image_memcpy$get(segment), session);
    }
    static final FunctionDescriptor image_realloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle image_realloc$MH = RuntimeHelper.downcallHandle(
        H5FD_file_image_callbacks_t.image_realloc$FUNC
    );
    public interface image_realloc {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, long _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(image_realloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(image_realloc.class, fi, H5FD_file_image_callbacks_t.image_realloc$FUNC, session);
        }
        static image_realloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_realloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle image_realloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("image_realloc"));
    public static VarHandle image_realloc$VH() {
        return H5FD_file_image_callbacks_t.image_realloc$VH;
    }
    public static MemoryAddress image_realloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_realloc$VH.get(seg);
    }
    public static void image_realloc$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_realloc$VH.set(seg, x);
    }
    public static MemoryAddress image_realloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_realloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void image_realloc$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_realloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_realloc image_realloc (MemorySegment segment, MemorySession session) {
        return image_realloc.ofAddress(image_realloc$get(segment), session);
    }
    static final FunctionDescriptor image_free$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle image_free$MH = RuntimeHelper.downcallHandle(
        H5FD_file_image_callbacks_t.image_free$FUNC
    );
    public interface image_free {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(image_free fi, MemorySession session) {
            return RuntimeHelper.upcallStub(image_free.class, fi, H5FD_file_image_callbacks_t.image_free$FUNC, session);
        }
        static image_free ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)H5FD_file_image_callbacks_t.image_free$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle image_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("image_free"));
    public static VarHandle image_free$VH() {
        return H5FD_file_image_callbacks_t.image_free$VH;
    }
    public static MemoryAddress image_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_free$VH.get(seg);
    }
    public static void image_free$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_free$VH.set(seg, x);
    }
    public static MemoryAddress image_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.image_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void image_free$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.image_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static image_free image_free (MemorySegment segment, MemorySession session) {
        return image_free.ofAddress(image_free$get(segment), session);
    }
    static final FunctionDescriptor udata_copy$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle udata_copy$MH = RuntimeHelper.downcallHandle(
        H5FD_file_image_callbacks_t.udata_copy$FUNC
    );
    public interface udata_copy {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(udata_copy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(udata_copy.class, fi, H5FD_file_image_callbacks_t.udata_copy$FUNC, session);
        }
        static udata_copy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata_copy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle udata_copy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("udata_copy"));
    public static VarHandle udata_copy$VH() {
        return H5FD_file_image_callbacks_t.udata_copy$VH;
    }
    public static MemoryAddress udata_copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata_copy$VH.get(seg);
    }
    public static void udata_copy$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.udata_copy$VH.set(seg, x);
    }
    public static MemoryAddress udata_copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata_copy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void udata_copy$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.udata_copy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static udata_copy udata_copy (MemorySegment segment, MemorySession session) {
        return udata_copy.ofAddress(udata_copy$get(segment), session);
    }
    static final FunctionDescriptor udata_free$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle udata_free$MH = RuntimeHelper.downcallHandle(
        H5FD_file_image_callbacks_t.udata_free$FUNC
    );
    public interface udata_free {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(udata_free fi, MemorySession session) {
            return RuntimeHelper.upcallStub(udata_free.class, fi, H5FD_file_image_callbacks_t.udata_free$FUNC, session);
        }
        static udata_free ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)H5FD_file_image_callbacks_t.udata_free$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle udata_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("udata_free"));
    public static VarHandle udata_free$VH() {
        return H5FD_file_image_callbacks_t.udata_free$VH;
    }
    public static MemoryAddress udata_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata_free$VH.get(seg);
    }
    public static void udata_free$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.udata_free$VH.set(seg, x);
    }
    public static MemoryAddress udata_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void udata_free$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.udata_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static udata_free udata_free (MemorySegment segment, MemorySession session) {
        return udata_free.ofAddress(udata_free$get(segment), session);
    }
    static final VarHandle udata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("udata"));
    public static VarHandle udata$VH() {
        return H5FD_file_image_callbacks_t.udata$VH;
    }
    public static MemoryAddress udata$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata$VH.get(seg);
    }
    public static void udata$set( MemorySegment seg, MemoryAddress x) {
        H5FD_file_image_callbacks_t.udata$VH.set(seg, x);
    }
    public static MemoryAddress udata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5FD_file_image_callbacks_t.udata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void udata$set(MemorySegment seg, long index, MemoryAddress x) {
        H5FD_file_image_callbacks_t.udata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


