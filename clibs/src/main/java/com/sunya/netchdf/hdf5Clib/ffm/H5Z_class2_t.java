// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5Z_class2_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("version"),
        Constants$root.C_INT$LAYOUT.withName("id"),
        Constants$root.C_INT$LAYOUT.withName("encoder_present"),
        Constants$root.C_INT$LAYOUT.withName("decoder_present"),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("can_apply"),
        Constants$root.C_POINTER$LAYOUT.withName("set_local"),
        Constants$root.C_POINTER$LAYOUT.withName("filter")
    ).withName("H5Z_class2_t");
    public static MemoryLayout $LAYOUT() {
        return H5Z_class2_t.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return H5Z_class2_t.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)H5Z_class2_t.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        H5Z_class2_t.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)H5Z_class2_t.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        H5Z_class2_t.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return H5Z_class2_t.id$VH;
    }
    public static int id$get(MemorySegment seg) {
        return (int)H5Z_class2_t.id$VH.get(seg);
    }
    public static void id$set( MemorySegment seg, int x) {
        H5Z_class2_t.id$VH.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)H5Z_class2_t.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        H5Z_class2_t.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle encoder_present$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("encoder_present"));
    public static VarHandle encoder_present$VH() {
        return H5Z_class2_t.encoder_present$VH;
    }
    public static int encoder_present$get(MemorySegment seg) {
        return (int)H5Z_class2_t.encoder_present$VH.get(seg);
    }
    public static void encoder_present$set( MemorySegment seg, int x) {
        H5Z_class2_t.encoder_present$VH.set(seg, x);
    }
    public static int encoder_present$get(MemorySegment seg, long index) {
        return (int)H5Z_class2_t.encoder_present$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void encoder_present$set(MemorySegment seg, long index, int x) {
        H5Z_class2_t.encoder_present$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle decoder_present$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("decoder_present"));
    public static VarHandle decoder_present$VH() {
        return H5Z_class2_t.decoder_present$VH;
    }
    public static int decoder_present$get(MemorySegment seg) {
        return (int)H5Z_class2_t.decoder_present$VH.get(seg);
    }
    public static void decoder_present$set( MemorySegment seg, int x) {
        H5Z_class2_t.decoder_present$VH.set(seg, x);
    }
    public static int decoder_present$get(MemorySegment seg, long index) {
        return (int)H5Z_class2_t.decoder_present$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void decoder_present$set(MemorySegment seg, long index, int x) {
        H5Z_class2_t.decoder_present$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return H5Z_class2_t.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        H5Z_class2_t.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        H5Z_class2_t.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle can_apply$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_apply"));
    public static VarHandle can_apply$VH() {
        return H5Z_class2_t.can_apply$VH;
    }
    public static MemoryAddress can_apply$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.can_apply$VH.get(seg);
    }
    public static void can_apply$set( MemorySegment seg, MemoryAddress x) {
        H5Z_class2_t.can_apply$VH.set(seg, x);
    }
    public static MemoryAddress can_apply$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.can_apply$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_apply$set(MemorySegment seg, long index, MemoryAddress x) {
        H5Z_class2_t.can_apply$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static H5Z_can_apply_func_t can_apply (MemorySegment segment, MemorySession session) {
        return H5Z_can_apply_func_t.ofAddress(can_apply$get(segment), session);
    }
    static final VarHandle set_local$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_local"));
    public static VarHandle set_local$VH() {
        return H5Z_class2_t.set_local$VH;
    }
    public static MemoryAddress set_local$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.set_local$VH.get(seg);
    }
    public static void set_local$set( MemorySegment seg, MemoryAddress x) {
        H5Z_class2_t.set_local$VH.set(seg, x);
    }
    public static MemoryAddress set_local$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.set_local$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_local$set(MemorySegment seg, long index, MemoryAddress x) {
        H5Z_class2_t.set_local$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static H5Z_set_local_func_t set_local (MemorySegment segment, MemorySession session) {
        return H5Z_set_local_func_t.ofAddress(set_local$get(segment), session);
    }
    static final VarHandle filter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filter"));
    public static VarHandle filter$VH() {
        return H5Z_class2_t.filter$VH;
    }
    public static MemoryAddress filter$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.filter$VH.get(seg);
    }
    public static void filter$set( MemorySegment seg, MemoryAddress x) {
        H5Z_class2_t.filter$VH.set(seg, x);
    }
    public static MemoryAddress filter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)H5Z_class2_t.filter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filter$set(MemorySegment seg, long index, MemoryAddress x) {
        H5Z_class2_t.filter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static H5Z_func_t filter (MemorySegment segment, MemorySession session) {
        return H5Z_func_t.ofAddress(filter$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


