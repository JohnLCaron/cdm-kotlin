// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5O_hdr_info_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("version"),
        Constants$root.C_INT$LAYOUT.withName("nmesgs"),
        Constants$root.C_INT$LAYOUT.withName("nchunks"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("total"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("meta"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("mesg"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("free")
        ).withName("space"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("present"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("shared")
        ).withName("mesg")
    ).withName("H5O_hdr_info_t");
    public static MemoryLayout $LAYOUT() {
        return H5O_hdr_info_t.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return H5O_hdr_info_t.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)H5O_hdr_info_t.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        H5O_hdr_info_t.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)H5O_hdr_info_t.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        H5O_hdr_info_t.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nmesgs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nmesgs"));
    public static VarHandle nmesgs$VH() {
        return H5O_hdr_info_t.nmesgs$VH;
    }
    public static int nmesgs$get(MemorySegment seg) {
        return (int)H5O_hdr_info_t.nmesgs$VH.get(seg);
    }
    public static void nmesgs$set( MemorySegment seg, int x) {
        H5O_hdr_info_t.nmesgs$VH.set(seg, x);
    }
    public static int nmesgs$get(MemorySegment seg, long index) {
        return (int)H5O_hdr_info_t.nmesgs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nmesgs$set(MemorySegment seg, long index, int x) {
        H5O_hdr_info_t.nmesgs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nchunks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nchunks"));
    public static VarHandle nchunks$VH() {
        return H5O_hdr_info_t.nchunks$VH;
    }
    public static int nchunks$get(MemorySegment seg) {
        return (int)H5O_hdr_info_t.nchunks$VH.get(seg);
    }
    public static void nchunks$set( MemorySegment seg, int x) {
        H5O_hdr_info_t.nchunks$VH.set(seg, x);
    }
    public static int nchunks$get(MemorySegment seg, long index) {
        return (int)H5O_hdr_info_t.nchunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nchunks$set(MemorySegment seg, long index, int x) {
        H5O_hdr_info_t.nchunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return H5O_hdr_info_t.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)H5O_hdr_info_t.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        H5O_hdr_info_t.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)H5O_hdr_info_t.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        H5O_hdr_info_t.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class space {

        static final  GroupLayout space$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("total"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("meta"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("mesg"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("free")
        );
        public static MemoryLayout $LAYOUT() {
            return space.space$struct$LAYOUT;
        }
        static final VarHandle total$VH = space$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("total"));
        public static VarHandle total$VH() {
            return space.total$VH;
        }
        public static long total$get(MemorySegment seg) {
            return (long)space.total$VH.get(seg);
        }
        public static void total$set( MemorySegment seg, long x) {
            space.total$VH.set(seg, x);
        }
        public static long total$get(MemorySegment seg, long index) {
            return (long)space.total$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void total$set(MemorySegment seg, long index, long x) {
            space.total$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle meta$VH = space$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("meta"));
        public static VarHandle meta$VH() {
            return space.meta$VH;
        }
        public static long meta$get(MemorySegment seg) {
            return (long)space.meta$VH.get(seg);
        }
        public static void meta$set( MemorySegment seg, long x) {
            space.meta$VH.set(seg, x);
        }
        public static long meta$get(MemorySegment seg, long index) {
            return (long)space.meta$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void meta$set(MemorySegment seg, long index, long x) {
            space.meta$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle mesg$VH = space$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mesg"));
        public static VarHandle mesg$VH() {
            return space.mesg$VH;
        }
        public static long mesg$get(MemorySegment seg) {
            return (long)space.mesg$VH.get(seg);
        }
        public static void mesg$set( MemorySegment seg, long x) {
            space.mesg$VH.set(seg, x);
        }
        public static long mesg$get(MemorySegment seg, long index) {
            return (long)space.mesg$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void mesg$set(MemorySegment seg, long index, long x) {
            space.mesg$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle free$VH = space$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
        public static VarHandle free$VH() {
            return space.free$VH;
        }
        public static long free$get(MemorySegment seg) {
            return (long)space.free$VH.get(seg);
        }
        public static void free$set( MemorySegment seg, long x) {
            space.free$VH.set(seg, x);
        }
        public static long free$get(MemorySegment seg, long index) {
            return (long)space.free$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void free$set(MemorySegment seg, long index, long x) {
            space.free$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment space$slice(MemorySegment seg) {
        return seg.asSlice(16, 32);
    }
    public static class mesg {

        static final  GroupLayout mesg$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("present"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("shared")
        );
        public static MemoryLayout $LAYOUT() {
            return mesg.mesg$struct$LAYOUT;
        }
        static final VarHandle present$VH = mesg$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("present"));
        public static VarHandle present$VH() {
            return mesg.present$VH;
        }
        public static long present$get(MemorySegment seg) {
            return (long)mesg.present$VH.get(seg);
        }
        public static void present$set( MemorySegment seg, long x) {
            mesg.present$VH.set(seg, x);
        }
        public static long present$get(MemorySegment seg, long index) {
            return (long)mesg.present$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void present$set(MemorySegment seg, long index, long x) {
            mesg.present$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle shared$VH = mesg$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shared"));
        public static VarHandle shared$VH() {
            return mesg.shared$VH;
        }
        public static long shared$get(MemorySegment seg) {
            return (long)mesg.shared$VH.get(seg);
        }
        public static void shared$set( MemorySegment seg, long x) {
            mesg.shared$VH.set(seg, x);
        }
        public static long shared$get(MemorySegment seg, long index) {
            return (long)mesg.shared$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void shared$set(MemorySegment seg, long index, long x) {
            mesg.shared$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment mesg$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


