// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5G_info_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("storage_type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nlinks"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("max_corder"),
        Constants$root.C_BOOL$LAYOUT.withName("mounted"),
        MemoryLayout.paddingLayout(56)
    ).withName("H5G_info_t");
    public static MemoryLayout $LAYOUT() {
        return H5G_info_t.$struct$LAYOUT;
    }
    public static MemoryLayout makeOne() {
        return H5G_info_t.$struct$LAYOUT;
    }
    static final VarHandle storage_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("storage_type"));
    public static VarHandle storage_type$VH() {
        return H5G_info_t.storage_type$VH;
    }
    public static int storage_type$get(MemorySegment seg) {
        return (int)H5G_info_t.storage_type$VH.get(seg);
    }
    public static void storage_type$set( MemorySegment seg, int x) {
        H5G_info_t.storage_type$VH.set(seg, x);
    }
    public static int storage_type$get(MemorySegment seg, long index) {
        return (int)H5G_info_t.storage_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void storage_type$set(MemorySegment seg, long index, int x) {
        H5G_info_t.storage_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nlinks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nlinks"));
    public static VarHandle nlinks$VH() {
        return H5G_info_t.nlinks$VH;
    }
    public static long nlinks$get(MemorySegment seg) {
        return (long)H5G_info_t.nlinks$VH.get(seg);
    }
    public static void nlinks$set( MemorySegment seg, long x) {
        H5G_info_t.nlinks$VH.set(seg, x);
    }
    public static long nlinks$get(MemorySegment seg, long index) {
        return (long)H5G_info_t.nlinks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nlinks$set(MemorySegment seg, long index, long x) {
        H5G_info_t.nlinks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_corder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_corder"));
    public static VarHandle max_corder$VH() {
        return H5G_info_t.max_corder$VH;
    }
    public static long max_corder$get(MemorySegment seg) {
        return (long)H5G_info_t.max_corder$VH.get(seg);
    }
    public static void max_corder$set( MemorySegment seg, long x) {
        H5G_info_t.max_corder$VH.set(seg, x);
    }
    public static long max_corder$get(MemorySegment seg, long index) {
        return (long)H5G_info_t.max_corder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_corder$set(MemorySegment seg, long index, long x) {
        H5G_info_t.max_corder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mounted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mounted"));
    public static VarHandle mounted$VH() {
        return H5G_info_t.mounted$VH;
    }
    public static boolean mounted$get(MemorySegment seg) {
        return (boolean)H5G_info_t.mounted$VH.get(seg);
    }
    public static void mounted$set( MemorySegment seg, boolean x) {
        H5G_info_t.mounted$VH.set(seg, x);
    }
    public static boolean mounted$get(MemorySegment seg, long index) {
        return (boolean)H5G_info_t.mounted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mounted$set(MemorySegment seg, long index, boolean x) {
        H5G_info_t.mounted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


