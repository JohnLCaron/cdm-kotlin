// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5O_info_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("fileno"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("addr"),
        Constants$root.C_INT$LAYOUT.withName("type"),
        Constants$root.C_INT$LAYOUT.withName("rc"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("atime"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("mtime"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ctime"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("btime"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("num_attrs"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("version"),
            Constants$root.C_INT$LAYOUT.withName("nmesgs"),
            Constants$root.C_INT$LAYOUT.withName("nchunks"),
            Constants$root.C_INT$LAYOUT.withName("flags"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("total"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("meta"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("mesg"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("free")
            ).withName("space"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("present"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("shared")
            ).withName("mesg")
        ).withName("hdr"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("index_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("heap_size")
            ).withName("obj"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("index_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("heap_size")
            ).withName("attr")
        ).withName("meta_size")
    ).withName("H5O_info_t");
    public static MemoryLayout $LAYOUT() {
        return H5O_info_t.$struct$LAYOUT;
    }
    static final VarHandle fileno$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fileno"));
    public static VarHandle fileno$VH() {
        return H5O_info_t.fileno$VH;
    }
    public static long fileno$get(MemorySegment seg) {
        return (long)H5O_info_t.fileno$VH.get(seg);
    }
    public static void fileno$set( MemorySegment seg, long x) {
        H5O_info_t.fileno$VH.set(seg, x);
    }
    public static long fileno$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.fileno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fileno$set(MemorySegment seg, long index, long x) {
        H5O_info_t.fileno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle addr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("addr"));
    public static VarHandle addr$VH() {
        return H5O_info_t.addr$VH;
    }
    public static long addr$get(MemorySegment seg) {
        return (long)H5O_info_t.addr$VH.get(seg);
    }
    public static void addr$set( MemorySegment seg, long x) {
        H5O_info_t.addr$VH.set(seg, x);
    }
    public static long addr$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.addr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void addr$set(MemorySegment seg, long index, long x) {
        H5O_info_t.addr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return H5O_info_t.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)H5O_info_t.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        H5O_info_t.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)H5O_info_t.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        H5O_info_t.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rc"));
    public static VarHandle rc$VH() {
        return H5O_info_t.rc$VH;
    }
    public static int rc$get(MemorySegment seg) {
        return (int)H5O_info_t.rc$VH.get(seg);
    }
    public static void rc$set( MemorySegment seg, int x) {
        H5O_info_t.rc$VH.set(seg, x);
    }
    public static int rc$get(MemorySegment seg, long index) {
        return (int)H5O_info_t.rc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rc$set(MemorySegment seg, long index, int x) {
        H5O_info_t.rc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle atime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("atime"));
    public static VarHandle atime$VH() {
        return H5O_info_t.atime$VH;
    }
    public static long atime$get(MemorySegment seg) {
        return (long)H5O_info_t.atime$VH.get(seg);
    }
    public static void atime$set( MemorySegment seg, long x) {
        H5O_info_t.atime$VH.set(seg, x);
    }
    public static long atime$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.atime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void atime$set(MemorySegment seg, long index, long x) {
        H5O_info_t.atime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mtime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mtime"));
    public static VarHandle mtime$VH() {
        return H5O_info_t.mtime$VH;
    }
    public static long mtime$get(MemorySegment seg) {
        return (long)H5O_info_t.mtime$VH.get(seg);
    }
    public static void mtime$set( MemorySegment seg, long x) {
        H5O_info_t.mtime$VH.set(seg, x);
    }
    public static long mtime$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.mtime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mtime$set(MemorySegment seg, long index, long x) {
        H5O_info_t.mtime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ctime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ctime"));
    public static VarHandle ctime$VH() {
        return H5O_info_t.ctime$VH;
    }
    public static long ctime$get(MemorySegment seg) {
        return (long)H5O_info_t.ctime$VH.get(seg);
    }
    public static void ctime$set( MemorySegment seg, long x) {
        H5O_info_t.ctime$VH.set(seg, x);
    }
    public static long ctime$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.ctime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ctime$set(MemorySegment seg, long index, long x) {
        H5O_info_t.ctime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle btime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("btime"));
    public static VarHandle btime$VH() {
        return H5O_info_t.btime$VH;
    }
    public static long btime$get(MemorySegment seg) {
        return (long)H5O_info_t.btime$VH.get(seg);
    }
    public static void btime$set( MemorySegment seg, long x) {
        H5O_info_t.btime$VH.set(seg, x);
    }
    public static long btime$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.btime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void btime$set(MemorySegment seg, long index, long x) {
        H5O_info_t.btime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_attrs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_attrs"));
    public static VarHandle num_attrs$VH() {
        return H5O_info_t.num_attrs$VH;
    }
    public static long num_attrs$get(MemorySegment seg) {
        return (long)H5O_info_t.num_attrs$VH.get(seg);
    }
    public static void num_attrs$set( MemorySegment seg, long x) {
        H5O_info_t.num_attrs$VH.set(seg, x);
    }
    public static long num_attrs$get(MemorySegment seg, long index) {
        return (long)H5O_info_t.num_attrs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_attrs$set(MemorySegment seg, long index, long x) {
        H5O_info_t.num_attrs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment hdr$slice(MemorySegment seg) {
        return seg.asSlice(64, 64);
    }
    public static class meta_size {

        static final  GroupLayout meta_size$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("index_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("heap_size")
            ).withName("obj"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("index_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("heap_size")
            ).withName("attr")
        );
        public static MemoryLayout $LAYOUT() {
            return meta_size.meta_size$struct$LAYOUT;
        }
        public static MemorySegment obj$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment attr$slice(MemorySegment seg) {
            return seg.asSlice(16, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment meta_size$slice(MemorySegment seg) {
        return seg.asSlice(128, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


