// Generated by jextract

package com.sunya.netchdf.hdf5Clib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class H5FD_hdfs_fapl_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("version"),
        MemoryLayout.sequenceLayout(129, Constants$root.C_CHAR$LAYOUT).withName("namenode_name"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_INT$LAYOUT.withName("namenode_port"),
        MemoryLayout.sequenceLayout(129, Constants$root.C_CHAR$LAYOUT).withName("user_name"),
        MemoryLayout.sequenceLayout(129, Constants$root.C_CHAR$LAYOUT).withName("kerberos_ticket_cache"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("stream_buffer_size")
    ).withName("H5FD_hdfs_fapl_t");
    public static MemoryLayout $LAYOUT() {
        return H5FD_hdfs_fapl_t.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return H5FD_hdfs_fapl_t.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)H5FD_hdfs_fapl_t.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        H5FD_hdfs_fapl_t.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)H5FD_hdfs_fapl_t.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        H5FD_hdfs_fapl_t.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment namenode_name$slice(MemorySegment seg) {
        return seg.asSlice(4, 129);
    }
    static final VarHandle namenode_port$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("namenode_port"));
    public static VarHandle namenode_port$VH() {
        return H5FD_hdfs_fapl_t.namenode_port$VH;
    }
    public static int namenode_port$get(MemorySegment seg) {
        return (int)H5FD_hdfs_fapl_t.namenode_port$VH.get(seg);
    }
    public static void namenode_port$set( MemorySegment seg, int x) {
        H5FD_hdfs_fapl_t.namenode_port$VH.set(seg, x);
    }
    public static int namenode_port$get(MemorySegment seg, long index) {
        return (int)H5FD_hdfs_fapl_t.namenode_port$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void namenode_port$set(MemorySegment seg, long index, int x) {
        H5FD_hdfs_fapl_t.namenode_port$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment user_name$slice(MemorySegment seg) {
        return seg.asSlice(140, 129);
    }
    public static MemorySegment kerberos_ticket_cache$slice(MemorySegment seg) {
        return seg.asSlice(269, 129);
    }
    static final VarHandle stream_buffer_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stream_buffer_size"));
    public static VarHandle stream_buffer_size$VH() {
        return H5FD_hdfs_fapl_t.stream_buffer_size$VH;
    }
    public static int stream_buffer_size$get(MemorySegment seg) {
        return (int)H5FD_hdfs_fapl_t.stream_buffer_size$VH.get(seg);
    }
    public static void stream_buffer_size$set( MemorySegment seg, int x) {
        H5FD_hdfs_fapl_t.stream_buffer_size$VH.set(seg, x);
    }
    public static int stream_buffer_size$get(MemorySegment seg, long index) {
        return (int)H5FD_hdfs_fapl_t.stream_buffer_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stream_buffer_size$set(MemorySegment seg, long index, int x) {
        H5FD_hdfs_fapl_t.stream_buffer_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


