// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class mfhdf_h_2 extends mfhdf_h_1 {

    public static MethodHandle VSfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$132.VSfindattr$MH,"VSfindattr");
    }
    public static int VSfindattr ( int vsid,  int findex,  Addressable attrname) {
        var mh$ = VSfindattr$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$132.VSattrinfo$MH,"VSattrinfo");
    }
    public static int VSattrinfo ( int vsid,  int findex,  int attrindex,  Addressable name,  Addressable datatype,  Addressable count,  Addressable size) {
        var mh$ = VSattrinfo$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrindex, name, datatype, count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$133.VSgetattr$MH,"VSgetattr");
    }
    public static int VSgetattr ( int vsid,  int findex,  int attrindex,  Addressable values) {
        var mh$ = VSgetattr$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSisattr$MH() {
        return RuntimeHelper.requireNonNull(constants$133.VSisattr$MH,"VSisattr");
    }
    public static int VSisattr ( int vsid) {
        var mh$ = VSisattr$MH();
        try {
            return (int)mh$.invokeExact(vsid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vicheckcompat$MH() {
        return RuntimeHelper.requireNonNull(constants$133.vicheckcompat$MH,"vicheckcompat");
    }
    public static int vicheckcompat ( int f) {
        var mh$ = vicheckcompat$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vimakecompat$MH() {
        return RuntimeHelper.requireNonNull(constants$133.vimakecompat$MH,"vimakecompat");
    }
    public static int vimakecompat ( int f) {
        var mh$ = vimakecompat$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vcheckcompat$MH() {
        return RuntimeHelper.requireNonNull(constants$133.vcheckcompat$MH,"vcheckcompat");
    }
    public static int vcheckcompat ( Addressable fs) {
        var mh$ = vcheckcompat$MH();
        try {
            return (int)mh$.invokeExact(fs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vmakecompat$MH() {
        return RuntimeHelper.requireNonNull(constants$133.vmakecompat$MH,"vmakecompat");
    }
    public static int vmakecompat ( Addressable fs) {
        var mh$ = vmakecompat$MH();
        try {
            return (int)mh$.invokeExact(fs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSelts$MH() {
        return RuntimeHelper.requireNonNull(constants$134.VSelts$MH,"VSelts");
    }
    public static int VSelts ( int vkey) {
        var mh$ = VSelts$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetinterlace$MH() {
        return RuntimeHelper.requireNonNull(constants$134.VSgetinterlace$MH,"VSgetinterlace");
    }
    public static int VSgetinterlace ( int vkey) {
        var mh$ = VSgetinterlace$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetinterlace$MH() {
        return RuntimeHelper.requireNonNull(constants$134.VSsetinterlace$MH,"VSsetinterlace");
    }
    public static int VSsetinterlace ( int vkey,  int interlace) {
        var mh$ = VSsetinterlace$MH();
        try {
            return (int)mh$.invokeExact(vkey, interlace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetfields$MH() {
        return RuntimeHelper.requireNonNull(constants$134.VSgetfields$MH,"VSgetfields");
    }
    public static int VSgetfields ( int vkey,  Addressable fields) {
        var mh$ = VSgetfields$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfexist$MH() {
        return RuntimeHelper.requireNonNull(constants$134.VSfexist$MH,"VSfexist");
    }
    public static int VSfexist ( int vkey,  Addressable fields) {
        var mh$ = VSfexist$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsizeof$MH() {
        return RuntimeHelper.requireNonNull(constants$134.VSsizeof$MH,"VSsizeof");
    }
    public static int VSsizeof ( int vkey,  Addressable fields) {
        var mh$ = VSsizeof$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSdump$MH() {
        return RuntimeHelper.requireNonNull(constants$135.VSdump$MH,"VSdump");
    }
    public static void VSdump ( int vkey) {
        var mh$ = VSdump$MH();
        try {
            mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetname$MH() {
        return RuntimeHelper.requireNonNull(constants$135.VSsetname$MH,"VSsetname");
    }
    public static int VSsetname ( int vkey,  Addressable vsname) {
        var mh$ = VSsetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$135.VSsetclass$MH,"VSsetclass");
    }
    public static int VSsetclass ( int vkey,  Addressable vsclass) {
        var mh$ = VSsetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetname$MH() {
        return RuntimeHelper.requireNonNull(constants$135.VSgetname$MH,"VSgetname");
    }
    public static int VSgetname ( int vkey,  Addressable vsname) {
        var mh$ = VSgetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$135.VSgetclass$MH,"VSgetclass");
    }
    public static int VSgetclass ( int vkey,  Addressable vsclass) {
        var mh$ = VSgetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$135.VSinquire$MH,"VSinquire");
    }
    public static int VSinquire ( int vkey,  Addressable nelt,  Addressable interlace,  Addressable fields,  Addressable eltsize,  Addressable vsname) {
        var mh$ = VSinquire$MH();
        try {
            return (int)mh$.invokeExact(vkey, nelt, interlace, fields, eltsize, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSisinternal$MH() {
        return RuntimeHelper.requireNonNull(constants$136.VSisinternal$MH,"VSisinternal");
    }
    public static int VSisinternal ( Addressable vsclass) {
        var mh$ = VSisinternal$MH();
        try {
            return (int)mh$.invokeExact(vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSlone$MH() {
        return RuntimeHelper.requireNonNull(constants$136.VSlone$MH,"VSlone");
    }
    public static int VSlone ( int f,  Addressable idarray,  int asize) {
        var mh$ = VSlone$MH();
        try {
            return (int)mh$.invokeExact(f, idarray, asize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vlone$MH() {
        return RuntimeHelper.requireNonNull(constants$136.Vlone$MH,"Vlone");
    }
    public static int Vlone ( int f,  Addressable idarray,  int asize) {
        var mh$ = Vlone$MH();
        try {
            return (int)mh$.invokeExact(f, idarray, asize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfind$MH() {
        return RuntimeHelper.requireNonNull(constants$136.Vfind$MH,"Vfind");
    }
    public static int Vfind ( int f,  Addressable vgname) {
        var mh$ = Vfind$MH();
        try {
            return (int)mh$.invokeExact(f, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfind$MH() {
        return RuntimeHelper.requireNonNull(constants$136.VSfind$MH,"VSfind");
    }
    public static int VSfind ( int f,  Addressable vsname) {
        var mh$ = VSfind$MH();
        try {
            return (int)mh$.invokeExact(f, vsname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfindclass$MH() {
        return RuntimeHelper.requireNonNull(constants$136.Vfindclass$MH,"Vfindclass");
    }
    public static int Vfindclass ( int f,  Addressable vgclass) {
        var mh$ = Vfindclass$MH();
        try {
            return (int)mh$.invokeExact(f, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfindclass$MH() {
        return RuntimeHelper.requireNonNull(constants$137.VSfindclass$MH,"VSfindclass");
    }
    public static int VSfindclass ( int f,  Addressable vsclass) {
        var mh$ = VSfindclass$MH();
        try {
            return (int)mh$.invokeExact(f, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSofclass$MH() {
        return RuntimeHelper.requireNonNull(constants$137.VSofclass$MH,"VSofclass");
    }
    public static int VSofclass ( int id,  Addressable vsclass,  int start_vd,  int array_size,  Addressable refarray) {
        var mh$ = VSofclass$MH();
        try {
            return (int)mh$.invokeExact(id, vsclass, start_vd, array_size, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetvdatas$MH() {
        return RuntimeHelper.requireNonNull(constants$137.VSgetvdatas$MH,"VSgetvdatas");
    }
    public static int VSgetvdatas ( int id,  int start_vd,  int array_size,  Addressable refarray) {
        var mh$ = VSgetvdatas$MH();
        try {
            return (int)mh$.invokeExact(id, start_vd, array_size, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetblocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$137.VSsetblocksize$MH,"VSsetblocksize");
    }
    public static int VSsetblocksize ( int vkey,  int block_size) {
        var mh$ = VSsetblocksize$MH();
        try {
            return (int)mh$.invokeExact(vkey, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetnumblocks$MH() {
        return RuntimeHelper.requireNonNull(constants$137.VSsetnumblocks$MH,"VSsetnumblocks");
    }
    public static int VSsetnumblocks ( int vkey,  int num_blocks) {
        var mh$ = VSsetnumblocks$MH();
        try {
            return (int)mh$.invokeExact(vkey, num_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetblockinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$137.VSgetblockinfo$MH,"VSgetblockinfo");
    }
    public static int VSgetblockinfo ( int vkey,  Addressable block_size,  Addressable num_blocks) {
        var mh$ = VSgetblockinfo$MH();
        try {
            return (int)mh$.invokeExact(vkey, block_size, num_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetzap$MH() {
        return RuntimeHelper.requireNonNull(constants$138.Vsetzap$MH,"Vsetzap");
    }
    public static void Vsetzap () {
        var mh$ = Vsetzap$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vcompare$MH() {
        return RuntimeHelper.requireNonNull(constants$138.vcompare$MH,"vcompare");
    }
    public static int vcompare ( Addressable k1,  Addressable k2,  int cmparg) {
        var mh$ = vcompare$MH();
        try {
            return (int)mh$.invokeExact(k1, k2, cmparg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vcompareref$MH() {
        return RuntimeHelper.requireNonNull(constants$138.vcompareref$MH,"vcompareref");
    }
    public static int vcompareref ( Addressable k1,  Addressable k2,  int cmparg) {
        var mh$ = vcompareref$MH();
        try {
            return (int)mh$.invokeExact(k1, k2, cmparg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdestroynode$MH() {
        return RuntimeHelper.requireNonNull(constants$138.vdestroynode$MH,"vdestroynode");
    }
    public static void vdestroynode ( Addressable n) {
        var mh$ = vdestroynode$MH();
        try {
            mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vtfreekey$MH() {
        return RuntimeHelper.requireNonNull(constants$138.vtfreekey$MH,"vtfreekey");
    }
    public static void vtfreekey ( Addressable k) {
        var mh$ = vtfreekey$MH();
        try {
            mh$.invokeExact(k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$138.Vinitialize$MH,"Vinitialize");
    }
    public static int Vinitialize ( int f) {
        var mh$ = Vinitialize$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfinish$MH() {
        return RuntimeHelper.requireNonNull(constants$139.Vfinish$MH,"Vfinish");
    }
    public static int Vfinish ( int f) {
        var mh$ = Vfinish$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vopen$MH() {
        return RuntimeHelper.requireNonNull(constants$139.Vopen$MH,"Vopen");
    }
    public static int Vopen ( Addressable path,  int acc_mode,  short ndds) {
        var mh$ = Vopen$MH();
        try {
            return (int)mh$.invokeExact(path, acc_mode, ndds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vclose$MH() {
        return RuntimeHelper.requireNonNull(constants$139.Vclose$MH,"Vclose");
    }
    public static int Vclose ( int f) {
        var mh$ = Vclose$MH();
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vexistvg$MH() {
        return RuntimeHelper.requireNonNull(constants$139.vexistvg$MH,"vexistvg");
    }
    public static int vexistvg ( int f,  short vgid) {
        var mh$ = vexistvg$MH();
        try {
            return (int)mh$.invokeExact(f, vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vattach$MH() {
        return RuntimeHelper.requireNonNull(constants$139.Vattach$MH,"Vattach");
    }
    public static int Vattach ( int f,  int vgid,  Addressable accesstype) {
        var mh$ = Vattach$MH();
        try {
            return (int)mh$.invokeExact(f, vgid, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vdetach$MH() {
        return RuntimeHelper.requireNonNull(constants$139.Vdetach$MH,"Vdetach");
    }
    public static int Vdetach ( int vkey) {
        var mh$ = Vdetach$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinsert$MH() {
        return RuntimeHelper.requireNonNull(constants$140.Vinsert$MH,"Vinsert");
    }
    public static int Vinsert ( int vkey,  int vskey) {
        var mh$ = Vinsert$MH();
        try {
            return (int)mh$.invokeExact(vkey, vskey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vflocate$MH() {
        return RuntimeHelper.requireNonNull(constants$140.Vflocate$MH,"Vflocate");
    }
    public static int Vflocate ( int vkey,  Addressable field) {
        var mh$ = Vflocate$MH();
        try {
            return (int)mh$.invokeExact(vkey, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinqtagref$MH() {
        return RuntimeHelper.requireNonNull(constants$140.Vinqtagref$MH,"Vinqtagref");
    }
    public static int Vinqtagref ( int vkey,  int tag,  int ref) {
        var mh$ = Vinqtagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vntagrefs$MH() {
        return RuntimeHelper.requireNonNull(constants$140.Vntagrefs$MH,"Vntagrefs");
    }
    public static int Vntagrefs ( int vkey) {
        var mh$ = Vntagrefs$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnrefs$MH() {
        return RuntimeHelper.requireNonNull(constants$140.Vnrefs$MH,"Vnrefs");
    }
    public static int Vnrefs ( int vkey,  int tag) {
        var mh$ = Vnrefs$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgettagrefs$MH() {
        return RuntimeHelper.requireNonNull(constants$140.Vgettagrefs$MH,"Vgettagrefs");
    }
    public static int Vgettagrefs ( int vkey,  Addressable tagarray,  Addressable refarray,  int n) {
        var mh$ = Vgettagrefs$MH();
        try {
            return (int)mh$.invokeExact(vkey, tagarray, refarray, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetuservgs$MH() {
        return RuntimeHelper.requireNonNull(constants$141.Vgetuservgs$MH,"Vgetuservgs");
    }
    public static int Vgetuservgs ( int id,  int start_ref,  int n_vgs,  Addressable refarray) {
        var mh$ = Vgetuservgs$MH();
        try {
            return (int)mh$.invokeExact(id, start_ref, n_vgs, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgettagref$MH() {
        return RuntimeHelper.requireNonNull(constants$141.Vgettagref$MH,"Vgettagref");
    }
    public static int Vgettagref ( int vkey,  int which,  Addressable tag,  Addressable ref) {
        var mh$ = Vgettagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, which, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VQueryref$MH() {
        return RuntimeHelper.requireNonNull(constants$141.VQueryref$MH,"VQueryref");
    }
    public static int VQueryref ( int vkey) {
        var mh$ = VQueryref$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VQuerytag$MH() {
        return RuntimeHelper.requireNonNull(constants$141.VQuerytag$MH,"VQuerytag");
    }
    public static int VQuerytag ( int vkey) {
        var mh$ = VQuerytag$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vaddtagref$MH() {
        return RuntimeHelper.requireNonNull(constants$141.Vaddtagref$MH,"Vaddtagref");
    }
    public static int Vaddtagref ( int vkey,  int tag,  int ref) {
        var mh$ = Vaddtagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ventries$MH() {
        return RuntimeHelper.requireNonNull(constants$141.Ventries$MH,"Ventries");
    }
    public static int Ventries ( int f,  int vgid) {
        var mh$ = Ventries$MH();
        try {
            return (int)mh$.invokeExact(f, vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetname$MH() {
        return RuntimeHelper.requireNonNull(constants$142.Vsetname$MH,"Vsetname");
    }
    public static int Vsetname ( int vkey,  Addressable vgname) {
        var mh$ = Vsetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$142.Vsetclass$MH,"Vsetclass");
    }
    public static int Vsetclass ( int vkey,  Addressable vgclass) {
        var mh$ = Vsetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Visvg$MH() {
        return RuntimeHelper.requireNonNull(constants$142.Visvg$MH,"Visvg");
    }
    public static int Visvg ( int vkey,  int id) {
        var mh$ = Visvg$MH();
        try {
            return (int)mh$.invokeExact(vkey, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Visvs$MH() {
        return RuntimeHelper.requireNonNull(constants$142.Visvs$MH,"Visvs");
    }
    public static int Visvs ( int vkey,  int id) {
        var mh$ = Visvs$MH();
        try {
            return (int)mh$.invokeExact(vkey, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetid$MH() {
        return RuntimeHelper.requireNonNull(constants$142.Vgetid$MH,"Vgetid");
    }
    public static int Vgetid ( int f,  int vgid) {
        var mh$ = Vgetid$MH();
        try {
            return (int)mh$.invokeExact(f, vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetnext$MH() {
        return RuntimeHelper.requireNonNull(constants$142.Vgetnext$MH,"Vgetnext");
    }
    public static int Vgetnext ( int vkey,  int id) {
        var mh$ = Vgetnext$MH();
        try {
            return (int)mh$.invokeExact(vkey, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetname$MH() {
        return RuntimeHelper.requireNonNull(constants$143.Vgetname$MH,"Vgetname");
    }
    public static int Vgetname ( int vkey,  Addressable vgname) {
        var mh$ = Vgetname$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetnamelen$MH() {
        return RuntimeHelper.requireNonNull(constants$143.Vgetnamelen$MH,"Vgetnamelen");
    }
    public static int Vgetnamelen ( int vkey,  Addressable name_len) {
        var mh$ = Vgetnamelen$MH();
        try {
            return (int)mh$.invokeExact(vkey, name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetclassnamelen$MH() {
        return RuntimeHelper.requireNonNull(constants$143.Vgetclassnamelen$MH,"Vgetclassnamelen");
    }
    public static int Vgetclassnamelen ( int vkey,  Addressable classname_len) {
        var mh$ = Vgetclassnamelen$MH();
        try {
            return (int)mh$.invokeExact(vkey, classname_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetclass$MH() {
        return RuntimeHelper.requireNonNull(constants$143.Vgetclass$MH,"Vgetclass");
    }
    public static int Vgetclass ( int vkey,  Addressable vgclass) {
        var mh$ = Vgetclass$MH();
        try {
            return (int)mh$.invokeExact(vkey, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$143.Vinquire$MH,"Vinquire");
    }
    public static int Vinquire ( int vkey,  Addressable nentries,  Addressable vgname) {
        var mh$ = Vinquire$MH();
        try {
            return (int)mh$.invokeExact(vkey, nentries, vgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vdelete$MH() {
        return RuntimeHelper.requireNonNull(constants$143.Vdelete$MH,"Vdelete");
    }
    public static int Vdelete ( int f,  int ref) {
        var mh$ = Vdelete$MH();
        try {
            return (int)mh$.invokeExact(f, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgisinternal$MH() {
        return RuntimeHelper.requireNonNull(constants$144.Vgisinternal$MH,"Vgisinternal");
    }
    public static int Vgisinternal ( int vkey) {
        var mh$ = Vgisinternal$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Visinternal$MH() {
        return RuntimeHelper.requireNonNull(constants$144.Visinternal$MH,"Visinternal");
    }
    public static int Visinternal ( Addressable classname) {
        var mh$ = Visinternal$MH();
        try {
            return (int)mh$.invokeExact(classname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetvgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$144.Vgetvgroups$MH,"Vgetvgroups");
    }
    public static int Vgetvgroups ( int id,  int start_vg,  int n_vgs,  Addressable refarray) {
        var mh$ = Vgetvgroups$MH();
        try {
            return (int)mh$.invokeExact(id, start_vg, n_vgs, refarray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vdeletetagref$MH() {
        return RuntimeHelper.requireNonNull(constants$144.Vdeletetagref$MH,"Vdeletetagref");
    }
    public static int Vdeletetagref ( int vkey,  int tag,  int ref) {
        var mh$ = Vdeletetagref$MH();
        try {
            return (int)mh$.invokeExact(vkey, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$144.VPshutdown$MH,"VPshutdown");
    }
    public static int VPshutdown () {
        var mh$ = VPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$144.scanattrs$MH,"scanattrs");
    }
    public static int scanattrs ( Addressable attrs,  Addressable attrc,  Addressable attrv) {
        var mh$ = scanattrs$MH();
        try {
            return (int)mh$.invokeExact(attrs, attrc, attrv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VHstoredata$MH() {
        return RuntimeHelper.requireNonNull(constants$145.VHstoredata$MH,"VHstoredata");
    }
    public static int VHstoredata ( int f,  Addressable field,  Addressable buf,  int n,  int datatype,  Addressable vsname,  Addressable vsclass) {
        var mh$ = VHstoredata$MH();
        try {
            return (int)mh$.invokeExact(f, field, buf, n, datatype, vsname, vsclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VHstoredatam$MH() {
        return RuntimeHelper.requireNonNull(constants$145.VHstoredatam$MH,"VHstoredatam");
    }
    public static int VHstoredatam ( int f,  Addressable field,  Addressable buf,  int n,  int datatype,  Addressable vsname,  Addressable vsclass,  int order) {
        var mh$ = VHstoredatam$MH();
        try {
            return (int)mh$.invokeExact(f, field, buf, n, datatype, vsname, vsclass, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VHmakegroup$MH() {
        return RuntimeHelper.requireNonNull(constants$145.VHmakegroup$MH,"VHmakegroup");
    }
    public static int VHmakegroup ( int f,  Addressable tagarray,  Addressable refarray,  int n,  Addressable vgname,  Addressable vgclass) {
        var mh$ = VHmakegroup$MH();
        try {
            return (int)mh$.invokeExact(f, tagarray, refarray, n, vgname, vgclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSPhshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$145.VSPhshutdown$MH,"VSPhshutdown");
    }
    public static int VSPhshutdown () {
        var mh$ = VSPhshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vexistvs$MH() {
        return RuntimeHelper.requireNonNull(constants$145.vexistvs$MH,"vexistvs");
    }
    public static int vexistvs ( int f,  short vsref) {
        var mh$ = vexistvs$MH();
        try {
            return (int)mh$.invokeExact(f, vsref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsdestroynode$MH() {
        return RuntimeHelper.requireNonNull(constants$145.vsdestroynode$MH,"vsdestroynode");
    }
    public static void vsdestroynode ( Addressable n) {
        var mh$ = vsdestroynode$MH();
        try {
            mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfdestroynode$MH() {
        return RuntimeHelper.requireNonNull(constants$146.vfdestroynode$MH,"vfdestroynode");
    }
    public static void vfdestroynode ( Addressable n) {
        var mh$ = vfdestroynode$MH();
        try {
            mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSattach$MH() {
        return RuntimeHelper.requireNonNull(constants$146.VSattach$MH,"VSattach");
    }
    public static int VSattach ( int f,  int vsref,  Addressable accesstype) {
        var mh$ = VSattach$MH();
        try {
            return (int)mh$.invokeExact(f, vsref, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSdetach$MH() {
        return RuntimeHelper.requireNonNull(constants$146.VSdetach$MH,"VSdetach");
    }
    public static int VSdetach ( int vkey) {
        var mh$ = VSdetach$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSQuerytag$MH() {
        return RuntimeHelper.requireNonNull(constants$146.VSQuerytag$MH,"VSQuerytag");
    }
    public static int VSQuerytag ( int vkey) {
        var mh$ = VSQuerytag$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSQueryref$MH() {
        return RuntimeHelper.requireNonNull(constants$146.VSQueryref$MH,"VSQueryref");
    }
    public static int VSQueryref ( int vkey) {
        var mh$ = VSQueryref$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetid$MH() {
        return RuntimeHelper.requireNonNull(constants$146.VSgetid$MH,"VSgetid");
    }
    public static int VSgetid ( int f,  int vsref) {
        var mh$ = VSgetid$MH();
        try {
            return (int)mh$.invokeExact(f, vsref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetversion$MH() {
        return RuntimeHelper.requireNonNull(constants$147.VSgetversion$MH,"VSgetversion");
    }
    public static int VSgetversion ( int vkey) {
        var mh$ = VSgetversion$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSdelete$MH() {
        return RuntimeHelper.requireNonNull(constants$147.VSdelete$MH,"VSdelete");
    }
    public static int VSdelete ( int f,  int ref) {
        var mh$ = VSdelete$MH();
        try {
            return (int)mh$.invokeExact(f, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSappendable$MH() {
        return RuntimeHelper.requireNonNull(constants$147.VSappendable$MH,"VSappendable");
    }
    public static int VSappendable ( int vkey,  int blk) {
        var mh$ = VSappendable$MH();
        try {
            return (int)mh$.invokeExact(vkey, blk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetfields$MH() {
        return RuntimeHelper.requireNonNull(constants$147.VSsetfields$MH,"VSsetfields");
    }
    public static int VSsetfields ( int vkey,  Addressable fields) {
        var mh$ = VSsetfields$MH();
        try {
            return (int)mh$.invokeExact(vkey, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfdefine$MH() {
        return RuntimeHelper.requireNonNull(constants$147.VSfdefine$MH,"VSfdefine");
    }
    public static int VSfdefine ( int vkey,  Addressable field,  int localtype,  int order) {
        var mh$ = VSfdefine$MH();
        try {
            return (int)mh$.invokeExact(vkey, field, localtype, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFnfields$MH() {
        return RuntimeHelper.requireNonNull(constants$147.VFnfields$MH,"VFnfields");
    }
    public static int VFnfields ( int vkey) {
        var mh$ = VFnfields$MH();
        try {
            return (int)mh$.invokeExact(vkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldname$MH() {
        return RuntimeHelper.requireNonNull(constants$148.VFfieldname$MH,"VFfieldname");
    }
    public static MemoryAddress VFfieldname ( int vkey,  int idx) {
        var mh$ = VFfieldname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldtype$MH() {
        return RuntimeHelper.requireNonNull(constants$148.VFfieldtype$MH,"VFfieldtype");
    }
    public static int VFfieldtype ( int vkey,  int idx) {
        var mh$ = VFfieldtype$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldisize$MH() {
        return RuntimeHelper.requireNonNull(constants$148.VFfieldisize$MH,"VFfieldisize");
    }
    public static int VFfieldisize ( int vkey,  int idx) {
        var mh$ = VFfieldisize$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldesize$MH() {
        return RuntimeHelper.requireNonNull(constants$148.VFfieldesize$MH,"VFfieldesize");
    }
    public static int VFfieldesize ( int vkey,  int idx) {
        var mh$ = VFfieldesize$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VFfieldorder$MH() {
        return RuntimeHelper.requireNonNull(constants$148.VFfieldorder$MH,"VFfieldorder");
    }
    public static int VFfieldorder ( int vkey,  int idx) {
        var mh$ = VFfieldorder$MH();
        try {
            return (int)mh$.invokeExact(vkey, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$148.VSsetexternalfile$MH,"VSsetexternalfile");
    }
    public static int VSsetexternalfile ( int vkey,  Addressable filename,  int offset) {
        var mh$ = VSsetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(vkey, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$149.VSgetexternalfile$MH,"VSgetexternalfile");
    }
    public static int VSgetexternalfile ( int vkey,  int name_len,  Addressable filename,  Addressable offset) {
        var mh$ = VSgetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(vkey, name_len, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetexternalinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$149.VSgetexternalinfo$MH,"VSgetexternalinfo");
    }
    public static int VSgetexternalinfo ( int vkey,  int name_len,  Addressable filename,  Addressable offset,  Addressable length) {
        var mh$ = VSgetexternalinfo$MH();
        try {
            return (int)mh$.invokeExact(vkey, name_len, filename, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfpack$MH() {
        return RuntimeHelper.requireNonNull(constants$149.VSfpack$MH,"VSfpack");
    }
    public static int VSfpack ( int vsid,  int packtype,  Addressable fields_in_buf,  Addressable buf,  int bufsz,  int n_records,  Addressable fields,  Addressable fldbufpt) {
        var mh$ = VSfpack$MH();
        try {
            return (int)mh$.invokeExact(vsid, packtype, fields_in_buf, buf, bufsz, n_records, fields, fldbufpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$149.VSPshutdown$MH,"VSPshutdown");
    }
    public static int VSPshutdown () {
        var mh$ = VSPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSseek$MH() {
        return RuntimeHelper.requireNonNull(constants$149.VSseek$MH,"VSseek");
    }
    public static int VSseek ( int vkey,  int eltpos) {
        var mh$ = VSseek$MH();
        try {
            return (int)mh$.invokeExact(vkey, eltpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSread$MH() {
        return RuntimeHelper.requireNonNull(constants$149.VSread$MH,"VSread");
    }
    public static int VSread ( int vkey,  Addressable buf,  int nelt,  int interlace) {
        var mh$ = VSread$MH();
        try {
            return (int)mh$.invokeExact(vkey, buf, nelt, interlace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$150.VSwrite$MH,"VSwrite");
    }
    public static int VSwrite ( int vkey,  Addressable buf,  int nelt,  int interlace) {
        var mh$ = VSwrite$MH();
        try {
            return (int)mh$.invokeExact(vkey, buf, nelt, interlace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ANgetdatainfo$MH,"ANgetdatainfo");
    }
    public static int ANgetdatainfo ( int ann_id,  Addressable offset,  Addressable length) {
        var mh$ = ANgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(ann_id, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$150.HDgetdatainfo$MH,"HDgetdatainfo");
    }
    public static int HDgetdatainfo ( int file_id,  short data_tag,  short data_ref,  Addressable chk_coord,  int start_block,  int info_count,  Addressable offsetarray,  Addressable lengtharray) {
        var mh$ = HDgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(file_id, data_tag, data_ref, chk_coord, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$150.VSgetdatainfo$MH,"VSgetdatainfo");
    }
    public static int VSgetdatainfo ( int vsid,  int start_block,  int info_count,  Addressable offsetarray,  Addressable lengtharray) {
        var mh$ = VSgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(vsid, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$150.VSgetattdatainfo$MH,"VSgetattdatainfo");
    }
    public static int VSgetattdatainfo ( int vsid,  int findex,  int attrindex,  Addressable offset,  Addressable length) {
        var mh$ = VSgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$150.Vgetattdatainfo$MH,"Vgetattdatainfo");
    }
    public static int Vgetattdatainfo ( int vgid,  int attrindex,  Addressable offset,  Addressable length) {
        var mh$ = Vgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$151.GRgetdatainfo$MH,"GRgetdatainfo");
    }
    public static int GRgetdatainfo ( int riid,  int start_block,  int info_count,  Addressable offsetarray,  Addressable lengtharray) {
        var mh$ = GRgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(riid, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$151.GRgetattdatainfo$MH,"GRgetattdatainfo");
    }
    public static int GRgetattdatainfo ( int id,  int attrindex,  Addressable offset,  Addressable length) {
        var mh$ = GRgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(id, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetpalinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$151.GRgetpalinfo$MH,"GRgetpalinfo");
    }
    public static int GRgetpalinfo ( int gr_id,  int pal_count,  Addressable palinfo_array) {
        var mh$ = GRgetpalinfo$MH();
        try {
            return (int)mh$.invokeExact(gr_id, pal_count, palinfo_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort gr_interlace_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt nc_type = Constants$root.C_INT$LAYOUT;
    public static OfInt nclong = Constants$root.C_INT$LAYOUT;
    public static MemoryLayout sd_ncerr$LAYOUT() {
        return constants$151.sd_ncerr$LAYOUT;
    }
    public static VarHandle sd_ncerr$VH() {
        return constants$151.sd_ncerr$VH;
    }
    public static MemorySegment sd_ncerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$151.sd_ncerr$SEGMENT,"sd_ncerr");
    }
    public static int sd_ncerr$get() {
        return (int) constants$151.sd_ncerr$VH.get(RuntimeHelper.requireNonNull(constants$151.sd_ncerr$SEGMENT, "sd_ncerr"));
    }
    public static void sd_ncerr$set( int x) {
        constants$151.sd_ncerr$VH.set(RuntimeHelper.requireNonNull(constants$151.sd_ncerr$SEGMENT, "sd_ncerr"), x);
    }
    public static MemoryLayout sd_ncopts$LAYOUT() {
        return constants$151.sd_ncopts$LAYOUT;
    }
    public static VarHandle sd_ncopts$VH() {
        return constants$151.sd_ncopts$VH;
    }
    public static MemorySegment sd_ncopts$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$151.sd_ncopts$SEGMENT,"sd_ncopts");
    }
    public static int sd_ncopts$get() {
        return (int) constants$151.sd_ncopts$VH.get(RuntimeHelper.requireNonNull(constants$151.sd_ncopts$SEGMENT, "sd_ncopts"));
    }
    public static void sd_ncopts$set( int x) {
        constants$151.sd_ncopts$VH.set(RuntimeHelper.requireNonNull(constants$151.sd_ncopts$SEGMENT, "sd_ncopts"), x);
    }
    public static MethodHandle sd_nccreate$MH() {
        return RuntimeHelper.requireNonNull(constants$151.sd_nccreate$MH,"sd_nccreate");
    }
    public static int sd_nccreate ( Addressable path,  int cmode) {
        var mh$ = sd_nccreate$MH();
        try {
            return (int)mh$.invokeExact(path, cmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncopen$MH() {
        return RuntimeHelper.requireNonNull(constants$152.sd_ncopen$MH,"sd_ncopen");
    }
    public static int sd_ncopen ( Addressable path,  int mode) {
        var mh$ = sd_ncopen$MH();
        try {
            return (int)mh$.invokeExact(path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncredef$MH() {
        return RuntimeHelper.requireNonNull(constants$152.sd_ncredef$MH,"sd_ncredef");
    }
    public static int sd_ncredef ( int cdfid) {
        var mh$ = sd_ncredef$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncendef$MH() {
        return RuntimeHelper.requireNonNull(constants$152.sd_ncendef$MH,"sd_ncendef");
    }
    public static int sd_ncendef ( int cdfid) {
        var mh$ = sd_ncendef$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncclose$MH() {
        return RuntimeHelper.requireNonNull(constants$152.sd_ncclose$MH,"sd_ncclose");
    }
    public static int sd_ncclose ( int cdfid) {
        var mh$ = sd_ncclose$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$152.sd_ncinquire$MH,"sd_ncinquire");
    }
    public static int sd_ncinquire ( int cdfid,  Addressable ndims,  Addressable nvars,  Addressable natts,  Addressable recdim) {
        var mh$ = sd_ncinquire$MH();
        try {
            return (int)mh$.invokeExact(cdfid, ndims, nvars, natts, recdim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncsync$MH() {
        return RuntimeHelper.requireNonNull(constants$152.sd_ncsync$MH,"sd_ncsync");
    }
    public static int sd_ncsync ( int cdfid) {
        var mh$ = sd_ncsync$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncabort$MH() {
        return RuntimeHelper.requireNonNull(constants$153.sd_ncabort$MH,"sd_ncabort");
    }
    public static int sd_ncabort ( int cdfid) {
        var mh$ = sd_ncabort$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncnobuf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.sd_ncnobuf$MH,"sd_ncnobuf");
    }
    public static int sd_ncnobuf ( int cdfid) {
        var mh$ = sd_ncnobuf$MH();
        try {
            return (int)mh$.invokeExact(cdfid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdimdef$MH() {
        return RuntimeHelper.requireNonNull(constants$153.sd_ncdimdef$MH,"sd_ncdimdef");
    }
    public static int sd_ncdimdef ( int cdfid,  Addressable name,  long length) {
        var mh$ = sd_ncdimdef$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdimid$MH() {
        return RuntimeHelper.requireNonNull(constants$153.sd_ncdimid$MH,"sd_ncdimid");
    }
    public static int sd_ncdimid ( int cdfid,  Addressable name) {
        var mh$ = sd_ncdimid$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdiminq$MH() {
        return RuntimeHelper.requireNonNull(constants$153.sd_ncdiminq$MH,"sd_ncdiminq");
    }
    public static int sd_ncdiminq ( int cdfid,  int dimid,  Addressable name,  Addressable length) {
        var mh$ = sd_ncdiminq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, dimid, name, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncdimrename$MH() {
        return RuntimeHelper.requireNonNull(constants$153.sd_ncdimrename$MH,"sd_ncdimrename");
    }
    public static int sd_ncdimrename ( int cdfid,  int dimid,  Addressable name) {
        var mh$ = sd_ncdimrename$MH();
        try {
            return (int)mh$.invokeExact(cdfid, dimid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvardef$MH() {
        return RuntimeHelper.requireNonNull(constants$154.sd_ncvardef$MH,"sd_ncvardef");
    }
    public static int sd_ncvardef ( int cdfid,  Addressable name,  int datatype,  int ndims,  Addressable dim) {
        var mh$ = sd_ncvardef$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name, datatype, ndims, dim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarid$MH() {
        return RuntimeHelper.requireNonNull(constants$154.sd_ncvarid$MH,"sd_ncvarid");
    }
    public static int sd_ncvarid ( int cdfid,  Addressable name) {
        var mh$ = sd_ncvarid$MH();
        try {
            return (int)mh$.invokeExact(cdfid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarinq$MH() {
        return RuntimeHelper.requireNonNull(constants$154.sd_ncvarinq$MH,"sd_ncvarinq");
    }
    public static int sd_ncvarinq ( int cdfid,  int varid,  Addressable name,  Addressable datatype,  Addressable ndims,  Addressable dim,  Addressable natts) {
        var mh$ = sd_ncvarinq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, datatype, ndims, dim, natts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarput1$MH() {
        return RuntimeHelper.requireNonNull(constants$154.sd_ncvarput1$MH,"sd_ncvarput1");
    }
    public static int sd_ncvarput1 ( int cdfid,  int varid,  Addressable coords,  Addressable value) {
        var mh$ = sd_ncvarput1$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, coords, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarget1$MH() {
        return RuntimeHelper.requireNonNull(constants$154.sd_ncvarget1$MH,"sd_ncvarget1");
    }
    public static int sd_ncvarget1 ( int cdfid,  int varid,  Addressable coords,  Addressable value) {
        var mh$ = sd_ncvarget1$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, coords, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarput$MH() {
        return RuntimeHelper.requireNonNull(constants$154.sd_ncvarput$MH,"sd_ncvarput");
    }
    public static int sd_ncvarput ( int cdfid,  int varid,  Addressable start,  Addressable count,  Addressable value) {
        var mh$ = sd_ncvarput$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarget$MH() {
        return RuntimeHelper.requireNonNull(constants$155.sd_ncvarget$MH,"sd_ncvarget");
    }
    public static int sd_ncvarget ( int cdfid,  int varid,  Addressable start,  Addressable count,  Addressable value) {
        var mh$ = sd_ncvarget$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarputs$MH() {
        return RuntimeHelper.requireNonNull(constants$155.sd_ncvarputs$MH,"sd_ncvarputs");
    }
    public static int sd_ncvarputs ( int cdfid,  int varid,  Addressable start,  Addressable count,  Addressable stride,  Addressable values) {
        var mh$ = sd_ncvarputs$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvargets$MH() {
        return RuntimeHelper.requireNonNull(constants$155.sd_ncvargets$MH,"sd_ncvargets");
    }
    public static int sd_ncvargets ( int cdfid,  int varid,  Addressable start,  Addressable count,  Addressable stride,  Addressable values) {
        var mh$ = sd_ncvargets$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarputg$MH() {
        return RuntimeHelper.requireNonNull(constants$155.sd_ncvarputg$MH,"sd_ncvarputg");
    }
    public static int sd_ncvarputg ( int cdfid,  int varid,  Addressable start,  Addressable count,  Addressable stride,  Addressable imap,  Addressable values) {
        var mh$ = sd_ncvarputg$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, imap, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvargetg$MH() {
        return RuntimeHelper.requireNonNull(constants$155.sd_ncvargetg$MH,"sd_ncvargetg");
    }
    public static int sd_ncvargetg ( int cdfid,  int varid,  Addressable start,  Addressable count,  Addressable stride,  Addressable imap,  Addressable values) {
        var mh$ = sd_ncvargetg$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, start, count, stride, imap, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncvarrename$MH() {
        return RuntimeHelper.requireNonNull(constants$155.sd_ncvarrename$MH,"sd_ncvarrename");
    }
    public static int sd_ncvarrename ( int cdfid,  int varid,  Addressable name) {
        var mh$ = sd_ncvarrename$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattput$MH() {
        return RuntimeHelper.requireNonNull(constants$156.sd_ncattput$MH,"sd_ncattput");
    }
    public static int sd_ncattput ( int cdfid,  int varid,  Addressable name,  int datatype,  int len,  Addressable value) {
        var mh$ = sd_ncattput$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, datatype, len, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattinq$MH() {
        return RuntimeHelper.requireNonNull(constants$156.sd_ncattinq$MH,"sd_ncattinq");
    }
    public static int sd_ncattinq ( int cdfid,  int varid,  Addressable name,  Addressable datatype,  Addressable len) {
        var mh$ = sd_ncattinq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, datatype, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattget$MH() {
        return RuntimeHelper.requireNonNull(constants$156.sd_ncattget$MH,"sd_ncattget");
    }
    public static int sd_ncattget ( int cdfid,  int varid,  Addressable name,  Addressable value) {
        var mh$ = sd_ncattget$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$156.sd_ncattcopy$MH,"sd_ncattcopy");
    }
    public static int sd_ncattcopy ( int incdf,  int invar,  Addressable name,  int outcdf,  int outvar) {
        var mh$ = sd_ncattcopy$MH();
        try {
            return (int)mh$.invokeExact(incdf, invar, name, outcdf, outvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattname$MH() {
        return RuntimeHelper.requireNonNull(constants$156.sd_ncattname$MH,"sd_ncattname");
    }
    public static int sd_ncattname ( int cdfid,  int varid,  int attnum,  Addressable name) {
        var mh$ = sd_ncattname$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, attnum, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattrename$MH() {
        return RuntimeHelper.requireNonNull(constants$156.sd_ncattrename$MH,"sd_ncattrename");
    }
    public static int sd_ncattrename ( int cdfid,  int varid,  Addressable name,  Addressable newname) {
        var mh$ = sd_ncattrename$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name, newname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncattdel$MH() {
        return RuntimeHelper.requireNonNull(constants$157.sd_ncattdel$MH,"sd_ncattdel");
    }
    public static int sd_ncattdel ( int cdfid,  int varid,  Addressable name) {
        var mh$ = sd_ncattdel$MH();
        try {
            return (int)mh$.invokeExact(cdfid, varid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_nctypelen$MH() {
        return RuntimeHelper.requireNonNull(constants$157.sd_nctypelen$MH,"sd_nctypelen");
    }
    public static int sd_nctypelen ( int datatype) {
        var mh$ = sd_nctypelen$MH();
        try {
            return (int)mh$.invokeExact(datatype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncsetfill$MH() {
        return RuntimeHelper.requireNonNull(constants$157.sd_ncsetfill$MH,"sd_ncsetfill");
    }
    public static int sd_ncsetfill ( int cdfid,  int fillmode) {
        var mh$ = sd_ncsetfill$MH();
        try {
            return (int)mh$.invokeExact(cdfid, fillmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncrecinq$MH() {
        return RuntimeHelper.requireNonNull(constants$157.sd_ncrecinq$MH,"sd_ncrecinq");
    }
    public static int sd_ncrecinq ( int cdfid,  Addressable nrecvars,  Addressable recvarids,  Addressable recsizes) {
        var mh$ = sd_ncrecinq$MH();
        try {
            return (int)mh$.invokeExact(cdfid, nrecvars, recvarids, recsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncrecget$MH() {
        return RuntimeHelper.requireNonNull(constants$157.sd_ncrecget$MH,"sd_ncrecget");
    }
    public static int sd_ncrecget ( int cdfid,  long recnum,  Addressable datap) {
        var mh$ = sd_ncrecget$MH();
        try {
            return (int)mh$.invokeExact(cdfid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sd_ncrecput$MH() {
        return RuntimeHelper.requireNonNull(constants$157.sd_ncrecput$MH,"sd_ncrecput");
    }
    public static int sd_ncrecput ( int cdfid,  long recnum,  Addressable datap) {
        var mh$ = sd_ncrecput$MH();
        try {
            return (int)mh$.invokeExact(cdfid, recnum, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int IS_SDSVAR() {
        return (int)0L;
    }
    public static int IS_CRDVAR() {
        return (int)1L;
    }
    public static int UNKNOWN() {
        return (int)2L;
    }
    public static MethodHandle SDgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SDgetdatainfo$MH,"SDgetdatainfo");
    }
    public static int SDgetdatainfo ( int sdsid,  Addressable chk_coord,  int start_block,  int info_count,  Addressable offsetarray,  Addressable lengtharray) {
        var mh$ = SDgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, chk_coord, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SDgetattdatainfo$MH,"SDgetattdatainfo");
    }
    public static int SDgetattdatainfo ( int id,  int attrindex,  Addressable offset,  Addressable length) {
        var mh$ = SDgetattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(id, attrindex, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetoldattdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SDgetoldattdatainfo$MH,"SDgetoldattdatainfo");
    }
    public static int SDgetoldattdatainfo ( int dimid,  int sdsid,  Addressable attr_name,  Addressable offset,  Addressable length) {
        var mh$ = SDgetoldattdatainfo$MH();
        try {
            return (int)mh$.invokeExact(dimid, sdsid, attr_name, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetanndatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SDgetanndatainfo$MH,"SDgetanndatainfo");
    }
    public static int SDgetanndatainfo ( int sdsid,  int annot_type,  int size,  Addressable offsetarray,  Addressable lengtharray) {
        var mh$ = SDgetanndatainfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, annot_type, size, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int NOT_SDAPI_ID() {
        return (int)-1L;
    }
    public static int SD_ID() {
        return (int)0L;
    }
    public static int SDS_ID() {
        return (int)1L;
    }
    public static int DIM_ID() {
        return (int)2L;
    }
    public static MethodHandle SDstart$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SDstart$MH,"SDstart");
    }
    public static int SDstart ( Addressable name,  int accs) {
        var mh$ = SDstart$MH();
        try {
            return (int)mh$.invokeExact(name, accs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDend$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SDend$MH,"SDend");
    }
    public static int SDend ( int fid) {
        var mh$ = SDend$MH();
        try {
            return (int)mh$.invokeExact(fid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDfileinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$159.SDfileinfo$MH,"SDfileinfo");
    }
    public static int SDfileinfo ( int fid,  Addressable datasets,  Addressable attrs) {
        var mh$ = SDfileinfo$MH();
        try {
            return (int)mh$.invokeExact(fid, datasets, attrs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDselect$MH() {
        return RuntimeHelper.requireNonNull(constants$159.SDselect$MH,"SDselect");
    }
    public static int SDselect ( int fid,  int idx) {
        var mh$ = SDselect$MH();
        try {
            return (int)mh$.invokeExact(fid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$159.SDgetinfo$MH,"SDgetinfo");
    }
    public static int SDgetinfo ( int sdsid,  Addressable name,  Addressable rank,  Addressable dimsizes,  Addressable nt,  Addressable nattr) {
        var mh$ = SDgetinfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, name, rank, dimsizes, nt, nattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreaddata$MH() {
        return RuntimeHelper.requireNonNull(constants$159.SDreaddata$MH,"SDreaddata");
    }
    public static int SDreaddata ( int sdsid,  Addressable start,  Addressable stride,  Addressable end,  Addressable data) {
        var mh$ = SDreaddata$MH();
        try {
            return (int)mh$.invokeExact(sdsid, start, stride, end, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgerefnumber$MH() {
        return RuntimeHelper.requireNonNull(constants$159.SDgerefnumber$MH,"SDgerefnumber");
    }
    public static short SDgerefnumber ( int sdsid) {
        var mh$ = SDgerefnumber$MH();
        try {
            return (short)mh$.invokeExact(sdsid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDnametoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$159.SDnametoindex$MH,"SDnametoindex");
    }
    public static int SDnametoindex ( int fid,  Addressable name) {
        var mh$ = SDnametoindex$MH();
        try {
            return (int)mh$.invokeExact(fid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDnametoindices$MH() {
        return RuntimeHelper.requireNonNull(constants$160.SDnametoindices$MH,"SDnametoindices");
    }
    public static int SDnametoindices ( int fid,  Addressable name,  Addressable var_list) {
        var mh$ = SDnametoindices$MH();
        try {
            return (int)mh$.invokeExact(fid, name, var_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetnumvars_byname$MH() {
        return RuntimeHelper.requireNonNull(constants$160.SDgetnumvars_byname$MH,"SDgetnumvars_byname");
    }
    public static int SDgetnumvars_byname ( int fid,  Addressable name,  Addressable n_vars) {
        var mh$ = SDgetnumvars_byname$MH();
        try {
            return (int)mh$.invokeExact(fid, name, n_vars);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetrange$MH() {
        return RuntimeHelper.requireNonNull(constants$160.SDgetrange$MH,"SDgetrange");
    }
    public static int SDgetrange ( int sdsid,  Addressable pmax,  Addressable pmin) {
        var mh$ = SDgetrange$MH();
        try {
            return (int)mh$.invokeExact(sdsid, pmax, pmin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$160.SDcreate$MH,"SDcreate");
    }
    public static int SDcreate ( int fid,  Addressable name,  int nt,  int rank,  Addressable dimsizes) {
        var mh$ = SDcreate$MH();
        try {
            return (int)mh$.invokeExact(fid, name, nt, rank, dimsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdimid$MH() {
        return RuntimeHelper.requireNonNull(constants$160.SDgetdimid$MH,"SDgetdimid");
    }
    public static int SDgetdimid ( int sdsid,  int number) {
        var mh$ = SDgetdimid$MH();
        try {
            return (int)mh$.invokeExact(sdsid, number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimname$MH() {
        return RuntimeHelper.requireNonNull(constants$160.SDsetdimname$MH,"SDsetdimname");
    }
    public static int SDsetdimname ( int id,  Addressable name) {
        var mh$ = SDsetdimname$MH();
        try {
            return (int)mh$.invokeExact(id, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$161.SDendaccess$MH,"SDendaccess");
    }
    public static int SDendaccess ( int id) {
        var mh$ = SDendaccess$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetrange$MH() {
        return RuntimeHelper.requireNonNull(constants$161.SDsetrange$MH,"SDsetrange");
    }
    public static int SDsetrange ( int sdsid,  Addressable pmax,  Addressable pmin) {
        var mh$ = SDsetrange$MH();
        try {
            return (int)mh$.invokeExact(sdsid, pmax, pmin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$161.SDsetattr$MH,"SDsetattr");
    }
    public static int SDsetattr ( int id,  Addressable name,  int nt,  int count,  Addressable data) {
        var mh$ = SDsetattr$MH();
        try {
            return (int)mh$.invokeExact(id, name, nt, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$161.SDattrinfo$MH,"SDattrinfo");
    }
    public static int SDattrinfo ( int id,  int idx,  Addressable name,  Addressable nt,  Addressable count) {
        var mh$ = SDattrinfo$MH();
        try {
            return (int)mh$.invokeExact(id, idx, name, nt, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreadattr$MH() {
        return RuntimeHelper.requireNonNull(constants$161.SDreadattr$MH,"SDreadattr");
    }
    public static int SDreadattr ( int id,  int idx,  Addressable buf) {
        var mh$ = SDreadattr$MH();
        try {
            return (int)mh$.invokeExact(id, idx, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDwritedata$MH() {
        return RuntimeHelper.requireNonNull(constants$161.SDwritedata$MH,"SDwritedata");
    }
    public static int SDwritedata ( int sdsid,  Addressable start,  Addressable stride,  Addressable end,  Addressable data) {
        var mh$ = SDwritedata$MH();
        try {
            return (int)mh$.invokeExact(sdsid, start, stride, end, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdatastrs$MH() {
        return RuntimeHelper.requireNonNull(constants$162.SDsetdatastrs$MH,"SDsetdatastrs");
    }
    public static int SDsetdatastrs ( int sdsid,  Addressable l,  Addressable u,  Addressable f,  Addressable c) {
        var mh$ = SDsetdatastrs$MH();
        try {
            return (int)mh$.invokeExact(sdsid, l, u, f, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$162.SDsetcal$MH,"SDsetcal");
    }
    public static int SDsetcal ( int sdsid,  double cal,  double cale,  double ioff,  double ioffe,  int nt) {
        var mh$ = SDsetcal$MH();
        try {
            return (int)mh$.invokeExact(sdsid, cal, cale, ioff, ioffe, nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$162.SDsetfillvalue$MH,"SDsetfillvalue");
    }
    public static int SDsetfillvalue ( int sdsid,  Addressable val) {
        var mh$ = SDsetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(sdsid, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$162.SDgetfillvalue$MH,"SDgetfillvalue");
    }
    public static int SDgetfillvalue ( int sdsid,  Addressable val) {
        var mh$ = SDgetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(sdsid, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetfillmode$MH() {
        return RuntimeHelper.requireNonNull(constants$162.SDsetfillmode$MH,"SDsetfillmode");
    }
    public static int SDsetfillmode ( int id,  int fillmode) {
        var mh$ = SDsetfillmode$MH();
        try {
            return (int)mh$.invokeExact(id, fillmode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdatastrs$MH() {
        return RuntimeHelper.requireNonNull(constants$162.SDgetdatastrs$MH,"SDgetdatastrs");
    }
    public static int SDgetdatastrs ( int sdsid,  Addressable l,  Addressable u,  Addressable f,  Addressable c,  int len) {
        var mh$ = SDgetdatastrs$MH();
        try {
            return (int)mh$.invokeExact(sdsid, l, u, f, c, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$163.SDgetcal$MH,"SDgetcal");
    }
    public static int SDgetcal ( int sdsid,  Addressable cal,  Addressable cale,  Addressable ioff,  Addressable ioffe,  Addressable nt) {
        var mh$ = SDgetcal$MH();
        try {
            return (int)mh$.invokeExact(sdsid, cal, cale, ioff, ioffe, nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimstrs$MH() {
        return RuntimeHelper.requireNonNull(constants$163.SDsetdimstrs$MH,"SDsetdimstrs");
    }
    public static int SDsetdimstrs ( int id,  Addressable l,  Addressable u,  Addressable f) {
        var mh$ = SDsetdimstrs$MH();
        try {
            return (int)mh$.invokeExact(id, l, u, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimscale$MH() {
        return RuntimeHelper.requireNonNull(constants$163.SDsetdimscale$MH,"SDsetdimscale");
    }
    public static int SDsetdimscale ( int id,  int count,  int nt,  Addressable data) {
        var mh$ = SDsetdimscale$MH();
        try {
            return (int)mh$.invokeExact(id, count, nt, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdimscale$MH() {
        return RuntimeHelper.requireNonNull(constants$163.SDgetdimscale$MH,"SDgetdimscale");
    }
    public static int SDgetdimscale ( int id,  Addressable data) {
        var mh$ = SDgetdimscale$MH();
        try {
            return (int)mh$.invokeExact(id, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDdiminfo$MH() {
        return RuntimeHelper.requireNonNull(constants$163.SDdiminfo$MH,"SDdiminfo");
    }
    public static int SDdiminfo ( int id,  Addressable name,  Addressable size,  Addressable nt,  Addressable nattr) {
        var mh$ = SDdiminfo$MH();
        try {
            return (int)mh$.invokeExact(id, name, size, nt, nattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdimstrs$MH() {
        return RuntimeHelper.requireNonNull(constants$163.SDgetdimstrs$MH,"SDgetdimstrs");
    }
    public static int SDgetdimstrs ( int id,  Addressable l,  Addressable u,  Addressable f,  int len) {
        var mh$ = SDgetdimstrs$MH();
        try {
            return (int)mh$.invokeExact(id, l, u, f, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$164.SDgetexternalfile$MH,"SDgetexternalfile");
    }
    public static int SDgetexternalfile ( int id,  int buf_size,  Addressable ext_filename,  Addressable offset) {
        var mh$ = SDgetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(id, buf_size, ext_filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetexternalinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$164.SDgetexternalinfo$MH,"SDgetexternalinfo");
    }
    public static int SDgetexternalinfo ( int id,  int buf_size,  Addressable ext_filename,  Addressable offset,  Addressable length) {
        var mh$ = SDgetexternalinfo$MH();
        try {
            return (int)mh$.invokeExact(id, buf_size, ext_filename, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$164.SDsetexternalfile$MH,"SDsetexternalfile");
    }
    public static int SDsetexternalfile ( int id,  Addressable filename,  int offset) {
        var mh$ = SDsetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(id, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetnbitdataset$MH() {
        return RuntimeHelper.requireNonNull(constants$164.SDsetnbitdataset$MH,"SDsetnbitdataset");
    }
    public static int SDsetnbitdataset ( int id,  int start_bit,  int bit_len,  int sign_ext,  int fill_one) {
        var mh$ = SDsetnbitdataset$MH();
        try {
            return (int)mh$.invokeExact(id, start_bit, bit_len, sign_ext, fill_one);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$164.SDsetcompress$MH,"SDsetcompress");
    }
    public static int SDsetcompress ( int id,  int type,  Addressable c_info) {
        var mh$ = SDsetcompress$MH();
        try {
            return (int)mh$.invokeExact(id, type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$164.SDgetcompress$MH,"SDgetcompress");
    }
    public static int SDgetcompress ( int id,  Addressable type,  Addressable c_info) {
        var mh$ = SDgetcompress$MH();
        try {
            return (int)mh$.invokeExact(id, type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcompinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$165.SDgetcompinfo$MH,"SDgetcompinfo");
    }
    public static int SDgetcompinfo ( int id,  Addressable type,  Addressable c_info) {
        var mh$ = SDgetcompinfo$MH();
        try {
            return (int)mh$.invokeExact(id, type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetcomptype$MH() {
        return RuntimeHelper.requireNonNull(constants$165.SDgetcomptype$MH,"SDgetcomptype");
    }
    public static int SDgetcomptype ( int id,  Addressable type) {
        var mh$ = SDgetcomptype$MH();
        try {
            return (int)mh$.invokeExact(id, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$165.SDfindattr$MH,"SDfindattr");
    }
    public static int SDfindattr ( int id,  Addressable attrname) {
        var mh$ = SDfindattr$MH();
        try {
            return (int)mh$.invokeExact(id, attrname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDidtoref$MH() {
        return RuntimeHelper.requireNonNull(constants$165.SDidtoref$MH,"SDidtoref");
    }
    public static int SDidtoref ( int id) {
        var mh$ = SDidtoref$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreftoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$165.SDreftoindex$MH,"SDreftoindex");
    }
    public static int SDreftoindex ( int fid,  int ref) {
        var mh$ = SDreftoindex$MH();
        try {
            return (int)mh$.invokeExact(fid, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDisrecord$MH() {
        return RuntimeHelper.requireNonNull(constants$165.SDisrecord$MH,"SDisrecord");
    }
    public static int SDisrecord ( int id) {
        var mh$ = SDisrecord$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDiscoordvar$MH() {
        return RuntimeHelper.requireNonNull(constants$166.SDiscoordvar$MH,"SDiscoordvar");
    }
    public static int SDiscoordvar ( int id) {
        var mh$ = SDiscoordvar$MH();
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetaccesstype$MH() {
        return RuntimeHelper.requireNonNull(constants$166.SDsetaccesstype$MH,"SDsetaccesstype");
    }
    public static int SDsetaccesstype ( int id,  int accesstype) {
        var mh$ = SDsetaccesstype$MH();
        try {
            return (int)mh$.invokeExact(id, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetblocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$166.SDsetblocksize$MH,"SDsetblocksize");
    }
    public static int SDsetblocksize ( int sdsid,  int block_size) {
        var mh$ = SDsetblocksize$MH();
        try {
            return (int)mh$.invokeExact(sdsid, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetblocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$166.SDgetblocksize$MH,"SDgetblocksize");
    }
    public static int SDgetblocksize ( int sdsid,  Addressable block_size) {
        var mh$ = SDgetblocksize$MH();
        try {
            return (int)mh$.invokeExact(sdsid, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetdimval_comp$MH() {
        return RuntimeHelper.requireNonNull(constants$166.SDsetdimval_comp$MH,"SDsetdimval_comp");
    }
    public static int SDsetdimval_comp ( int dimid,  int compt_mode) {
        var mh$ = SDsetdimval_comp$MH();
        try {
            return (int)mh$.invokeExact(dimid, compt_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDisdimval_bwcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$166.SDisdimval_bwcomp$MH,"SDisdimval_bwcomp");
    }
    public static int SDisdimval_bwcomp ( int dimid) {
        var mh$ = SDisdimval_bwcomp$MH();
        try {
            return (int)mh$.invokeExact(dimid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDcheckempty$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SDcheckempty$MH,"SDcheckempty");
    }
    public static int SDcheckempty ( int sdsid,  Addressable emptySDS) {
        var mh$ = SDcheckempty$MH();
        try {
            return (int)mh$.invokeExact(sdsid, emptySDS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDidtype$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SDidtype$MH,"SDidtype");
    }
    public static int SDidtype ( int an_id) {
        var mh$ = SDidtype$MH();
        try {
            return (int)mh$.invokeExact(an_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreset_maxopenfiles$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SDreset_maxopenfiles$MH,"SDreset_maxopenfiles");
    }
    public static int SDreset_maxopenfiles ( int req_max) {
        var mh$ = SDreset_maxopenfiles$MH();
        try {
            return (int)mh$.invokeExact(req_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDget_maxopenfiles$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SDget_maxopenfiles$MH,"SDget_maxopenfiles");
    }
    public static int SDget_maxopenfiles ( Addressable curr_max,  Addressable sys_limit) {
        var mh$ = SDget_maxopenfiles$MH();
        try {
            return (int)mh$.invokeExact(curr_max, sys_limit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDget_numopenfiles$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SDget_numopenfiles$MH,"SDget_numopenfiles");
    }
    public static int SDget_numopenfiles () {
        var mh$ = SDget_numopenfiles$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetdatasize$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SDgetdatasize$MH,"SDgetdatasize");
    }
    public static int SDgetdatasize ( int sdsid,  Addressable comp_size,  Addressable uncomp_size) {
        var mh$ = SDgetdatasize$MH();
        try {
            return (int)mh$.invokeExact(sdsid, comp_size, uncomp_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetfilename$MH() {
        return RuntimeHelper.requireNonNull(constants$168.SDgetfilename$MH,"SDgetfilename");
    }
    public static int SDgetfilename ( int fid,  Addressable filename) {
        var mh$ = SDgetfilename$MH();
        try {
            return (int)mh$.invokeExact(fid, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetnamelen$MH() {
        return RuntimeHelper.requireNonNull(constants$168.SDgetnamelen$MH,"SDgetnamelen");
    }
    public static int SDgetnamelen ( int sdsid,  Addressable name_len) {
        var mh$ = SDgetnamelen$MH();
        try {
            return (int)mh$.invokeExact(sdsid, name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$168.SDsetchunk$MH,"SDsetchunk");
    }
    public static int SDsetchunk ( int sdsid,  MemorySegment chunk_def,  int flags) {
        var mh$ = SDsetchunk$MH();
        try {
            return (int)mh$.invokeExact(sdsid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDgetchunkinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$168.SDgetchunkinfo$MH,"SDgetchunkinfo");
    }
    public static int SDgetchunkinfo ( int sdsid,  Addressable chunk_def,  Addressable flags) {
        var mh$ = SDgetchunkinfo$MH();
        try {
            return (int)mh$.invokeExact(sdsid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDwritechunk$MH() {
        return RuntimeHelper.requireNonNull(constants$168.SDwritechunk$MH,"SDwritechunk");
    }
    public static int SDwritechunk ( int sdsid,  Addressable origin,  Addressable datap) {
        var mh$ = SDwritechunk$MH();
        try {
            return (int)mh$.invokeExact(sdsid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDreadchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$168.SDreadchunk$MH,"SDreadchunk");
    }
    public static int SDreadchunk ( int sdsid,  Addressable origin,  Addressable datap) {
        var mh$ = SDreadchunk$MH();
        try {
            return (int)mh$.invokeExact(sdsid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDsetchunkcache$MH() {
        return RuntimeHelper.requireNonNull(constants$169.SDsetchunkcache$MH,"SDsetchunkcache");
    }
    public static int SDsetchunkcache ( int sdsid,  int maxcache,  int flags) {
        var mh$ = SDsetchunkcache$MH();
        try {
            return (int)mh$.invokeExact(sdsid, maxcache, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment H4_LT_OBJDIR() {
        return constants$169.H4_LT_OBJDIR$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE() {
        return constants$169.H4_PACKAGE$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE_BUGREPORT() {
        return constants$169.H4_PACKAGE_BUGREPORT$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE_NAME() {
        return constants$169.H4_PACKAGE_NAME$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE_STRING() {
        return constants$169.H4_PACKAGE_STRING$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE_TARNAME() {
        return constants$170.H4_PACKAGE_TARNAME$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE_URL() {
        return constants$170.H4_PACKAGE_URL$SEGMENT;
    }
    public static MemorySegment H4_PACKAGE_VERSION() {
        return constants$170.H4_PACKAGE_VERSION$SEGMENT;
    }
    public static MemorySegment H4_VERSION() {
        return constants$170.H4_VERSION$SEGMENT;
    }
    public static int DF_MT() {
        return (int)17473L;
    }
    public static int FILELIB() {
        return (int)2L;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$170.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$170.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$171.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$171.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$171.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$171.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$171.PRIdLEAST8$SEGMENT;
    }
    public static MemorySegment PRIdLEAST16() {
        return constants$171.PRIdLEAST16$SEGMENT;
    }
    public static MemorySegment PRIdLEAST32() {
        return constants$172.PRIdLEAST32$SEGMENT;
    }
    public static MemorySegment PRIdLEAST64() {
        return constants$172.PRIdLEAST64$SEGMENT;
    }
    public static MemorySegment PRIdFAST8() {
        return constants$172.PRIdFAST8$SEGMENT;
    }
    public static MemorySegment PRIdFAST16() {
        return constants$172.PRIdFAST16$SEGMENT;
    }
    public static MemorySegment PRIdFAST32() {
        return constants$172.PRIdFAST32$SEGMENT;
    }
    public static MemorySegment PRIdFAST64() {
        return constants$172.PRIdFAST64$SEGMENT;
    }
    public static MemorySegment PRIi8() {
        return constants$173.PRIi8$SEGMENT;
    }
    public static MemorySegment PRIi16() {
        return constants$173.PRIi16$SEGMENT;
    }
    public static MemorySegment PRIi32() {
        return constants$173.PRIi32$SEGMENT;
    }
    public static MemorySegment PRIi64() {
        return constants$173.PRIi64$SEGMENT;
    }
    public static MemorySegment PRIiLEAST8() {
        return constants$173.PRIiLEAST8$SEGMENT;
    }
    public static MemorySegment PRIiLEAST16() {
        return constants$173.PRIiLEAST16$SEGMENT;
    }
    public static MemorySegment PRIiLEAST32() {
        return constants$174.PRIiLEAST32$SEGMENT;
    }
    public static MemorySegment PRIiLEAST64() {
        return constants$174.PRIiLEAST64$SEGMENT;
    }
    public static MemorySegment PRIiFAST8() {
        return constants$174.PRIiFAST8$SEGMENT;
    }
    public static MemorySegment PRIiFAST16() {
        return constants$174.PRIiFAST16$SEGMENT;
    }
    public static MemorySegment PRIiFAST32() {
        return constants$174.PRIiFAST32$SEGMENT;
    }
    public static MemorySegment PRIiFAST64() {
        return constants$174.PRIiFAST64$SEGMENT;
    }
    public static MemorySegment PRIo8() {
        return constants$175.PRIo8$SEGMENT;
    }
    public static MemorySegment PRIo16() {
        return constants$175.PRIo16$SEGMENT;
    }
    public static MemorySegment PRIo32() {
        return constants$175.PRIo32$SEGMENT;
    }
    public static MemorySegment PRIo64() {
        return constants$175.PRIo64$SEGMENT;
    }
    public static MemorySegment PRIoLEAST8() {
        return constants$175.PRIoLEAST8$SEGMENT;
    }
    public static MemorySegment PRIoLEAST16() {
        return constants$175.PRIoLEAST16$SEGMENT;
    }
    public static MemorySegment PRIoLEAST32() {
        return constants$176.PRIoLEAST32$SEGMENT;
    }
    public static MemorySegment PRIoLEAST64() {
        return constants$176.PRIoLEAST64$SEGMENT;
    }
    public static MemorySegment PRIoFAST8() {
        return constants$176.PRIoFAST8$SEGMENT;
    }
    public static MemorySegment PRIoFAST16() {
        return constants$176.PRIoFAST16$SEGMENT;
    }
    public static MemorySegment PRIoFAST32() {
        return constants$176.PRIoFAST32$SEGMENT;
    }
    public static MemorySegment PRIoFAST64() {
        return constants$176.PRIoFAST64$SEGMENT;
    }
    public static MemorySegment PRIu8() {
        return constants$177.PRIu8$SEGMENT;
    }
    public static MemorySegment PRIu16() {
        return constants$177.PRIu16$SEGMENT;
    }
    public static MemorySegment PRIu32() {
        return constants$177.PRIu32$SEGMENT;
    }
    public static MemorySegment PRIu64() {
        return constants$177.PRIu64$SEGMENT;
    }
    public static MemorySegment PRIuLEAST8() {
        return constants$177.PRIuLEAST8$SEGMENT;
    }
    public static MemorySegment PRIuLEAST16() {
        return constants$177.PRIuLEAST16$SEGMENT;
    }
    public static MemorySegment PRIuLEAST32() {
        return constants$178.PRIuLEAST32$SEGMENT;
    }
    public static MemorySegment PRIuLEAST64() {
        return constants$178.PRIuLEAST64$SEGMENT;
    }
    public static MemorySegment PRIuFAST8() {
        return constants$178.PRIuFAST8$SEGMENT;
    }
    public static MemorySegment PRIuFAST16() {
        return constants$178.PRIuFAST16$SEGMENT;
    }
    public static MemorySegment PRIuFAST32() {
        return constants$178.PRIuFAST32$SEGMENT;
    }
    public static MemorySegment PRIuFAST64() {
        return constants$178.PRIuFAST64$SEGMENT;
    }
    public static MemorySegment PRIx8() {
        return constants$179.PRIx8$SEGMENT;
    }
    public static MemorySegment PRIx16() {
        return constants$179.PRIx16$SEGMENT;
    }
    public static MemorySegment PRIx32() {
        return constants$179.PRIx32$SEGMENT;
    }
    public static MemorySegment PRIx64() {
        return constants$179.PRIx64$SEGMENT;
    }
    public static MemorySegment PRIxLEAST8() {
        return constants$179.PRIxLEAST8$SEGMENT;
    }
    public static MemorySegment PRIxLEAST16() {
        return constants$179.PRIxLEAST16$SEGMENT;
    }
    public static MemorySegment PRIxLEAST32() {
        return constants$180.PRIxLEAST32$SEGMENT;
    }
    public static MemorySegment PRIxLEAST64() {
        return constants$180.PRIxLEAST64$SEGMENT;
    }
    public static MemorySegment PRIxFAST8() {
        return constants$180.PRIxFAST8$SEGMENT;
    }
    public static MemorySegment PRIxFAST16() {
        return constants$180.PRIxFAST16$SEGMENT;
    }
    public static MemorySegment PRIxFAST32() {
        return constants$180.PRIxFAST32$SEGMENT;
    }
    public static MemorySegment PRIxFAST64() {
        return constants$180.PRIxFAST64$SEGMENT;
    }
    public static MemorySegment PRIX8() {
        return constants$181.PRIX8$SEGMENT;
    }
    public static MemorySegment PRIX16() {
        return constants$181.PRIX16$SEGMENT;
    }
    public static MemorySegment PRIX32() {
        return constants$181.PRIX32$SEGMENT;
    }
    public static MemorySegment PRIX64() {
        return constants$181.PRIX64$SEGMENT;
    }
    public static MemorySegment PRIXLEAST8() {
        return constants$181.PRIXLEAST8$SEGMENT;
    }
    public static MemorySegment PRIXLEAST16() {
        return constants$181.PRIXLEAST16$SEGMENT;
    }
    public static MemorySegment PRIXLEAST32() {
        return constants$182.PRIXLEAST32$SEGMENT;
    }
    public static MemorySegment PRIXLEAST64() {
        return constants$182.PRIXLEAST64$SEGMENT;
    }
    public static MemorySegment PRIXFAST8() {
        return constants$182.PRIXFAST8$SEGMENT;
    }
    public static MemorySegment PRIXFAST16() {
        return constants$182.PRIXFAST16$SEGMENT;
    }
    public static MemorySegment PRIXFAST32() {
        return constants$182.PRIXFAST32$SEGMENT;
    }
    public static MemorySegment PRIXFAST64() {
        return constants$182.PRIXFAST64$SEGMENT;
    }
    public static MemorySegment PRIdMAX() {
        return constants$183.PRIdMAX$SEGMENT;
    }
    public static MemorySegment PRIiMAX() {
        return constants$183.PRIiMAX$SEGMENT;
    }
    public static MemorySegment PRIoMAX() {
        return constants$183.PRIoMAX$SEGMENT;
    }
    public static MemorySegment PRIuMAX() {
        return constants$183.PRIuMAX$SEGMENT;
    }
    public static MemorySegment PRIxMAX() {
        return constants$183.PRIxMAX$SEGMENT;
    }
    public static MemorySegment PRIXMAX() {
        return constants$183.PRIXMAX$SEGMENT;
    }
    public static MemorySegment PRIdPTR() {
        return constants$184.PRIdPTR$SEGMENT;
    }
    public static MemorySegment PRIiPTR() {
        return constants$184.PRIiPTR$SEGMENT;
    }
    public static MemorySegment PRIoPTR() {
        return constants$184.PRIoPTR$SEGMENT;
    }
    public static MemorySegment PRIuPTR() {
        return constants$184.PRIuPTR$SEGMENT;
    }
    public static MemorySegment PRIxPTR() {
        return constants$184.PRIxPTR$SEGMENT;
    }
    public static MemorySegment PRIXPTR() {
        return constants$184.PRIXPTR$SEGMENT;
    }
    public static MemorySegment SCNd8() {
        return constants$185.SCNd8$SEGMENT;
    }
    public static MemorySegment SCNd16() {
        return constants$185.SCNd16$SEGMENT;
    }
    public static MemorySegment SCNd32() {
        return constants$185.SCNd32$SEGMENT;
    }
    public static MemorySegment SCNd64() {
        return constants$185.SCNd64$SEGMENT;
    }
    public static MemorySegment SCNdLEAST8() {
        return constants$185.SCNdLEAST8$SEGMENT;
    }
    public static MemorySegment SCNdLEAST16() {
        return constants$185.SCNdLEAST16$SEGMENT;
    }
    public static MemorySegment SCNdLEAST32() {
        return constants$186.SCNdLEAST32$SEGMENT;
    }
    public static MemorySegment SCNdLEAST64() {
        return constants$186.SCNdLEAST64$SEGMENT;
    }
    public static MemorySegment SCNdFAST8() {
        return constants$186.SCNdFAST8$SEGMENT;
    }
    public static MemorySegment SCNdFAST16() {
        return constants$186.SCNdFAST16$SEGMENT;
    }
    public static MemorySegment SCNdFAST32() {
        return constants$186.SCNdFAST32$SEGMENT;
    }
    public static MemorySegment SCNdFAST64() {
        return constants$186.SCNdFAST64$SEGMENT;
    }
    public static MemorySegment SCNi8() {
        return constants$187.SCNi8$SEGMENT;
    }
    public static MemorySegment SCNi16() {
        return constants$187.SCNi16$SEGMENT;
    }
    public static MemorySegment SCNi32() {
        return constants$187.SCNi32$SEGMENT;
    }
    public static MemorySegment SCNi64() {
        return constants$187.SCNi64$SEGMENT;
    }
    public static MemorySegment SCNiLEAST8() {
        return constants$187.SCNiLEAST8$SEGMENT;
    }
    public static MemorySegment SCNiLEAST16() {
        return constants$187.SCNiLEAST16$SEGMENT;
    }
    public static MemorySegment SCNiLEAST32() {
        return constants$188.SCNiLEAST32$SEGMENT;
    }
    public static MemorySegment SCNiLEAST64() {
        return constants$188.SCNiLEAST64$SEGMENT;
    }
    public static MemorySegment SCNiFAST8() {
        return constants$188.SCNiFAST8$SEGMENT;
    }
    public static MemorySegment SCNiFAST16() {
        return constants$188.SCNiFAST16$SEGMENT;
    }
    public static MemorySegment SCNiFAST32() {
        return constants$188.SCNiFAST32$SEGMENT;
    }
    public static MemorySegment SCNiFAST64() {
        return constants$188.SCNiFAST64$SEGMENT;
    }
    public static MemorySegment SCNu8() {
        return constants$189.SCNu8$SEGMENT;
    }
    public static MemorySegment SCNu16() {
        return constants$189.SCNu16$SEGMENT;
    }
    public static MemorySegment SCNu32() {
        return constants$189.SCNu32$SEGMENT;
    }
    public static MemorySegment SCNu64() {
        return constants$189.SCNu64$SEGMENT;
    }
    public static MemorySegment SCNuLEAST8() {
        return constants$189.SCNuLEAST8$SEGMENT;
    }
    public static MemorySegment SCNuLEAST16() {
        return constants$189.SCNuLEAST16$SEGMENT;
    }
    public static MemorySegment SCNuLEAST32() {
        return constants$190.SCNuLEAST32$SEGMENT;
    }
    public static MemorySegment SCNuLEAST64() {
        return constants$190.SCNuLEAST64$SEGMENT;
    }
    public static MemorySegment SCNuFAST8() {
        return constants$190.SCNuFAST8$SEGMENT;
    }
    public static MemorySegment SCNuFAST16() {
        return constants$190.SCNuFAST16$SEGMENT;
    }
    public static MemorySegment SCNuFAST32() {
        return constants$190.SCNuFAST32$SEGMENT;
    }
    public static MemorySegment SCNuFAST64() {
        return constants$190.SCNuFAST64$SEGMENT;
    }
    public static MemorySegment SCNo8() {
        return constants$191.SCNo8$SEGMENT;
    }
    public static MemorySegment SCNo16() {
        return constants$191.SCNo16$SEGMENT;
    }
    public static MemorySegment SCNo32() {
        return constants$191.SCNo32$SEGMENT;
    }
    public static MemorySegment SCNo64() {
        return constants$191.SCNo64$SEGMENT;
    }
    public static MemorySegment SCNoLEAST8() {
        return constants$191.SCNoLEAST8$SEGMENT;
    }
    public static MemorySegment SCNoLEAST16() {
        return constants$191.SCNoLEAST16$SEGMENT;
    }
    public static MemorySegment SCNoLEAST32() {
        return constants$192.SCNoLEAST32$SEGMENT;
    }
    public static MemorySegment SCNoLEAST64() {
        return constants$192.SCNoLEAST64$SEGMENT;
    }
    public static MemorySegment SCNoFAST8() {
        return constants$192.SCNoFAST8$SEGMENT;
    }
    public static MemorySegment SCNoFAST16() {
        return constants$192.SCNoFAST16$SEGMENT;
    }
    public static MemorySegment SCNoFAST32() {
        return constants$192.SCNoFAST32$SEGMENT;
    }
    public static MemorySegment SCNoFAST64() {
        return constants$192.SCNoFAST64$SEGMENT;
    }
    public static MemorySegment SCNx8() {
        return constants$193.SCNx8$SEGMENT;
    }
    public static MemorySegment SCNx16() {
        return constants$193.SCNx16$SEGMENT;
    }
    public static MemorySegment SCNx32() {
        return constants$193.SCNx32$SEGMENT;
    }
    public static MemorySegment SCNx64() {
        return constants$193.SCNx64$SEGMENT;
    }
    public static MemorySegment SCNxLEAST8() {
        return constants$193.SCNxLEAST8$SEGMENT;
    }
    public static MemorySegment SCNxLEAST16() {
        return constants$193.SCNxLEAST16$SEGMENT;
    }
    public static MemorySegment SCNxLEAST32() {
        return constants$194.SCNxLEAST32$SEGMENT;
    }
    public static MemorySegment SCNxLEAST64() {
        return constants$194.SCNxLEAST64$SEGMENT;
    }
    public static MemorySegment SCNxFAST8() {
        return constants$194.SCNxFAST8$SEGMENT;
    }
    public static MemorySegment SCNxFAST16() {
        return constants$194.SCNxFAST16$SEGMENT;
    }
    public static MemorySegment SCNxFAST32() {
        return constants$194.SCNxFAST32$SEGMENT;
    }
    public static MemorySegment SCNxFAST64() {
        return constants$194.SCNxFAST64$SEGMENT;
    }
    public static MemorySegment SCNdMAX() {
        return constants$195.SCNdMAX$SEGMENT;
    }
    public static MemorySegment SCNiMAX() {
        return constants$195.SCNiMAX$SEGMENT;
    }
    public static MemorySegment SCNoMAX() {
        return constants$195.SCNoMAX$SEGMENT;
    }
    public static MemorySegment SCNuMAX() {
        return constants$195.SCNuMAX$SEGMENT;
    }
    public static MemorySegment SCNxMAX() {
        return constants$195.SCNxMAX$SEGMENT;
    }
    public static MemorySegment SCNdPTR() {
        return constants$195.SCNdPTR$SEGMENT;
    }
    public static MemorySegment SCNiPTR() {
        return constants$196.SCNiPTR$SEGMENT;
    }
    public static MemorySegment SCNoPTR() {
        return constants$196.SCNoPTR$SEGMENT;
    }
    public static MemorySegment SCNuPTR() {
        return constants$196.SCNuPTR$SEGMENT;
    }
    public static MemorySegment SCNxPTR() {
        return constants$196.SCNxPTR$SEGMENT;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    public static int SEM_VALUE_MAX() {
        return (int)2147483647L;
    }
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    public static int LINE_MAX() {
        return (int)2048L;
    }
    public static int RE_DUP_MAX() {
        return (int)32767L;
    }
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static long ULONG_MAX() {
        return -1L;
    }
    public static int CHAR_BIT() {
        return (int)8L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MAX() {
        return (int)127L;
    }
    public static MemoryAddress NULL() {
        return constants$196.NULL$ADDR;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static MemorySegment P_tmpdir() {
        return constants$196.P_tmpdir$SEGMENT;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int O_NDELAY() {
        return (int)2048L;
    }
    public static int O_FSYNC() {
        return (int)1052672L;
    }
    public static int __O_TMPFILE() {
        return (int)4259840L;
    }
    public static int O_DIRECTORY() {
        return (int)65536L;
    }
    public static int O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int O_CLOEXEC() {
        return (int)524288L;
    }
    public static int O_DSYNC() {
        return (int)4096L;
    }
    public static int O_RSYNC() {
        return (int)1052672L;
    }
    public static int F_SETOWN() {
        return (int)8L;
    }
    public static int F_GETOWN() {
        return (int)9L;
    }
    public static int FAPPEND() {
        return (int)1024L;
    }
    public static int FFSYNC() {
        return (int)1052672L;
    }
    public static int FASYNC() {
        return (int)8192L;
    }
    public static int FNONBLOCK() {
        return (int)2048L;
    }
    public static int FNDELAY() {
        return (int)2048L;
    }
    public static int POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int AT_FDCWD() {
        return (int)-100L;
    }
    public static long UTIME_NOW() {
        return 1073741823L;
    }
    public static long UTIME_OMIT() {
        return 1073741822L;
    }
    public static int S_IFMT() {
        return (int)61440L;
    }
    public static int S_IFDIR() {
        return (int)16384L;
    }
    public static int S_IFCHR() {
        return (int)8192L;
    }
    public static int S_IFBLK() {
        return (int)24576L;
    }
    public static int S_IFREG() {
        return (int)32768L;
    }
    public static int S_IFIFO() {
        return (int)4096L;
    }
    public static int S_IFLNK() {
        return (int)40960L;
    }
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    public static int S_ISUID() {
        return (int)2048L;
    }
    public static int S_ISGID() {
        return (int)1024L;
    }
    public static int S_ISVTX() {
        return (int)512L;
    }
    public static int S_IRUSR() {
        return (int)256L;
    }
    public static int S_IWUSR() {
        return (int)128L;
    }
    public static int S_IXUSR() {
        return (int)64L;
    }
    public static int S_IRWXU() {
        return (int)448L;
    }
    public static int S_IRGRP() {
        return (int)32L;
    }
    public static int S_IWGRP() {
        return (int)16L;
    }
    public static int S_IXGRP() {
        return (int)8L;
    }
    public static int S_IRWXG() {
        return (int)56L;
    }
    public static int S_IROTH() {
        return (int)4L;
    }
    public static int S_IWOTH() {
        return (int)2L;
    }
    public static int S_IXOTH() {
        return (int)1L;
    }
    public static int S_IRWXO() {
        return (int)7L;
    }
    public static long _POSIX_VERSION() {
        return 200809L;
    }
    public static long __POSIX2_THIS_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_C_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_C_BIND() {
        return 200809L;
    }
    public static long _POSIX2_C_DEV() {
        return 200809L;
    }
    public static long _POSIX2_SW_DEV() {
        return 200809L;
    }
    public static long _POSIX2_LOCALEDEF() {
        return 200809L;
    }
    public static long _POSIX_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    public static long _POSIX_SYNCHRONIZED_IO() {
        return 200809L;
    }
    public static long _POSIX_FSYNC() {
        return 200809L;
    }
    public static long _POSIX_MAPPED_FILES() {
        return 200809L;
    }
    public static long _POSIX_MEMLOCK() {
        return 200809L;
    }
    public static long _POSIX_MEMLOCK_RANGE() {
        return 200809L;
    }
    public static long _POSIX_MEMORY_PROTECTION() {
        return 200809L;
    }
    public static int _POSIX_VDISABLE() {
        return (int)0L;
    }
    public static long _POSIX_THREADS() {
        return 200809L;
    }
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIO_INHERIT() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIO_PROTECT() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ROBUST_PRIO_INHERIT() {
        return 200809L;
    }
    public static int _POSIX_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)-1L;
    }
    public static long _POSIX_SEMAPHORES() {
        return 200809L;
    }
    public static long _POSIX_REALTIME_SIGNALS() {
        return 200809L;
    }
    public static long _POSIX_ASYNCHRONOUS_IO() {
        return 200809L;
    }
    public static long _POSIX_PRIORITIZED_IO() {
        return 200809L;
    }
    public static long _POSIX_SHARED_MEMORY_OBJECTS() {
        return 200809L;
    }
    public static long _POSIX_READER_WRITER_LOCKS() {
        return 200809L;
    }
    public static long _POSIX_TIMEOUTS() {
        return 200809L;
    }
    public static long _POSIX_SPIN_LOCKS() {
        return 200809L;
    }
    public static long _POSIX_SPAWN() {
        return 200809L;
    }
    public static long _POSIX_TIMERS() {
        return 200809L;
    }
    public static long _POSIX_BARRIERS() {
        return 200809L;
    }
    public static long _POSIX_MESSAGE_PASSING() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return 200809L;
    }
    public static long _POSIX_CLOCK_SELECTION() {
        return 200809L;
    }
    public static long _POSIX_ADVISORY_INFO() {
        return 200809L;
    }
    public static long _POSIX_IPV6() {
        return 200809L;
    }
    public static long _POSIX_RAW_SOCKETS() {
        return 200809L;
    }
    public static long _POSIX2_CHAR_TERM() {
        return 200809L;
    }
    public static int _POSIX_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_INHERIT() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_LOG() {
        return (int)-1L;
    }
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static int _XBS5_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static MemorySegment __ILP32_OFF32_CFLAGS() {
        return constants$197.__ILP32_OFF32_CFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFF32_LDFLAGS() {
        return constants$197.__ILP32_OFF32_LDFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFFBIG_CFLAGS() {
        return constants$197.__ILP32_OFFBIG_CFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFFBIG_LDFLAGS() {
        return constants$197.__ILP32_OFFBIG_LDFLAGS$SEGMENT;
    }
    public static MemorySegment __LP64_OFF64_CFLAGS() {
        return constants$197.__LP64_OFF64_CFLAGS$SEGMENT;
    }
    public static MemorySegment __LP64_OFF64_LDFLAGS() {
        return constants$197.__LP64_OFF64_LDFLAGS$SEGMENT;
    }
    public static int L_SET() {
        return (int)0L;
    }
    public static int L_INCR() {
        return (int)1L;
    }
    public static int L_XTND() {
        return (int)2L;
    }
    public static int _SC_PAGE_SIZE() {
        return (int)30L;
    }
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    public static int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    public static int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    public static int S_IREAD() {
        return (int)256L;
    }
    public static int S_IWRITE() {
        return (int)128L;
    }
    public static int S_IEXEC() {
        return (int)64L;
    }
    public static int ACCESSPERMS() {
        return (int)511L;
    }
    public static int ALLPERMS() {
        return (int)4095L;
    }
    public static int DEFFILEMODE() {
        return (int)438L;
    }
    public static short MAX_REF() {
        return (short)65535L;
    }
    public static int H4_MAX_NC_OPEN() {
        return (int)32L;
    }
    public static MemorySegment GR_NAME() {
        return constants$198.GR_NAME$SEGMENT;
    }
    public static MemorySegment RI_NAME() {
        return constants$198.RI_NAME$SEGMENT;
    }
    public static MemorySegment RIGATTRNAME() {
        return constants$198.RIGATTRNAME$SEGMENT;
    }
    public static MemorySegment RIGATTRCLASS() {
        return constants$198.RIGATTRCLASS$SEGMENT;
    }
    public static MemorySegment _HDF_ATTRIBUTE() {
        return constants$198._HDF_ATTRIBUTE$SEGMENT;
    }
    public static MemorySegment _HDF_VARIABLE() {
        return constants$198._HDF_VARIABLE$SEGMENT;
    }
    public static MemorySegment _HDF_SDSVAR() {
        return constants$199._HDF_SDSVAR$SEGMENT;
    }
    public static MemorySegment _HDF_CRDVAR() {
        return constants$199._HDF_CRDVAR$SEGMENT;
    }
    public static MemorySegment _HDF_DIMENSION() {
        return constants$199._HDF_DIMENSION$SEGMENT;
    }
    public static MemorySegment _HDF_UDIMENSION() {
        return constants$199._HDF_UDIMENSION$SEGMENT;
    }
    public static MemorySegment DIM_VALS() {
        return constants$199.DIM_VALS$SEGMENT;
    }
    public static MemorySegment DIM_VALS01() {
        return constants$199.DIM_VALS01$SEGMENT;
    }
    public static MemorySegment _HDF_CDF() {
        return constants$200._HDF_CDF$SEGMENT;
    }
    public static MemorySegment DATA0() {
        return constants$200.DATA0$SEGMENT;
    }
    public static MemorySegment ATTR_FIELD_NAME() {
        return constants$200.ATTR_FIELD_NAME$SEGMENT;
    }
    public static MemorySegment _HDF_CHK_TBL_CLASS() {
        return constants$200._HDF_CHK_TBL_CLASS$SEGMENT;
    }
    public static MemorySegment FILL_ATTR() {
        return constants$200.FILL_ATTR$SEGMENT;
    }
    public static MemorySegment _FillValue() {
        return constants$200._FillValue$SEGMENT;
    }
    public static MemorySegment _HDF_LongName() {
        return constants$201._HDF_LongName$SEGMENT;
    }
    public static MemorySegment _HDF_Units() {
        return constants$201._HDF_Units$SEGMENT;
    }
    public static MemorySegment _HDF_Format() {
        return constants$201._HDF_Format$SEGMENT;
    }
    public static MemorySegment _HDF_CoordSys() {
        return constants$201._HDF_CoordSys$SEGMENT;
    }
    public static MemorySegment _HDF_ValidRange() {
        return constants$201._HDF_ValidRange$SEGMENT;
    }
    public static MemorySegment _HDF_ScaleFactor() {
        return constants$201._HDF_ScaleFactor$SEGMENT;
    }
    public static MemorySegment _HDF_ScaleFactorErr() {
        return constants$202._HDF_ScaleFactorErr$SEGMENT;
    }
    public static MemorySegment _HDF_AddOffset() {
        return constants$202._HDF_AddOffset$SEGMENT;
    }
    public static MemorySegment _HDF_AddOffsetErr() {
        return constants$202._HDF_AddOffsetErr$SEGMENT;
    }
    public static MemorySegment _HDF_CalibratedNt() {
        return constants$202._HDF_CalibratedNt$SEGMENT;
    }
    public static MemorySegment _HDF_ValidMax() {
        return constants$202._HDF_ValidMax$SEGMENT;
    }
    public static MemorySegment _HDF_ValidMin() {
        return constants$202._HDF_ValidMin$SEGMENT;
    }
    public static MemorySegment _HDF_Remarks() {
        return constants$203._HDF_Remarks$SEGMENT;
    }
    public static MemorySegment _HDF_AnnoLabel() {
        return constants$203._HDF_AnnoLabel$SEGMENT;
    }
    public static int CACHE_ALL_FILES() {
        return (int)-2L;
    }
    public static int FAIL() {
        return (int)-1L;
    }
    public static int TRUE() {
        return (int)1L;
    }
    public static int DFNT_NFLOAT32() {
        return (int)4101L;
    }
    public static int DFNT_NFLOAT64() {
        return (int)4102L;
    }
    public static int DFNT_NFLOAT128() {
        return (int)4103L;
    }
    public static int DFNT_NINT8() {
        return (int)4116L;
    }
    public static int DFNT_NUINT8() {
        return (int)4117L;
    }
    public static int DFNT_NINT16() {
        return (int)4118L;
    }
    public static int DFNT_NUINT16() {
        return (int)4119L;
    }
    public static int DFNT_NINT32() {
        return (int)4120L;
    }
    public static int DFNT_NUINT32() {
        return (int)4121L;
    }
    public static int DFNT_NINT64() {
        return (int)4122L;
    }
    public static int DFNT_NUINT64() {
        return (int)4123L;
    }
    public static int DFNT_NINT128() {
        return (int)4124L;
    }
    public static int DFNT_NUINT128() {
        return (int)4126L;
    }
    public static int DFNT_NCHAR8() {
        return (int)4100L;
    }
    public static int DFNT_NCHAR() {
        return (int)4100L;
    }
    public static int DFNT_NUCHAR8() {
        return (int)4099L;
    }
    public static int DFNT_NUCHAR() {
        return (int)4099L;
    }
    public static int DFNT_NCHAR16() {
        return (int)4138L;
    }
    public static int DFNT_NUCHAR16() {
        return (int)4139L;
    }
    public static int DFNT_LFLOAT32() {
        return (int)16389L;
    }
    public static int DFNT_LFLOAT64() {
        return (int)16390L;
    }
    public static int DFNT_LFLOAT128() {
        return (int)16391L;
    }
    public static int DFNT_LINT8() {
        return (int)16404L;
    }
    public static int DFNT_LUINT8() {
        return (int)16405L;
    }
    public static int DFNT_LINT16() {
        return (int)16406L;
    }
    public static int DFNT_LUINT16() {
        return (int)16407L;
    }
    public static int DFNT_LINT32() {
        return (int)16408L;
    }
    public static int DFNT_LUINT32() {
        return (int)16409L;
    }
    public static int DFNT_LINT64() {
        return (int)16410L;
    }
    public static int DFNT_LUINT64() {
        return (int)16411L;
    }
    public static int DFNT_LINT128() {
        return (int)16412L;
    }
    public static int DFNT_LUINT128() {
        return (int)16414L;
    }
    public static int DFNT_LCHAR8() {
        return (int)16388L;
    }
    public static int DFNT_LCHAR() {
        return (int)16388L;
    }
    public static int DFNT_LUCHAR8() {
        return (int)16387L;
    }
    public static int DFNT_LUCHAR() {
        return (int)16387L;
    }
    public static int DFNT_LCHAR16() {
        return (int)16426L;
    }
    public static int DFNT_LUCHAR16() {
        return (int)16427L;
    }
    public static short DFTAG_FID() {
        return (short)100L;
    }
    public static short DFTAG_FD() {
        return (short)101L;
    }
    public static short DFTAG_TID() {
        return (short)102L;
    }
    public static short DFTAG_TD() {
        return (short)103L;
    }
    public static short DFTAG_DIL() {
        return (short)104L;
    }
    public static short DFTAG_DIA() {
        return (short)105L;
    }
    public static short DFTAG_NT() {
        return (short)106L;
    }
    public static short DFTAG_MT() {
        return (short)107L;
    }
    public static short DFTAG_FREE() {
        return (short)108L;
    }
    public static short DFTAG_ID8() {
        return (short)200L;
    }
    public static short DFTAG_IP8() {
        return (short)201L;
    }
    public static short DFTAG_RI8() {
        return (short)202L;
    }
    public static short DFTAG_CI8() {
        return (short)203L;
    }
    public static short DFTAG_II8() {
        return (short)204L;
    }
    public static short DFTAG_ID() {
        return (short)300L;
    }
    public static short DFTAG_LUT() {
        return (short)301L;
    }
    public static short DFTAG_RI() {
        return (short)302L;
    }
    public static short DFTAG_CI() {
        return (short)303L;
    }
    public static short DFTAG_NRI() {
        return (short)304L;
    }
    public static short DFTAG_RIG() {
        return (short)306L;
    }
    public static short DFTAG_LD() {
        return (short)307L;
    }
    public static short DFTAG_MD() {
        return (short)308L;
    }
    public static short DFTAG_MA() {
        return (short)309L;
    }
    public static short DFTAG_CCN() {
        return (short)310L;
    }
    public static short DFTAG_CFM() {
        return (short)311L;
    }
    public static short DFTAG_AR() {
        return (short)312L;
    }
    public static short DFTAG_DRAW() {
        return (short)400L;
    }
    public static short DFTAG_RUN() {
        return (short)401L;
    }
    public static short DFTAG_XYP() {
        return (short)500L;
    }
    public static short DFTAG_MTO() {
        return (short)501L;
    }
    public static short DFTAG_T14() {
        return (short)602L;
    }
    public static short DFTAG_T105() {
        return (short)603L;
    }
    public static short DFTAG_SDG() {
        return (short)700L;
    }
    public static short DFTAG_SDD() {
        return (short)701L;
    }
    public static short DFTAG_SD() {
        return (short)702L;
    }
    public static short DFTAG_SDS() {
        return (short)703L;
    }
    public static short DFTAG_SDL() {
        return (short)704L;
    }
    public static short DFTAG_SDU() {
        return (short)705L;
    }
    public static short DFTAG_SDF() {
        return (short)706L;
    }
    public static short DFTAG_SDM() {
        return (short)707L;
    }
    public static short DFTAG_SDC() {
        return (short)708L;
    }
    public static short DFTAG_SDT() {
        return (short)709L;
    }
    public static short DFTAG_SDLNK() {
        return (short)710L;
    }
    public static short DFTAG_NDG() {
        return (short)720L;
    }
    public static short DFTAG_CAL() {
        return (short)731L;
    }
    public static short DFTAG_FV() {
        return (short)732L;
    }
    public static short DFTAG_BREQ() {
        return (short)799L;
    }
    public static short DFTAG_SDRAG() {
        return (short)781L;
    }
    public static short DFTAG_EREQ() {
        return (short)780L;
    }
    public static short DFTAG_VG() {
        return (short)1965L;
    }
    public static short DFTAG_VH() {
        return (short)1962L;
    }
    public static short DFTAG_VS() {
        return (short)1963L;
    }
    public static short DFTAG_RLE() {
        return (short)11L;
    }
    public static short DFTAG_IMC() {
        return (short)12L;
    }
    public static short DFTAG_IMCOMP() {
        return (short)12L;
    }
    public static short DFTAG_JPEG() {
        return (short)13L;
    }
    public static short DFTAG_GREYJPEG() {
        return (short)14L;
    }
    public static short DFTAG_JPEG5() {
        return (short)15L;
    }
    public static short DFTAG_GREYJPEG5() {
        return (short)16L;
    }
    public static long BITNUM() {
        return 8L;
    }
    public static long DATANUM() {
        return 32L;
    }
    public static short NEW_VGDESCTAG() {
        return (short)1965L;
    }
    public static short NEW_VSDESCTAG() {
        return (short)1962L;
    }
    public static short NEW_VSDATATAG() {
        return (short)1963L;
    }
    public static short VGDESCTAG() {
        return (short)1965L;
    }
    public static short VSDESCTAG() {
        return (short)1962L;
    }
    public static short VSDATATAG() {
        return (short)1963L;
    }
    public static int _HDF_VDATA() {
        return (int)-1L;
    }
    public static int _HDF_ENTIRE_VDATA() {
        return (int)-1L;
    }
    public static int VSET_OLD_TYPES() {
        return (int)2L;
    }
    public static byte FILL_BYTE() {
        return (byte)-127L;
    }
    public static byte FILL_CHAR() {
        return (byte)0L;
    }
    public static short FILL_SHORT() {
        return (short)-32767L;
    }
    public static long FILL_LONG() {
        return -2147483647L;
    }
    public static double FILL_FLOAT() {
        return 9.969209968386869E36d;
    }
    public static double FILL_DOUBLE() {
        return 9.969209968386869E36d;
    }
    public static int NC_WRITE() {
        return (int)1L;
    }
    public static int NC_CLOBBER() {
        return (int)11L;
    }
    public static int NC_NOCLOBBER() {
        return (int)15L;
    }
    public static long NC_UNLIMITED() {
        return 0L;
    }
    public static int NC_GLOBAL() {
        return (int)-1L;
    }
    public static int NC_ENTOOL() {
        return (int)21L;
    }
    public static int NC_SYSERR() {
        return (int)-1L;
    }
    public static long SD_UNLIMITED() {
        return 0L;
    }
    public static int SD_NOFILL() {
        return (int)256L;
    }
    public static int SD_FILL() {
        return (int)0L;
    }
    public static int SD_RAGGED() {
        return (int)-1L;
    }
}


