// Generated by jextract

package com.sunya.netchdf.mfhdfClib.ffm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class mfhdf_h_1 {

    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strspn$MH,"strspn");
    }
    public static long strspn ( Addressable __s,  Addressable __accept) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strpbrk$MH,"strpbrk");
    }
    public static MemoryAddress strpbrk ( Addressable __s,  Addressable __accept) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strstr$MH,"strstr");
    }
    public static MemoryAddress strstr ( Addressable __haystack,  Addressable __needle) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strtok$MH,"strtok");
    }
    public static MemoryAddress strtok ( Addressable __s,  Addressable __delim) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__strtok_r$MH,"__strtok_r");
    }
    public static MemoryAddress __strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = __strtok_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strtok_r$MH,"strtok_r");
    }
    public static MemoryAddress strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = strtok_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strlen$MH,"strlen");
    }
    public static long strlen ( Addressable __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$45.strnlen$MH,"strnlen");
    }
    public static long strnlen ( Addressable __string,  long __maxlen) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$45.strerror$MH,"strerror");
    }
    public static MemoryAddress strerror ( int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$45.strerror_r$MH,"strerror_r");
    }
    public static int strerror_r ( int __errnum,  Addressable __buf,  long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$45.strerror_l$MH,"strerror_l");
    }
    public static MemoryAddress strerror_l ( int __errnum,  Addressable __l) {
        var mh$ = strerror_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$45.bcmp$MH,"bcmp");
    }
    public static int bcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$45.bcopy$MH,"bcopy");
    }
    public static void bcopy ( Addressable __src,  Addressable __dest,  long __n) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$46.bzero$MH,"bzero");
    }
    public static void bzero ( Addressable __s,  long __n) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$46.index$MH,"index");
    }
    public static MemoryAddress index ( Addressable __s,  int __c) {
        var mh$ = index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$46.rindex$MH,"rindex");
    }
    public static MemoryAddress rindex ( Addressable __s,  int __c) {
        var mh$ = rindex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$46.ffs$MH,"ffs");
    }
    public static int ffs ( int __i) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$46.ffsl$MH,"ffsl");
    }
    public static int ffsl ( long __l) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$46.ffsll$MH,"ffsll");
    }
    public static int ffsll ( long __ll) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.strcasecmp$MH,"strcasecmp");
    }
    public static int strcasecmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.strncasecmp$MH,"strncasecmp");
    }
    public static int strncasecmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47.strcasecmp_l$MH,"strcasecmp_l");
    }
    public static int strcasecmp_l ( Addressable __s1,  Addressable __s2,  Addressable __loc) {
        var mh$ = strcasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47.strncasecmp_l$MH,"strncasecmp_l");
    }
    public static int strncasecmp_l ( Addressable __s1,  Addressable __s2,  long __n,  Addressable __loc) {
        var mh$ = strncasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$47.explicit_bzero$MH,"explicit_bzero");
    }
    public static void explicit_bzero ( Addressable __s,  long __n) {
        var mh$ = explicit_bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$47.strsep$MH,"strsep");
    }
    public static MemoryAddress strsep ( Addressable __stringp,  Addressable __delim) {
        var mh$ = strsep$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$48.strsignal$MH,"strsignal");
    }
    public static MemoryAddress strsignal ( int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__stpcpy$MH,"__stpcpy");
    }
    public static MemoryAddress __stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = __stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$48.stpcpy$MH,"stpcpy");
    }
    public static MemoryAddress stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__stpncpy$MH,"__stpncpy");
    }
    public static MemoryAddress __stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = __stpncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$48.stpncpy$MH,"stpncpy");
    }
    public static MemoryAddress stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$48.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$49.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$50.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$50.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$50.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$51.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$51.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$51.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$51.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$51.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$51.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$51.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$51.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$51.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$51.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$51.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$51.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$51.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$51.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$51.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$52.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$52.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$52.daylight$VH.get(RuntimeHelper.requireNonNull(constants$52.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$52.daylight$VH.set(RuntimeHelper.requireNonNull(constants$52.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$52.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$52.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$52.timezone$VH.get(RuntimeHelper.requireNonNull(constants$52.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$52.timezone$VH.set(RuntimeHelper.requireNonNull(constants$52.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$52.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$52.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$52.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$52.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$53.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$53.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$53.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$53.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$53.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$53.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$54.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$54.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$54.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$54.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$54.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$54.fcntl$MH,"fcntl");
    }
    public static int fcntl ( int __fd,  int __cmd, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$55.open$MH,"open");
    }
    public static int open ( Addressable __file,  int __oflag, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$55.openat$MH,"openat");
    }
    public static int openat ( int __fd,  Addressable __file,  int __oflag, Object... x3) {
        var mh$ = openat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$55.creat$MH,"creat");
    }
    public static int creat ( Addressable __file,  int __mode) {
        var mh$ = creat$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.lockf$MH,"lockf");
    }
    public static int lockf ( int __fd,  int __cmd,  long __len) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$55.posix_fadvise$MH,"posix_fadvise");
    }
    public static int posix_fadvise ( int __fd,  long __offset,  long __len,  int __advise) {
        var mh$ = posix_fadvise$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$55.posix_fallocate$MH,"posix_fallocate");
    }
    public static int posix_fallocate ( int __fd,  long __offset,  long __len) {
        var mh$ = posix_fallocate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$56.access$MH,"access");
    }
    public static int access ( Addressable __name,  int __type) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$56.faccessat$MH,"faccessat");
    }
    public static int faccessat ( int __fd,  Addressable __file,  int __type,  int __flag) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __type, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$56.lseek$MH,"lseek");
    }
    public static long lseek ( int __fd,  long __offset,  int __whence) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$56.close$MH,"close");
    }
    public static int close ( int __fd) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closefrom$MH() {
        return RuntimeHelper.requireNonNull(constants$56.closefrom$MH,"closefrom");
    }
    public static void closefrom ( int __lowfd) {
        var mh$ = closefrom$MH();
        try {
            mh$.invokeExact(__lowfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$56.read$MH,"read");
    }
    public static long read ( int __fd,  Addressable __buf,  long __nbytes) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$57.write$MH,"write");
    }
    public static long write ( int __fd,  Addressable __buf,  long __n) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$57.pread$MH,"pread");
    }
    public static long pread ( int __fd,  Addressable __buf,  long __nbytes,  long __offset) {
        var mh$ = pread$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$57.pwrite$MH,"pwrite");
    }
    public static long pwrite ( int __fd,  Addressable __buf,  long __n,  long __offset) {
        var mh$ = pwrite$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$57.pipe$MH,"pipe");
    }
    public static int pipe ( Addressable __pipedes) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(__pipedes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$57.alarm$MH,"alarm");
    }
    public static int alarm ( int __seconds) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sleep$MH,"sleep");
    }
    public static int sleep ( int __seconds) {
        var mh$ = sleep$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$58.ualarm$MH,"ualarm");
    }
    public static int ualarm ( int __value,  int __interval) {
        var mh$ = ualarm$MH();
        try {
            return (int)mh$.invokeExact(__value, __interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$58.usleep$MH,"usleep");
    }
    public static int usleep ( int __useconds) {
        var mh$ = usleep$MH();
        try {
            return (int)mh$.invokeExact(__useconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$58.pause$MH,"pause");
    }
    public static int pause () {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$58.chown$MH,"chown");
    }
    public static int chown ( Addressable __file,  int __owner,  int __group) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$58.fchown$MH,"fchown");
    }
    public static int fchown ( int __fd,  int __owner,  int __group) {
        var mh$ = fchown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$58.lchown$MH,"lchown");
    }
    public static int lchown ( Addressable __file,  int __owner,  int __group) {
        var mh$ = lchown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$59.fchownat$MH,"fchownat");
    }
    public static int fchownat ( int __fd,  Addressable __file,  int __owner,  int __group,  int __flag) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __owner, __group, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$59.chdir$MH,"chdir");
    }
    public static int chdir ( Addressable __path) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$59.fchdir$MH,"fchdir");
    }
    public static int fchdir ( int __fd) {
        var mh$ = fchdir$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$59.getcwd$MH,"getcwd");
    }
    public static MemoryAddress getcwd ( Addressable __buf,  long __size) {
        var mh$ = getcwd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$59.getwd$MH,"getwd");
    }
    public static MemoryAddress getwd ( Addressable __buf) {
        var mh$ = getwd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$59.dup$MH,"dup");
    }
    public static int dup ( int __fd) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$60.dup2$MH,"dup2");
    }
    public static int dup2 ( int __fd,  int __fd2) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fd2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __environ$LAYOUT() {
        return constants$60.__environ$LAYOUT;
    }
    public static VarHandle __environ$VH() {
        return constants$60.__environ$VH;
    }
    public static MemorySegment __environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$60.__environ$SEGMENT,"__environ");
    }
    public static MemoryAddress __environ$get() {
        return (java.lang.foreign.MemoryAddress) constants$60.__environ$VH.get(RuntimeHelper.requireNonNull(constants$60.__environ$SEGMENT, "__environ"));
    }
    public static void __environ$set( MemoryAddress x) {
        constants$60.__environ$VH.set(RuntimeHelper.requireNonNull(constants$60.__environ$SEGMENT, "__environ"), x);
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$60.execve$MH,"execve");
    }
    public static int execve ( Addressable __path,  Addressable __argv,  Addressable __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fexecve$MH() {
        return RuntimeHelper.requireNonNull(constants$60.fexecve$MH,"fexecve");
    }
    public static int fexecve ( int __fd,  Addressable __argv,  Addressable __envp) {
        var mh$ = fexecve$MH();
        try {
            return (int)mh$.invokeExact(__fd, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.execv$MH,"execv");
    }
    public static int execv ( Addressable __path,  Addressable __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$60.execle$MH,"execle");
    }
    public static int execle ( Addressable __path,  Addressable __arg, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$61.execl$MH,"execl");
    }
    public static int execl ( Addressable __path,  Addressable __arg, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$61.execvp$MH,"execvp");
    }
    public static int execvp ( Addressable __file,  Addressable __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$61.execlp$MH,"execlp");
    }
    public static int execlp ( Addressable __file,  Addressable __arg, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$61.nice$MH,"nice");
    }
    public static int nice ( int __inc) {
        var mh$ = nice$MH();
        try {
            return (int)mh$.invokeExact(__inc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$61._exit$MH,"_exit");
    }
    public static void _exit ( int __status) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _PC_LINK_MAX() {
        return (int)0L;
    }
    public static int _PC_MAX_CANON() {
        return (int)1L;
    }
    public static int _PC_MAX_INPUT() {
        return (int)2L;
    }
    public static int _PC_NAME_MAX() {
        return (int)3L;
    }
    public static int _PC_PATH_MAX() {
        return (int)4L;
    }
    public static int _PC_PIPE_BUF() {
        return (int)5L;
    }
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)6L;
    }
    public static int _PC_NO_TRUNC() {
        return (int)7L;
    }
    public static int _PC_VDISABLE() {
        return (int)8L;
    }
    public static int _PC_SYNC_IO() {
        return (int)9L;
    }
    public static int _PC_ASYNC_IO() {
        return (int)10L;
    }
    public static int _PC_PRIO_IO() {
        return (int)11L;
    }
    public static int _PC_SOCK_MAXBUF() {
        return (int)12L;
    }
    public static int _PC_FILESIZEBITS() {
        return (int)13L;
    }
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)14L;
    }
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)15L;
    }
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)16L;
    }
    public static int _PC_REC_XFER_ALIGN() {
        return (int)17L;
    }
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)18L;
    }
    public static int _PC_SYMLINK_MAX() {
        return (int)19L;
    }
    public static int _PC_2_SYMLINKS() {
        return (int)20L;
    }
    public static int _SC_ARG_MAX() {
        return (int)0L;
    }
    public static int _SC_CHILD_MAX() {
        return (int)1L;
    }
    public static int _SC_CLK_TCK() {
        return (int)2L;
    }
    public static int _SC_NGROUPS_MAX() {
        return (int)3L;
    }
    public static int _SC_OPEN_MAX() {
        return (int)4L;
    }
    public static int _SC_STREAM_MAX() {
        return (int)5L;
    }
    public static int _SC_TZNAME_MAX() {
        return (int)6L;
    }
    public static int _SC_JOB_CONTROL() {
        return (int)7L;
    }
    public static int _SC_SAVED_IDS() {
        return (int)8L;
    }
    public static int _SC_REALTIME_SIGNALS() {
        return (int)9L;
    }
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)10L;
    }
    public static int _SC_TIMERS() {
        return (int)11L;
    }
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)12L;
    }
    public static int _SC_PRIORITIZED_IO() {
        return (int)13L;
    }
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)14L;
    }
    public static int _SC_FSYNC() {
        return (int)15L;
    }
    public static int _SC_MAPPED_FILES() {
        return (int)16L;
    }
    public static int _SC_MEMLOCK() {
        return (int)17L;
    }
    public static int _SC_MEMLOCK_RANGE() {
        return (int)18L;
    }
    public static int _SC_MEMORY_PROTECTION() {
        return (int)19L;
    }
    public static int _SC_MESSAGE_PASSING() {
        return (int)20L;
    }
    public static int _SC_SEMAPHORES() {
        return (int)21L;
    }
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)22L;
    }
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)23L;
    }
    public static int _SC_AIO_MAX() {
        return (int)24L;
    }
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)25L;
    }
    public static int _SC_DELAYTIMER_MAX() {
        return (int)26L;
    }
    public static int _SC_MQ_OPEN_MAX() {
        return (int)27L;
    }
    public static int _SC_MQ_PRIO_MAX() {
        return (int)28L;
    }
    public static int _SC_VERSION() {
        return (int)29L;
    }
    public static int _SC_PAGESIZE() {
        return (int)30L;
    }
    public static int _SC_RTSIG_MAX() {
        return (int)31L;
    }
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)32L;
    }
    public static int _SC_SEM_VALUE_MAX() {
        return (int)33L;
    }
    public static int _SC_SIGQUEUE_MAX() {
        return (int)34L;
    }
    public static int _SC_TIMER_MAX() {
        return (int)35L;
    }
    public static int _SC_BC_BASE_MAX() {
        return (int)36L;
    }
    public static int _SC_BC_DIM_MAX() {
        return (int)37L;
    }
    public static int _SC_BC_SCALE_MAX() {
        return (int)38L;
    }
    public static int _SC_BC_STRING_MAX() {
        return (int)39L;
    }
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)40L;
    }
    public static int _SC_EQUIV_CLASS_MAX() {
        return (int)41L;
    }
    public static int _SC_EXPR_NEST_MAX() {
        return (int)42L;
    }
    public static int _SC_LINE_MAX() {
        return (int)43L;
    }
    public static int _SC_RE_DUP_MAX() {
        return (int)44L;
    }
    public static int _SC_CHARCLASS_NAME_MAX() {
        return (int)45L;
    }
    public static int _SC_2_VERSION() {
        return (int)46L;
    }
    public static int _SC_2_C_BIND() {
        return (int)47L;
    }
    public static int _SC_2_C_DEV() {
        return (int)48L;
    }
    public static int _SC_2_FORT_DEV() {
        return (int)49L;
    }
    public static int _SC_2_FORT_RUN() {
        return (int)50L;
    }
    public static int _SC_2_SW_DEV() {
        return (int)51L;
    }
    public static int _SC_2_LOCALEDEF() {
        return (int)52L;
    }
    public static int _SC_PII() {
        return (int)53L;
    }
    public static int _SC_PII_XTI() {
        return (int)54L;
    }
    public static int _SC_PII_SOCKET() {
        return (int)55L;
    }
    public static int _SC_PII_INTERNET() {
        return (int)56L;
    }
    public static int _SC_PII_OSI() {
        return (int)57L;
    }
    public static int _SC_POLL() {
        return (int)58L;
    }
    public static int _SC_SELECT() {
        return (int)59L;
    }
    public static int _SC_UIO_MAXIOV() {
        return (int)60L;
    }
    public static int _SC_IOV_MAX() {
        return (int)60L;
    }
    public static int _SC_PII_INTERNET_STREAM() {
        return (int)61L;
    }
    public static int _SC_PII_INTERNET_DGRAM() {
        return (int)62L;
    }
    public static int _SC_PII_OSI_COTS() {
        return (int)63L;
    }
    public static int _SC_PII_OSI_CLTS() {
        return (int)64L;
    }
    public static int _SC_PII_OSI_M() {
        return (int)65L;
    }
    public static int _SC_T_IOV_MAX() {
        return (int)66L;
    }
    public static int _SC_THREADS() {
        return (int)67L;
    }
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)68L;
    }
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)69L;
    }
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)70L;
    }
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)71L;
    }
    public static int _SC_TTY_NAME_MAX() {
        return (int)72L;
    }
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)73L;
    }
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)74L;
    }
    public static int _SC_THREAD_STACK_MIN() {
        return (int)75L;
    }
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)76L;
    }
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)77L;
    }
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)78L;
    }
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)79L;
    }
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)80L;
    }
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)81L;
    }
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)82L;
    }
    public static int _SC_NPROCESSORS_CONF() {
        return (int)83L;
    }
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)84L;
    }
    public static int _SC_PHYS_PAGES() {
        return (int)85L;
    }
    public static int _SC_AVPHYS_PAGES() {
        return (int)86L;
    }
    public static int _SC_ATEXIT_MAX() {
        return (int)87L;
    }
    public static int _SC_PASS_MAX() {
        return (int)88L;
    }
    public static int _SC_XOPEN_VERSION() {
        return (int)89L;
    }
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)90L;
    }
    public static int _SC_XOPEN_UNIX() {
        return (int)91L;
    }
    public static int _SC_XOPEN_CRYPT() {
        return (int)92L;
    }
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)93L;
    }
    public static int _SC_XOPEN_SHM() {
        return (int)94L;
    }
    public static int _SC_2_CHAR_TERM() {
        return (int)95L;
    }
    public static int _SC_2_C_VERSION() {
        return (int)96L;
    }
    public static int _SC_2_UPE() {
        return (int)97L;
    }
    public static int _SC_XOPEN_XPG2() {
        return (int)98L;
    }
    public static int _SC_XOPEN_XPG3() {
        return (int)99L;
    }
    public static int _SC_XOPEN_XPG4() {
        return (int)100L;
    }
    public static int _SC_CHAR_BIT() {
        return (int)101L;
    }
    public static int _SC_CHAR_MAX() {
        return (int)102L;
    }
    public static int _SC_CHAR_MIN() {
        return (int)103L;
    }
    public static int _SC_INT_MAX() {
        return (int)104L;
    }
    public static int _SC_INT_MIN() {
        return (int)105L;
    }
    public static int _SC_LONG_BIT() {
        return (int)106L;
    }
    public static int _SC_WORD_BIT() {
        return (int)107L;
    }
    public static int _SC_MB_LEN_MAX() {
        return (int)108L;
    }
    public static int _SC_NZERO() {
        return (int)109L;
    }
    public static int _SC_SSIZE_MAX() {
        return (int)110L;
    }
    public static int _SC_SCHAR_MAX() {
        return (int)111L;
    }
    public static int _SC_SCHAR_MIN() {
        return (int)112L;
    }
    public static int _SC_SHRT_MAX() {
        return (int)113L;
    }
    public static int _SC_SHRT_MIN() {
        return (int)114L;
    }
    public static int _SC_UCHAR_MAX() {
        return (int)115L;
    }
    public static int _SC_UINT_MAX() {
        return (int)116L;
    }
    public static int _SC_ULONG_MAX() {
        return (int)117L;
    }
    public static int _SC_USHRT_MAX() {
        return (int)118L;
    }
    public static int _SC_NL_ARGMAX() {
        return (int)119L;
    }
    public static int _SC_NL_LANGMAX() {
        return (int)120L;
    }
    public static int _SC_NL_MSGMAX() {
        return (int)121L;
    }
    public static int _SC_NL_NMAX() {
        return (int)122L;
    }
    public static int _SC_NL_SETMAX() {
        return (int)123L;
    }
    public static int _SC_NL_TEXTMAX() {
        return (int)124L;
    }
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)125L;
    }
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)126L;
    }
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)127L;
    }
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)128L;
    }
    public static int _SC_XOPEN_LEGACY() {
        return (int)129L;
    }
    public static int _SC_XOPEN_REALTIME() {
        return (int)130L;
    }
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)131L;
    }
    public static int _SC_ADVISORY_INFO() {
        return (int)132L;
    }
    public static int _SC_BARRIERS() {
        return (int)133L;
    }
    public static int _SC_BASE() {
        return (int)134L;
    }
    public static int _SC_C_LANG_SUPPORT() {
        return (int)135L;
    }
    public static int _SC_C_LANG_SUPPORT_R() {
        return (int)136L;
    }
    public static int _SC_CLOCK_SELECTION() {
        return (int)137L;
    }
    public static int _SC_CPUTIME() {
        return (int)138L;
    }
    public static int _SC_THREAD_CPUTIME() {
        return (int)139L;
    }
    public static int _SC_DEVICE_IO() {
        return (int)140L;
    }
    public static int _SC_DEVICE_SPECIFIC() {
        return (int)141L;
    }
    public static int _SC_DEVICE_SPECIFIC_R() {
        return (int)142L;
    }
    public static int _SC_FD_MGMT() {
        return (int)143L;
    }
    public static int _SC_FIFO() {
        return (int)144L;
    }
    public static int _SC_PIPE() {
        return (int)145L;
    }
    public static int _SC_FILE_ATTRIBUTES() {
        return (int)146L;
    }
    public static int _SC_FILE_LOCKING() {
        return (int)147L;
    }
    public static int _SC_FILE_SYSTEM() {
        return (int)148L;
    }
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)149L;
    }
    public static int _SC_MULTI_PROCESS() {
        return (int)150L;
    }
    public static int _SC_SINGLE_PROCESS() {
        return (int)151L;
    }
    public static int _SC_NETWORKING() {
        return (int)152L;
    }
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)153L;
    }
    public static int _SC_SPIN_LOCKS() {
        return (int)154L;
    }
    public static int _SC_REGEXP() {
        return (int)155L;
    }
    public static int _SC_REGEX_VERSION() {
        return (int)156L;
    }
    public static int _SC_SHELL() {
        return (int)157L;
    }
    public static int _SC_SIGNALS() {
        return (int)158L;
    }
    public static int _SC_SPAWN() {
        return (int)159L;
    }
    public static int _SC_SPORADIC_SERVER() {
        return (int)160L;
    }
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)161L;
    }
    public static int _SC_SYSTEM_DATABASE() {
        return (int)162L;
    }
    public static int _SC_SYSTEM_DATABASE_R() {
        return (int)163L;
    }
    public static int _SC_TIMEOUTS() {
        return (int)164L;
    }
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)165L;
    }
    public static int _SC_USER_GROUPS() {
        return (int)166L;
    }
    public static int _SC_USER_GROUPS_R() {
        return (int)167L;
    }
    public static int _SC_2_PBS() {
        return (int)168L;
    }
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)169L;
    }
    public static int _SC_2_PBS_LOCATE() {
        return (int)170L;
    }
    public static int _SC_2_PBS_MESSAGE() {
        return (int)171L;
    }
    public static int _SC_2_PBS_TRACK() {
        return (int)172L;
    }
    public static int _SC_SYMLOOP_MAX() {
        return (int)173L;
    }
    public static int _SC_STREAMS() {
        return (int)174L;
    }
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)175L;
    }
    public static int _SC_V6_ILP32_OFF32() {
        return (int)176L;
    }
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)177L;
    }
    public static int _SC_V6_LP64_OFF64() {
        return (int)178L;
    }
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)179L;
    }
    public static int _SC_HOST_NAME_MAX() {
        return (int)180L;
    }
    public static int _SC_TRACE() {
        return (int)181L;
    }
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)182L;
    }
    public static int _SC_TRACE_INHERIT() {
        return (int)183L;
    }
    public static int _SC_TRACE_LOG() {
        return (int)184L;
    }
    public static int _SC_LEVEL1_ICACHE_SIZE() {
        return (int)185L;
    }
    public static int _SC_LEVEL1_ICACHE_ASSOC() {
        return (int)186L;
    }
    public static int _SC_LEVEL1_ICACHE_LINESIZE() {
        return (int)187L;
    }
    public static int _SC_LEVEL1_DCACHE_SIZE() {
        return (int)188L;
    }
    public static int _SC_LEVEL1_DCACHE_ASSOC() {
        return (int)189L;
    }
    public static int _SC_LEVEL1_DCACHE_LINESIZE() {
        return (int)190L;
    }
    public static int _SC_LEVEL2_CACHE_SIZE() {
        return (int)191L;
    }
    public static int _SC_LEVEL2_CACHE_ASSOC() {
        return (int)192L;
    }
    public static int _SC_LEVEL2_CACHE_LINESIZE() {
        return (int)193L;
    }
    public static int _SC_LEVEL3_CACHE_SIZE() {
        return (int)194L;
    }
    public static int _SC_LEVEL3_CACHE_ASSOC() {
        return (int)195L;
    }
    public static int _SC_LEVEL3_CACHE_LINESIZE() {
        return (int)196L;
    }
    public static int _SC_LEVEL4_CACHE_SIZE() {
        return (int)197L;
    }
    public static int _SC_LEVEL4_CACHE_ASSOC() {
        return (int)198L;
    }
    public static int _SC_LEVEL4_CACHE_LINESIZE() {
        return (int)199L;
    }
    public static int _SC_IPV6() {
        return (int)235L;
    }
    public static int _SC_RAW_SOCKETS() {
        return (int)236L;
    }
    public static int _SC_V7_ILP32_OFF32() {
        return (int)237L;
    }
    public static int _SC_V7_ILP32_OFFBIG() {
        return (int)238L;
    }
    public static int _SC_V7_LP64_OFF64() {
        return (int)239L;
    }
    public static int _SC_V7_LPBIG_OFFBIG() {
        return (int)240L;
    }
    public static int _SC_SS_REPL_MAX() {
        return (int)241L;
    }
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)242L;
    }
    public static int _SC_TRACE_NAME_MAX() {
        return (int)243L;
    }
    public static int _SC_TRACE_SYS_MAX() {
        return (int)244L;
    }
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)245L;
    }
    public static int _SC_XOPEN_STREAMS() {
        return (int)246L;
    }
    public static int _SC_THREAD_ROBUST_PRIO_INHERIT() {
        return (int)247L;
    }
    public static int _SC_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)248L;
    }
    public static int _SC_MINSIGSTKSZ() {
        return (int)249L;
    }
    public static int _SC_SIGSTKSZ() {
        return (int)250L;
    }
    public static int _CS_PATH() {
        return (int)0L;
    }
    public static int _CS_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    public static int _CS_GNU_LIBC_VERSION() {
        return (int)2L;
    }
    public static int _CS_GNU_LIBPTHREAD_VERSION() {
        return (int)3L;
    }
    public static int _CS_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    public static int _CS_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    public static int _CS_LFS_CFLAGS() {
        return (int)1000L;
    }
    public static int _CS_LFS_LDFLAGS() {
        return (int)1001L;
    }
    public static int _CS_LFS_LIBS() {
        return (int)1002L;
    }
    public static int _CS_LFS_LINTFLAGS() {
        return (int)1003L;
    }
    public static int _CS_LFS64_CFLAGS() {
        return (int)1004L;
    }
    public static int _CS_LFS64_LDFLAGS() {
        return (int)1005L;
    }
    public static int _CS_LFS64_LIBS() {
        return (int)1006L;
    }
    public static int _CS_LFS64_LINTFLAGS() {
        return (int)1007L;
    }
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)1100L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)1101L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)1102L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)1103L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)1104L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)1105L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)1106L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1107L;
    }
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)1108L;
    }
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)1109L;
    }
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)1110L;
    }
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)1111L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)1112L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1113L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)1114L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1115L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)1116L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)1117L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)1118L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS() {
        return (int)1119L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)1120L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)1121L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)1122L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1123L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)1124L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)1125L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)1126L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS() {
        return (int)1127L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)1128L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1129L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)1130L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1131L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_CFLAGS() {
        return (int)1132L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS() {
        return (int)1133L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LIBS() {
        return (int)1134L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS() {
        return (int)1135L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS() {
        return (int)1136L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS() {
        return (int)1137L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LIBS() {
        return (int)1138L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1139L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_CFLAGS() {
        return (int)1140L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LDFLAGS() {
        return (int)1141L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LIBS() {
        return (int)1142L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS() {
        return (int)1143L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS() {
        return (int)1144L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1145L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS() {
        return (int)1146L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1147L;
    }
    public static int _CS_V6_ENV() {
        return (int)1148L;
    }
    public static int _CS_V7_ENV() {
        return (int)1149L;
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.pathconf$MH,"pathconf");
    }
    public static long pathconf ( Addressable __path,  int __name) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(__path, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.fpathconf$MH,"fpathconf");
    }
    public static long fpathconf ( int __fd,  int __name) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(__fd, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sysconf$MH,"sysconf");
    }
    public static long sysconf ( int __name) {
        var mh$ = sysconf$MH();
        try {
            return (long)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$62.confstr$MH,"confstr");
    }
    public static long confstr ( int __name,  Addressable __buf,  long __len) {
        var mh$ = confstr$MH();
        try {
            return (long)mh$.invokeExact(__name, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$62.getpid$MH,"getpid");
    }
    public static int getpid () {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$62.getppid$MH,"getppid");
    }
    public static int getppid () {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$62.getpgrp$MH,"getpgrp");
    }
    public static int getpgrp () {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__getpgid$MH,"__getpgid");
    }
    public static int __getpgid ( int __pid) {
        var mh$ = __getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.getpgid$MH,"getpgid");
    }
    public static int getpgid ( int __pid) {
        var mh$ = getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.setpgid$MH,"setpgid");
    }
    public static int setpgid ( int __pid,  int __pgid) {
        var mh$ = setpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __pgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$63.setpgrp$MH,"setpgrp");
    }
    public static int setpgrp () {
        var mh$ = setpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.setsid$MH,"setsid");
    }
    public static int setsid () {
        var mh$ = setsid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.getsid$MH,"getsid");
    }
    public static int getsid ( int __pid) {
        var mh$ = getsid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$64.getuid$MH,"getuid");
    }
    public static int getuid () {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$64.geteuid$MH,"geteuid");
    }
    public static int geteuid () {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$64.getgid$MH,"getgid");
    }
    public static int getgid () {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$64.getegid$MH,"getegid");
    }
    public static int getegid () {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$64.getgroups$MH,"getgroups");
    }
    public static int getgroups ( int __size,  Addressable __list) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(__size, __list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$64.setuid$MH,"setuid");
    }
    public static int setuid ( int __uid) {
        var mh$ = setuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$65.setreuid$MH,"setreuid");
    }
    public static int setreuid ( int __ruid,  int __euid) {
        var mh$ = setreuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$65.seteuid$MH,"seteuid");
    }
    public static int seteuid ( int __uid) {
        var mh$ = seteuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$65.setgid$MH,"setgid");
    }
    public static int setgid ( int __gid) {
        var mh$ = setgid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$65.setregid$MH,"setregid");
    }
    public static int setregid ( int __rgid,  int __egid) {
        var mh$ = setregid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$65.setegid$MH,"setegid");
    }
    public static int setegid ( int __gid) {
        var mh$ = setegid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$65.fork$MH,"fork");
    }
    public static int fork () {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$66.vfork$MH,"vfork");
    }
    public static int vfork () {
        var mh$ = vfork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$66.ttyname$MH,"ttyname");
    }
    public static MemoryAddress ttyname ( int __fd) {
        var mh$ = ttyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$66.ttyname_r$MH,"ttyname_r");
    }
    public static int ttyname_r ( int __fd,  Addressable __buf,  long __buflen) {
        var mh$ = ttyname_r$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$66.isatty$MH,"isatty");
    }
    public static int isatty ( int __fd) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$66.ttyslot$MH,"ttyslot");
    }
    public static int ttyslot () {
        var mh$ = ttyslot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$66.link$MH,"link");
    }
    public static int link ( Addressable __from,  Addressable __to) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$67.linkat$MH,"linkat");
    }
    public static int linkat ( int __fromfd,  Addressable __from,  int __tofd,  Addressable __to,  int __flags) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(__fromfd, __from, __tofd, __to, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$67.symlink$MH,"symlink");
    }
    public static int symlink ( Addressable __from,  Addressable __to) {
        var mh$ = symlink$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$67.readlink$MH,"readlink");
    }
    public static long readlink ( Addressable __path,  Addressable __buf,  long __len) {
        var mh$ = readlink$MH();
        try {
            return (long)mh$.invokeExact(__path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$67.symlinkat$MH,"symlinkat");
    }
    public static int symlinkat ( Addressable __from,  int __tofd,  Addressable __to) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(__from, __tofd, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$67.readlinkat$MH,"readlinkat");
    }
    public static long readlinkat ( int __fd,  Addressable __path,  Addressable __buf,  long __len) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(__fd, __path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$67.unlink$MH,"unlink");
    }
    public static int unlink ( Addressable __name) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$68.unlinkat$MH,"unlinkat");
    }
    public static int unlinkat ( int __fd,  Addressable __name,  int __flag) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __name, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$68.rmdir$MH,"rmdir");
    }
    public static int rmdir ( Addressable __path) {
        var mh$ = rmdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$68.tcgetpgrp$MH,"tcgetpgrp");
    }
    public static int tcgetpgrp ( int __fd) {
        var mh$ = tcgetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$68.tcsetpgrp$MH,"tcsetpgrp");
    }
    public static int tcsetpgrp ( int __fd,  int __pgrp_id) {
        var mh$ = tcsetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd, __pgrp_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$68.getlogin$MH,"getlogin");
    }
    public static MemoryAddress getlogin () {
        var mh$ = getlogin$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$68.getlogin_r$MH,"getlogin_r");
    }
    public static int getlogin_r ( Addressable __name,  long __name_len) {
        var mh$ = getlogin_r$MH();
        try {
            return (int)mh$.invokeExact(__name, __name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$69.setlogin$MH,"setlogin");
    }
    public static int setlogin ( Addressable __name) {
        var mh$ = setlogin$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return constants$69.optarg$LAYOUT;
    }
    public static VarHandle optarg$VH() {
        return constants$69.optarg$VH;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$69.optarg$SEGMENT,"optarg");
    }
    public static MemoryAddress optarg$get() {
        return (java.lang.foreign.MemoryAddress) constants$69.optarg$VH.get(RuntimeHelper.requireNonNull(constants$69.optarg$SEGMENT, "optarg"));
    }
    public static void optarg$set( MemoryAddress x) {
        constants$69.optarg$VH.set(RuntimeHelper.requireNonNull(constants$69.optarg$SEGMENT, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return constants$69.optind$LAYOUT;
    }
    public static VarHandle optind$VH() {
        return constants$69.optind$VH;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$69.optind$SEGMENT,"optind");
    }
    public static int optind$get() {
        return (int) constants$69.optind$VH.get(RuntimeHelper.requireNonNull(constants$69.optind$SEGMENT, "optind"));
    }
    public static void optind$set( int x) {
        constants$69.optind$VH.set(RuntimeHelper.requireNonNull(constants$69.optind$SEGMENT, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return constants$69.opterr$LAYOUT;
    }
    public static VarHandle opterr$VH() {
        return constants$69.opterr$VH;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$69.opterr$SEGMENT,"opterr");
    }
    public static int opterr$get() {
        return (int) constants$69.opterr$VH.get(RuntimeHelper.requireNonNull(constants$69.opterr$SEGMENT, "opterr"));
    }
    public static void opterr$set( int x) {
        constants$69.opterr$VH.set(RuntimeHelper.requireNonNull(constants$69.opterr$SEGMENT, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return constants$69.optopt$LAYOUT;
    }
    public static VarHandle optopt$VH() {
        return constants$69.optopt$VH;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$69.optopt$SEGMENT,"optopt");
    }
    public static int optopt$get() {
        return (int) constants$69.optopt$VH.get(RuntimeHelper.requireNonNull(constants$69.optopt$SEGMENT, "optopt"));
    }
    public static void optopt$set( int x) {
        constants$69.optopt$VH.set(RuntimeHelper.requireNonNull(constants$69.optopt$SEGMENT, "optopt"), x);
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$69.getopt$MH,"getopt");
    }
    public static int getopt ( int ___argc,  Addressable ___argv,  Addressable __shortopts) {
        var mh$ = getopt$MH();
        try {
            return (int)mh$.invokeExact(___argc, ___argv, __shortopts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$70.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable __name,  long __len) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$70.sethostname$MH,"sethostname");
    }
    public static int sethostname ( Addressable __name,  long __len) {
        var mh$ = sethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$70.sethostid$MH,"sethostid");
    }
    public static int sethostid ( long __id) {
        var mh$ = sethostid$MH();
        try {
            return (int)mh$.invokeExact(__id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$70.getdomainname$MH,"getdomainname");
    }
    public static int getdomainname ( Addressable __name,  long __len) {
        var mh$ = getdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$70.setdomainname$MH,"setdomainname");
    }
    public static int setdomainname ( Addressable __name,  long __len) {
        var mh$ = setdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vhangup$MH() {
        return RuntimeHelper.requireNonNull(constants$70.vhangup$MH,"vhangup");
    }
    public static int vhangup () {
        var mh$ = vhangup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$71.revoke$MH,"revoke");
    }
    public static int revoke ( Addressable __file) {
        var mh$ = revoke$MH();
        try {
            return (int)mh$.invokeExact(__file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$71.profil$MH,"profil");
    }
    public static int profil ( Addressable __sample_buffer,  long __size,  long __offset,  int __scale) {
        var mh$ = profil$MH();
        try {
            return (int)mh$.invokeExact(__sample_buffer, __size, __offset, __scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$71.acct$MH,"acct");
    }
    public static int acct ( Addressable __name) {
        var mh$ = acct$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$71.getusershell$MH,"getusershell");
    }
    public static MemoryAddress getusershell () {
        var mh$ = getusershell$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$71.endusershell$MH,"endusershell");
    }
    public static void endusershell () {
        var mh$ = endusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$71.setusershell$MH,"setusershell");
    }
    public static void setusershell () {
        var mh$ = setusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle daemon$MH() {
        return RuntimeHelper.requireNonNull(constants$72.daemon$MH,"daemon");
    }
    public static int daemon ( int __nochdir,  int __noclose) {
        var mh$ = daemon$MH();
        try {
            return (int)mh$.invokeExact(__nochdir, __noclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$72.chroot$MH,"chroot");
    }
    public static int chroot ( Addressable __path) {
        var mh$ = chroot$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$72.getpass$MH,"getpass");
    }
    public static MemoryAddress getpass ( Addressable __prompt) {
        var mh$ = getpass$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__prompt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$72.fsync$MH,"fsync");
    }
    public static int fsync ( int __fd) {
        var mh$ = fsync$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$72.gethostid$MH,"gethostid");
    }
    public static long gethostid () {
        var mh$ = gethostid$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$72.sync$MH,"sync");
    }
    public static void sync () {
        var mh$ = sync$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.getpagesize$MH,"getpagesize");
    }
    public static int getpagesize () {
        var mh$ = getpagesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.getdtablesize$MH,"getdtablesize");
    }
    public static int getdtablesize () {
        var mh$ = getdtablesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$73.truncate$MH,"truncate");
    }
    public static int truncate ( Addressable __file,  long __length) {
        var mh$ = truncate$MH();
        try {
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$73.ftruncate$MH,"ftruncate");
    }
    public static int ftruncate ( int __fd,  long __length) {
        var mh$ = ftruncate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$73.brk$MH,"brk");
    }
    public static int brk ( Addressable __addr) {
        var mh$ = brk$MH();
        try {
            return (int)mh$.invokeExact(__addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$73.sbrk$MH,"sbrk");
    }
    public static MemoryAddress sbrk ( long __delta) {
        var mh$ = sbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$74.syscall$MH,"syscall");
    }
    public static long syscall ( long __sysno, Object... x1) {
        var mh$ = syscall$MH();
        try {
            return (long)mh$.invokeExact(__sysno, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdatasync$MH() {
        return RuntimeHelper.requireNonNull(constants$74.fdatasync$MH,"fdatasync");
    }
    public static int fdatasync ( int __fildes) {
        var mh$ = fdatasync$MH();
        try {
            return (int)mh$.invokeExact(__fildes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$74.crypt$MH,"crypt");
    }
    public static MemoryAddress crypt ( Addressable __key,  Addressable __salt) {
        var mh$ = crypt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __salt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getentropy$MH() {
        return RuntimeHelper.requireNonNull(constants$74.getentropy$MH,"getentropy");
    }
    public static int getentropy ( Addressable __buffer,  long __length) {
        var mh$ = getentropy$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flock$MH() {
        return RuntimeHelper.requireNonNull(constants$74.flock$MH,"flock");
    }
    public static int flock ( int __fd,  int __operation) {
        var mh$ = flock$MH();
        try {
            return (int)mh$.invokeExact(__fd, __operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$74.stat$MH,"stat");
    }
    public static int stat ( Addressable __file,  Addressable __buf) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$75.fstat$MH,"fstat");
    }
    public static int fstat ( int __fd,  Addressable __buf) {
        var mh$ = fstat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$75.fstatat$MH,"fstatat");
    }
    public static int fstatat ( int __fd,  Addressable __file,  Addressable __buf,  int __flag) {
        var mh$ = fstatat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$75.lstat$MH,"lstat");
    }
    public static int lstat ( Addressable __file,  Addressable __buf) {
        var mh$ = lstat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$75.chmod$MH,"chmod");
    }
    public static int chmod ( Addressable __file,  int __mode) {
        var mh$ = chmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$75.lchmod$MH,"lchmod");
    }
    public static int lchmod ( Addressable __file,  int __mode) {
        var mh$ = lchmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$75.fchmod$MH,"fchmod");
    }
    public static int fchmod ( int __fd,  int __mode) {
        var mh$ = fchmod$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$76.fchmodat$MH,"fchmodat");
    }
    public static int fchmodat ( int __fd,  Addressable __file,  int __mode,  int __flag) {
        var mh$ = fchmodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __mode, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$76.umask$MH,"umask");
    }
    public static int umask ( int __mask) {
        var mh$ = umask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$76.mkdir$MH,"mkdir");
    }
    public static int mkdir ( Addressable __path,  int __mode) {
        var mh$ = mkdir$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$76.mkdirat$MH,"mkdirat");
    }
    public static int mkdirat ( int __fd,  Addressable __path,  int __mode) {
        var mh$ = mkdirat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$76.mknod$MH,"mknod");
    }
    public static int mknod ( Addressable __path,  int __mode,  long __dev) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknodat$MH() {
        return RuntimeHelper.requireNonNull(constants$76.mknodat$MH,"mknodat");
    }
    public static int mknodat ( int __fd,  Addressable __path,  int __mode,  long __dev) {
        var mh$ = mknodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$77.mkfifo$MH,"mkfifo");
    }
    public static int mkfifo ( Addressable __path,  int __mode) {
        var mh$ = mkfifo$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifoat$MH() {
        return RuntimeHelper.requireNonNull(constants$77.mkfifoat$MH,"mkfifoat");
    }
    public static int mkfifoat ( int __fd,  Addressable __path,  int __mode) {
        var mh$ = mkfifoat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$77.utimensat$MH,"utimensat");
    }
    public static int utimensat ( int __fd,  Addressable __path,  Addressable __times,  int __flags) {
        var mh$ = utimensat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __times, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$77.futimens$MH,"futimens");
    }
    public static int futimens ( int __fd,  Addressable __times) {
        var mh$ = futimens$MH();
        try {
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$77.gettimeofday$MH,"gettimeofday");
    }
    public static int gettimeofday ( Addressable __tv,  Addressable __tz) {
        var mh$ = gettimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$77.settimeofday$MH,"settimeofday");
    }
    public static int settimeofday ( Addressable __tv,  Addressable __tz) {
        var mh$ = settimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$78.adjtime$MH,"adjtime");
    }
    public static int adjtime ( Addressable __delta,  Addressable __olddelta) {
        var mh$ = adjtime$MH();
        try {
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ITIMER_REAL() {
        return (int)0L;
    }
    public static int ITIMER_VIRTUAL() {
        return (int)1L;
    }
    public static int ITIMER_PROF() {
        return (int)2L;
    }
    public static OfInt __itimer_which_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$78.getitimer$MH,"getitimer");
    }
    public static int getitimer ( int __which,  Addressable __value) {
        var mh$ = getitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$78.setitimer$MH,"setitimer");
    }
    public static int setitimer ( int __which,  Addressable __new,  Addressable __old) {
        var mh$ = setitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$78.utimes$MH,"utimes");
    }
    public static int utimes ( Addressable __file,  Addressable __tvp) {
        var mh$ = utimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$78.lutimes$MH,"lutimes");
    }
    public static int lutimes ( Addressable __file,  Addressable __tvp) {
        var mh$ = lutimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$78.futimes$MH,"futimes");
    }
    public static int futimes ( int __fd,  Addressable __tvp) {
        var mh$ = futimes$MH();
        try {
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfByte char8 = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress _fcd = Constants$root.C_POINTER$LAYOUT;
    public static OfShort int16 = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32 = Constants$root.C_INT$LAYOUT;
    public static OfInt intn = Constants$root.C_INT$LAYOUT;
    public static OfAddress VOIDP = Constants$root.C_POINTER$LAYOUT;
    public static OfInt intf = Constants$root.C_INT$LAYOUT;
    public static OfLong hdf_pint_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int AN_UNDEF() {
        return (int)-1L;
    }
    public static int AN_DATA_LABEL() {
        return (int)0L;
    }
    public static int AN_DATA_DESC() {
        return (int)1L;
    }
    public static int AN_FILE_LABEL() {
        return (int)2L;
    }
    public static int AN_FILE_DESC() {
        return (int)3L;
    }
    public static OfInt HFILEID = Constants$root.C_INT$LAYOUT;
    public static MemorySegment maskc$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.maskc$SEGMENT,"maskc");
    }
    public static MemorySegment maskl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.maskl$SEGMENT,"maskl");
    }
    public static int COMP_MODEL_STDIO() {
        return (int)0L;
    }
    public static int COMP_CODE_NONE() {
        return (int)0L;
    }
    public static int COMP_CODE_RLE() {
        return (int)1L;
    }
    public static int COMP_CODE_NBIT() {
        return (int)2L;
    }
    public static int COMP_CODE_SKPHUFF() {
        return (int)3L;
    }
    public static int COMP_CODE_DEFLATE() {
        return (int)4L;
    }
    public static int COMP_CODE_SZIP() {
        return (int)5L;
    }
    public static int COMP_CODE_INVALID() {
        return (int)6L;
    }
    public static int COMP_CODE_JPEG() {
        return (int)7L;
    }
    public static int COMP_CODE_IMCOMP() {
        return (int)12L;
    }
    public static int DFE_NONE() {
        return (int)0L;
    }
    public static int DFE_FNF() {
        return (int)1L;
    }
    public static int DFE_DENIED() {
        return (int)2L;
    }
    public static int DFE_ALROPEN() {
        return (int)3L;
    }
    public static int DFE_TOOMANY() {
        return (int)4L;
    }
    public static int DFE_BADNAME() {
        return (int)5L;
    }
    public static int DFE_BADACC() {
        return (int)6L;
    }
    public static int DFE_BADOPEN() {
        return (int)7L;
    }
    public static int DFE_NOTOPEN() {
        return (int)8L;
    }
    public static int DFE_CANTCLOSE() {
        return (int)9L;
    }
    public static int DFE_READERROR() {
        return (int)10L;
    }
    public static int DFE_WRITEERROR() {
        return (int)11L;
    }
    public static int DFE_SEEKERROR() {
        return (int)12L;
    }
    public static int DFE_RDONLY() {
        return (int)13L;
    }
    public static int DFE_BADSEEK() {
        return (int)14L;
    }
    public static int DFE_INVFILE() {
        return (int)15L;
    }
    public static int DFE_PUTELEM() {
        return (int)16L;
    }
    public static int DFE_GETELEM() {
        return (int)17L;
    }
    public static int DFE_CANTLINK() {
        return (int)18L;
    }
    public static int DFE_CANTSYNC() {
        return (int)19L;
    }
    public static int DFE_BADGROUP() {
        return (int)20L;
    }
    public static int DFE_GROUPSETUP() {
        return (int)21L;
    }
    public static int DFE_PUTGROUP() {
        return (int)22L;
    }
    public static int DFE_GROUPWRITE() {
        return (int)23L;
    }
    public static int DFE_DFNULL() {
        return (int)24L;
    }
    public static int DFE_ILLTYPE() {
        return (int)25L;
    }
    public static int DFE_BADDDLIST() {
        return (int)26L;
    }
    public static int DFE_NOTDFFILE() {
        return (int)27L;
    }
    public static int DFE_SEEDTWICE() {
        return (int)28L;
    }
    public static int DFE_NOSUCHTAG() {
        return (int)29L;
    }
    public static int DFE_NOFREEDD() {
        return (int)30L;
    }
    public static int DFE_BADTAG() {
        return (int)31L;
    }
    public static int DFE_BADREF() {
        return (int)32L;
    }
    public static int DFE_NOMATCH() {
        return (int)33L;
    }
    public static int DFE_NOTINSET() {
        return (int)34L;
    }
    public static int DFE_BADOFFSET() {
        return (int)35L;
    }
    public static int DFE_CORRUPT() {
        return (int)36L;
    }
    public static int DFE_NOREF() {
        return (int)37L;
    }
    public static int DFE_DUPDD() {
        return (int)38L;
    }
    public static int DFE_CANTMOD() {
        return (int)39L;
    }
    public static int DFE_DIFFFILES() {
        return (int)40L;
    }
    public static int DFE_BADAID() {
        return (int)41L;
    }
    public static int DFE_OPENAID() {
        return (int)42L;
    }
    public static int DFE_CANTFLUSH() {
        return (int)43L;
    }
    public static int DFE_CANTUPDATE() {
        return (int)44L;
    }
    public static int DFE_CANTHASH() {
        return (int)45L;
    }
    public static int DFE_CANTDELDD() {
        return (int)46L;
    }
    public static int DFE_CANTDELHASH() {
        return (int)47L;
    }
    public static int DFE_CANTACCESS() {
        return (int)48L;
    }
    public static int DFE_CANTENDACCESS() {
        return (int)49L;
    }
    public static int DFE_TABLEFULL() {
        return (int)50L;
    }
    public static int DFE_NOTINTABLE() {
        return (int)51L;
    }
    public static int DFE_UNSUPPORTED() {
        return (int)52L;
    }
    public static int DFE_NOSPACE() {
        return (int)53L;
    }
    public static int DFE_BADCALL() {
        return (int)54L;
    }
    public static int DFE_BADPTR() {
        return (int)55L;
    }
    public static int DFE_BADLEN() {
        return (int)56L;
    }
    public static int DFE_NOTENOUGH() {
        return (int)57L;
    }
    public static int DFE_NOVALS() {
        return (int)58L;
    }
    public static int DFE_ARGS() {
        return (int)59L;
    }
    public static int DFE_INTERNAL() {
        return (int)60L;
    }
    public static int DFE_NORESET() {
        return (int)61L;
    }
    public static int DFE_EXCEEDMAX() {
        return (int)62L;
    }
    public static int DFE_GENAPP() {
        return (int)63L;
    }
    public static int DFE_UNINIT() {
        return (int)64L;
    }
    public static int DFE_CANTINIT() {
        return (int)65L;
    }
    public static int DFE_CANTSHUTDOWN() {
        return (int)66L;
    }
    public static int DFE_BADDIM() {
        return (int)67L;
    }
    public static int DFE_BADFP() {
        return (int)68L;
    }
    public static int DFE_BADDATATYPE() {
        return (int)69L;
    }
    public static int DFE_BADMCTYPE() {
        return (int)70L;
    }
    public static int DFE_BADNUMTYPE() {
        return (int)71L;
    }
    public static int DFE_BADORDER() {
        return (int)72L;
    }
    public static int DFE_RANGE() {
        return (int)73L;
    }
    public static int DFE_BADCONV() {
        return (int)74L;
    }
    public static int DFE_BADTYPE() {
        return (int)75L;
    }
    public static int DFE_BADDIMNAME() {
        return (int)76L;
    }
    public static int DFE_NOVGREP() {
        return (int)77L;
    }
    public static int DFE_BADSCHEME() {
        return (int)78L;
    }
    public static int DFE_BADMODEL() {
        return (int)79L;
    }
    public static int DFE_BADCODER() {
        return (int)80L;
    }
    public static int DFE_MODEL() {
        return (int)81L;
    }
    public static int DFE_CODER() {
        return (int)82L;
    }
    public static int DFE_CINIT() {
        return (int)83L;
    }
    public static int DFE_CDECODE() {
        return (int)84L;
    }
    public static int DFE_CENCODE() {
        return (int)85L;
    }
    public static int DFE_CTERM() {
        return (int)86L;
    }
    public static int DFE_CSEEK() {
        return (int)87L;
    }
    public static int DFE_MINIT() {
        return (int)88L;
    }
    public static int DFE_COMPINFO() {
        return (int)89L;
    }
    public static int DFE_CANTCOMP() {
        return (int)90L;
    }
    public static int DFE_CANTDECOMP() {
        return (int)91L;
    }
    public static int DFE_NOENCODER() {
        return (int)92L;
    }
    public static int DFE_NOSZLIB() {
        return (int)93L;
    }
    public static int DFE_COMPVERSION() {
        return (int)94L;
    }
    public static int DFE_READCOMP() {
        return (int)95L;
    }
    public static int DFE_NODIM() {
        return (int)96L;
    }
    public static int DFE_BADRIG() {
        return (int)97L;
    }
    public static int DFE_RINOTFOUND() {
        return (int)98L;
    }
    public static int DFE_BADATTR() {
        return (int)99L;
    }
    public static int DFE_LUTNOTFOUND() {
        return (int)100L;
    }
    public static int DFE_GRNOTFOUND() {
        return (int)101L;
    }
    public static int DFE_BADTABLE() {
        return (int)102L;
    }
    public static int DFE_BADSDG() {
        return (int)103L;
    }
    public static int DFE_BADNDG() {
        return (int)104L;
    }
    public static int DFE_VGSIZE() {
        return (int)105L;
    }
    public static int DFE_VTAB() {
        return (int)106L;
    }
    public static int DFE_CANTADDELEM() {
        return (int)107L;
    }
    public static int DFE_BADVGNAME() {
        return (int)108L;
    }
    public static int DFE_BADVGCLASS() {
        return (int)109L;
    }
    public static int DFE_BADFIELDS() {
        return (int)110L;
    }
    public static int DFE_NOVS() {
        return (int)111L;
    }
    public static int DFE_SYMSIZE() {
        return (int)112L;
    }
    public static int DFE_BADATTACH() {
        return (int)113L;
    }
    public static int DFE_BADVSNAME() {
        return (int)114L;
    }
    public static int DFE_BADVSCLASS() {
        return (int)115L;
    }
    public static int DFE_VSWRITE() {
        return (int)116L;
    }
    public static int DFE_VSREAD() {
        return (int)117L;
    }
    public static int DFE_BADVH() {
        return (int)118L;
    }
    public static int DFE_FIELDSSET() {
        return (int)119L;
    }
    public static int DFE_VSCANTCREATE() {
        return (int)120L;
    }
    public static int DFE_VGCANTCREATE() {
        return (int)121L;
    }
    public static int DFE_CANTATTACH() {
        return (int)122L;
    }
    public static int DFE_CANTDETACH() {
        return (int)123L;
    }
    public static int DFE_XDRERROR() {
        return (int)124L;
    }
    public static int DFE_BITREAD() {
        return (int)125L;
    }
    public static int DFE_BITWRITE() {
        return (int)126L;
    }
    public static int DFE_BITSEEK() {
        return (int)127L;
    }
    public static int DFE_TBBTINS() {
        return (int)128L;
    }
    public static int DFE_BVNEW() {
        return (int)129L;
    }
    public static int DFE_BVSET() {
        return (int)130L;
    }
    public static int DFE_BVGET() {
        return (int)131L;
    }
    public static int DFE_BVFIND() {
        return (int)132L;
    }
    public static int DFE_CANTSETATTR() {
        return (int)133L;
    }
    public static int DFE_CANTGETATTR() {
        return (int)134L;
    }
    public static int DFE_ANAPIERROR() {
        return (int)135L;
    }
    public static MethodHandle Hopen$MH() {
        return RuntimeHelper.requireNonNull(constants$79.Hopen$MH,"Hopen");
    }
    public static int Hopen ( Addressable path,  int acc_mode,  short ndds) {
        var mh$ = Hopen$MH();
        try {
            return (int)mh$.invokeExact(path, acc_mode, ndds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hclose$MH() {
        return RuntimeHelper.requireNonNull(constants$80.Hclose$MH,"Hclose");
    }
    public static int Hclose ( int file_id) {
        var mh$ = Hclose$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hstartread$MH() {
        return RuntimeHelper.requireNonNull(constants$80.Hstartread$MH,"Hstartread");
    }
    public static int Hstartread ( int file_id,  short tag,  short ref) {
        var mh$ = Hstartread$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hnextread$MH() {
        return RuntimeHelper.requireNonNull(constants$80.Hnextread$MH,"Hnextread");
    }
    public static int Hnextread ( int access_id,  short tag,  short ref,  int origin) {
        var mh$ = Hnextread$MH();
        try {
            return (int)mh$.invokeExact(access_id, tag, ref, origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hexist$MH() {
        return RuntimeHelper.requireNonNull(constants$80.Hexist$MH,"Hexist");
    }
    public static int Hexist ( int file_id,  short search_tag,  short search_ref) {
        var mh$ = Hexist$MH();
        try {
            return (int)mh$.invokeExact(file_id, search_tag, search_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$80.Hinquire$MH,"Hinquire");
    }
    public static int Hinquire ( int access_id,  Addressable pfile_id,  Addressable ptag,  Addressable pref,  Addressable plength,  Addressable poffset,  Addressable pposn,  Addressable paccess,  Addressable pspecial) {
        var mh$ = Hinquire$MH();
        try {
            return (int)mh$.invokeExact(access_id, pfile_id, ptag, pref, plength, poffset, pposn, paccess, pspecial);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hstartwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$80.Hstartwrite$MH,"Hstartwrite");
    }
    public static int Hstartwrite ( int file_id,  short tag,  short ref,  int length) {
        var mh$ = Hstartwrite$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hstartaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$81.Hstartaccess$MH,"Hstartaccess");
    }
    public static int Hstartaccess ( int file_id,  short tag,  short ref,  int flags) {
        var mh$ = Hstartaccess$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hsetlength$MH() {
        return RuntimeHelper.requireNonNull(constants$81.Hsetlength$MH,"Hsetlength");
    }
    public static int Hsetlength ( int file_id,  int length) {
        var mh$ = Hsetlength$MH();
        try {
            return (int)mh$.invokeExact(file_id, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Happendable$MH() {
        return RuntimeHelper.requireNonNull(constants$81.Happendable$MH,"Happendable");
    }
    public static int Happendable ( int aid) {
        var mh$ = Happendable$MH();
        try {
            return (int)mh$.invokeExact(aid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HPisappendable$MH() {
        return RuntimeHelper.requireNonNull(constants$81.HPisappendable$MH,"HPisappendable");
    }
    public static int HPisappendable ( int aid) {
        var mh$ = HPisappendable$MH();
        try {
            return (int)mh$.invokeExact(aid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HPregister_term_func$MH() {
        return RuntimeHelper.requireNonNull(constants$81.HPregister_term_func$MH,"HPregister_term_func");
    }
    public static int HPregister_term_func ( Addressable term_func) {
        var mh$ = HPregister_term_func$MH();
        try {
            return (int)mh$.invokeExact(term_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hseek$MH() {
        return RuntimeHelper.requireNonNull(constants$81.Hseek$MH,"Hseek");
    }
    public static int Hseek ( int access_id,  int offset,  int origin) {
        var mh$ = Hseek$MH();
        try {
            return (int)mh$.invokeExact(access_id, offset, origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Htell$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Htell$MH,"Htell");
    }
    public static int Htell ( int access_id) {
        var mh$ = Htell$MH();
        try {
            return (int)mh$.invokeExact(access_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hread$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Hread$MH,"Hread");
    }
    public static int Hread ( int access_id,  int length,  Addressable data) {
        var mh$ = Hread$MH();
        try {
            return (int)mh$.invokeExact(access_id, length, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Hwrite$MH,"Hwrite");
    }
    public static int Hwrite ( int access_id,  int length,  Addressable data) {
        var mh$ = Hwrite$MH();
        try {
            return (int)mh$.invokeExact(access_id, length, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Htrunc$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Htrunc$MH,"Htrunc");
    }
    public static int Htrunc ( int access_id,  int trunc_len) {
        var mh$ = Htrunc$MH();
        try {
            return (int)mh$.invokeExact(access_id, trunc_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Hendaccess$MH,"Hendaccess");
    }
    public static int Hendaccess ( int access_id) {
        var mh$ = Hendaccess$MH();
        try {
            return (int)mh$.invokeExact(access_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$82.HDgetc$MH,"HDgetc");
    }
    public static int HDgetc ( int access_id) {
        var mh$ = HDgetc$MH();
        try {
            return (int)mh$.invokeExact(access_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDputc$MH() {
        return RuntimeHelper.requireNonNull(constants$83.HDputc$MH,"HDputc");
    }
    public static int HDputc ( byte c,  int access_id) {
        var mh$ = HDputc$MH();
        try {
            return (int)mh$.invokeExact(c, access_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hgetelement$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Hgetelement$MH,"Hgetelement");
    }
    public static int Hgetelement ( int file_id,  short tag,  short ref,  Addressable data) {
        var mh$ = Hgetelement$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hputelement$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Hputelement$MH,"Hputelement");
    }
    public static int Hputelement ( int file_id,  short tag,  short ref,  Addressable data,  int length) {
        var mh$ = Hputelement$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, data, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hlength$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Hlength$MH,"Hlength");
    }
    public static int Hlength ( int file_id,  short tag,  short ref) {
        var mh$ = Hlength$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hoffset$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Hoffset$MH,"Hoffset");
    }
    public static int Hoffset ( int file_id,  short tag,  short ref) {
        var mh$ = Hoffset$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hsync$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Hsync$MH,"Hsync");
    }
    public static int Hsync ( int file_id) {
        var mh$ = Hsync$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hcache$MH() {
        return RuntimeHelper.requireNonNull(constants$84.Hcache$MH,"Hcache");
    }
    public static int Hcache ( int file_id,  int cache_on) {
        var mh$ = Hcache$MH();
        try {
            return (int)mh$.invokeExact(file_id, cache_on);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hgetlibversion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.Hgetlibversion$MH,"Hgetlibversion");
    }
    public static int Hgetlibversion ( Addressable majorv,  Addressable minorv,  Addressable releasev,  Addressable string) {
        var mh$ = Hgetlibversion$MH();
        try {
            return (int)mh$.invokeExact(majorv, minorv, releasev, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hgetfileversion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.Hgetfileversion$MH,"Hgetfileversion");
    }
    public static int Hgetfileversion ( int file_id,  Addressable majorv,  Addressable minorv,  Addressable release,  Addressable string) {
        var mh$ = Hgetfileversion$MH();
        try {
            return (int)mh$.invokeExact(file_id, majorv, minorv, release, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hsetaccesstype$MH() {
        return RuntimeHelper.requireNonNull(constants$84.Hsetaccesstype$MH,"Hsetaccesstype");
    }
    public static int Hsetaccesstype ( int access_id,  int accesstype) {
        var mh$ = Hsetaccesstype$MH();
        try {
            return (int)mh$.invokeExact(access_id, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDmake_special_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$84.HDmake_special_tag$MH,"HDmake_special_tag");
    }
    public static short HDmake_special_tag ( short tag) {
        var mh$ = HDmake_special_tag$MH();
        try {
            return (short)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDis_special_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$84.HDis_special_tag$MH,"HDis_special_tag");
    }
    public static int HDis_special_tag ( short tag) {
        var mh$ = HDis_special_tag$MH();
        try {
            return (int)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDbase_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$85.HDbase_tag$MH,"HDbase_tag");
    }
    public static short HDbase_tag ( short tag) {
        var mh$ = HDbase_tag$MH();
        try {
            return (short)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDerr$MH() {
        return RuntimeHelper.requireNonNull(constants$85.HDerr$MH,"HDerr");
    }
    public static int HDerr ( int file_id) {
        var mh$ = HDerr$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDvalidfid$MH() {
        return RuntimeHelper.requireNonNull(constants$85.HDvalidfid$MH,"HDvalidfid");
    }
    public static int HDvalidfid ( int file_id) {
        var mh$ = HDvalidfid$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgettagdesc$MH() {
        return RuntimeHelper.requireNonNull(constants$85.HDgettagdesc$MH,"HDgettagdesc");
    }
    public static MemoryAddress HDgettagdesc ( short tag) {
        var mh$ = HDgettagdesc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgettagsname$MH() {
        return RuntimeHelper.requireNonNull(constants$85.HDgettagsname$MH,"HDgettagsname");
    }
    public static MemoryAddress HDgettagsname ( short tag) {
        var mh$ = HDgettagsname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgettagnum$MH() {
        return RuntimeHelper.requireNonNull(constants$85.HDgettagnum$MH,"HDgettagnum");
    }
    public static int HDgettagnum ( Addressable tag_name) {
        var mh$ = HDgettagnum$MH();
        try {
            return (int)mh$.invokeExact(tag_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDgetNTdesc$MH() {
        return RuntimeHelper.requireNonNull(constants$86.HDgetNTdesc$MH,"HDgetNTdesc");
    }
    public static MemoryAddress HDgetNTdesc ( int nt) {
        var mh$ = HDgetNTdesc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDfidtoname$MH() {
        return RuntimeHelper.requireNonNull(constants$86.HDfidtoname$MH,"HDfidtoname");
    }
    public static MemoryAddress HDfidtoname ( int fid) {
        var mh$ = HDfidtoname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hgetntinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$86.Hgetntinfo$MH,"Hgetntinfo");
    }
    public static int Hgetntinfo ( int numbertype,  Addressable nt_info) {
        var mh$ = Hgetntinfo$MH();
        try {
            return (int)mh$.invokeExact(numbertype, nt_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hishdf$MH() {
        return RuntimeHelper.requireNonNull(constants$86.Hishdf$MH,"Hishdf");
    }
    public static int Hishdf ( Addressable filename) {
        var mh$ = Hishdf$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hfidinquire$MH() {
        return RuntimeHelper.requireNonNull(constants$86.Hfidinquire$MH,"Hfidinquire");
    }
    public static int Hfidinquire ( int file_id,  Addressable fname,  Addressable acc_mode,  Addressable attach) {
        var mh$ = Hfidinquire$MH();
        try {
            return (int)mh$.invokeExact(file_id, fname, acc_mode, attach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$86.Hshutdown$MH,"Hshutdown");
    }
    public static int Hshutdown () {
        var mh$ = Hshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HPend$MH() {
        return RuntimeHelper.requireNonNull(constants$87.HPend$MH,"HPend");
    }
    public static void HPend () {
        var mh$ = HPend$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDdont_atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$87.HDdont_atexit$MH,"HDdont_atexit");
    }
    public static int HDdont_atexit () {
        var mh$ = HDdont_atexit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hdupdd$MH() {
        return RuntimeHelper.requireNonNull(constants$87.Hdupdd$MH,"Hdupdd");
    }
    public static int Hdupdd ( int file_id,  short tag,  short ref,  short old_tag,  short old_ref) {
        var mh$ = Hdupdd$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, old_tag, old_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hnumber$MH() {
        return RuntimeHelper.requireNonNull(constants$87.Hnumber$MH,"Hnumber");
    }
    public static int Hnumber ( int file_id,  short tag) {
        var mh$ = Hnumber$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hnewref$MH() {
        return RuntimeHelper.requireNonNull(constants$87.Hnewref$MH,"Hnewref");
    }
    public static short Hnewref ( int file_id) {
        var mh$ = Hnewref$MH();
        try {
            return (short)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Htagnewref$MH() {
        return RuntimeHelper.requireNonNull(constants$87.Htagnewref$MH,"Htagnewref");
    }
    public static short Htagnewref ( int file_id,  short tag) {
        var mh$ = Htagnewref$MH();
        try {
            return (short)mh$.invokeExact(file_id, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hfind$MH() {
        return RuntimeHelper.requireNonNull(constants$88.Hfind$MH,"Hfind");
    }
    public static int Hfind ( int file_id,  short search_tag,  short search_ref,  Addressable find_tag,  Addressable find_ref,  Addressable find_offset,  Addressable find_length,  int direction) {
        var mh$ = Hfind$MH();
        try {
            return (int)mh$.invokeExact(file_id, search_tag, search_ref, find_tag, find_ref, find_offset, find_length, direction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDcheck_tagref$MH() {
        return RuntimeHelper.requireNonNull(constants$88.HDcheck_tagref$MH,"HDcheck_tagref");
    }
    public static int HDcheck_tagref ( int file_id,  short tag,  short ref) {
        var mh$ = HDcheck_tagref$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDreuse_tagref$MH() {
        return RuntimeHelper.requireNonNull(constants$88.HDreuse_tagref$MH,"HDreuse_tagref");
    }
    public static int HDreuse_tagref ( int file_id,  short tag,  short ref) {
        var mh$ = HDreuse_tagref$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hdeldd$MH() {
        return RuntimeHelper.requireNonNull(constants$88.Hdeldd$MH,"Hdeldd");
    }
    public static int Hdeldd ( int file_id,  short tag,  short ref) {
        var mh$ = Hdeldd$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDmemfill$MH() {
        return RuntimeHelper.requireNonNull(constants$88.HDmemfill$MH,"HDmemfill");
    }
    public static MemoryAddress HDmemfill ( Addressable dest,  Addressable src,  int item_size,  int num_items) {
        var mh$ = HDmemfill$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dest, src, item_size, num_items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HIstrncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$88.HIstrncpy$MH,"HIstrncpy");
    }
    public static MemoryAddress HIstrncpy ( Addressable dest,  Addressable source,  int len) {
        var mh$ = HIstrncpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dest, source, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDspaceleft$MH() {
        return RuntimeHelper.requireNonNull(constants$89.HDspaceleft$MH,"HDspaceleft");
    }
    public static int HDspaceleft () {
        var mh$ = HDspaceleft$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDstrdup$MH() {
        return RuntimeHelper.requireNonNull(constants$89.HDstrdup$MH,"HDstrdup");
    }
    public static MemoryAddress HDstrdup ( Addressable s) {
        var mh$ = HDstrdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDc2fstr$MH() {
        return RuntimeHelper.requireNonNull(constants$89.HDc2fstr$MH,"HDc2fstr");
    }
    public static int HDc2fstr ( Addressable str,  int len) {
        var mh$ = HDc2fstr$MH();
        try {
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDf2cstring$MH() {
        return RuntimeHelper.requireNonNull(constants$89.HDf2cstring$MH,"HDf2cstring");
    }
    public static MemoryAddress HDf2cstring ( Addressable fdesc,  int len) {
        var mh$ = HDf2cstring$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fdesc, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDflush$MH() {
        return RuntimeHelper.requireNonNull(constants$89.HDflush$MH,"HDflush");
    }
    public static int HDflush ( int file_id) {
        var mh$ = HDflush$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDpackFstring$MH() {
        return RuntimeHelper.requireNonNull(constants$89.HDpackFstring$MH,"HDpackFstring");
    }
    public static int HDpackFstring ( Addressable src,  Addressable dest,  int len) {
        var mh$ = HDpackFstring$MH();
        try {
            return (int)mh$.invokeExact(src, dest, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HLcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$90.HLcreate$MH,"HLcreate");
    }
    public static int HLcreate ( int file_id,  short tag,  short ref,  int block_length,  int number_blocks) {
        var mh$ = HLcreate$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, block_length, number_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HLconvert$MH() {
        return RuntimeHelper.requireNonNull(constants$90.HLconvert$MH,"HLconvert");
    }
    public static int HLconvert ( int aid,  int block_length,  int number_blocks) {
        var mh$ = HLconvert$MH();
        try {
            return (int)mh$.invokeExact(aid, block_length, number_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HDinqblockinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$90.HDinqblockinfo$MH,"HDinqblockinfo");
    }
    public static int HDinqblockinfo ( int aid,  Addressable length,  Addressable first_length,  Addressable block_length,  Addressable number_blocks) {
        var mh$ = HDinqblockinfo$MH();
        try {
            return (int)mh$.invokeExact(aid, length, first_length, block_length, number_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HLsetblockinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$90.HLsetblockinfo$MH,"HLsetblockinfo");
    }
    public static int HLsetblockinfo ( int aid,  int block_size,  int num_blocks) {
        var mh$ = HLsetblockinfo$MH();
        try {
            return (int)mh$.invokeExact(aid, block_size, num_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HLgetblockinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$90.HLgetblockinfo$MH,"HLgetblockinfo");
    }
    public static int HLgetblockinfo ( int aid,  Addressable block_size,  Addressable num_blocks) {
        var mh$ = HLgetblockinfo$MH();
        try {
            return (int)mh$.invokeExact(aid, block_size, num_blocks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HLgetdatainfo$MH() {
        return RuntimeHelper.requireNonNull(constants$90.HLgetdatainfo$MH,"HLgetdatainfo");
    }
    public static int HLgetdatainfo ( int file_id,  Addressable buf,  int start_block,  int info_count,  Addressable offsetarray,  Addressable lengtharray) {
        var mh$ = HLgetdatainfo$MH();
        try {
            return (int)mh$.invokeExact(file_id, buf, start_block, info_count, offsetarray, lengtharray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HXcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$91.HXcreate$MH,"HXcreate");
    }
    public static int HXcreate ( int file_id,  short tag,  short ref,  Addressable extern_file_name,  int offset,  int start_len) {
        var mh$ = HXcreate$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, extern_file_name, offset, start_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HXsetcreatedir$MH() {
        return RuntimeHelper.requireNonNull(constants$91.HXsetcreatedir$MH,"HXsetcreatedir");
    }
    public static int HXsetcreatedir ( Addressable dir) {
        var mh$ = HXsetcreatedir$MH();
        try {
            return (int)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HXsetdir$MH() {
        return RuntimeHelper.requireNonNull(constants$91.HXsetdir$MH,"HXsetdir");
    }
    public static int HXsetdir ( Addressable dir) {
        var mh$ = HXsetdir$MH();
        try {
            return (int)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$91.HCcreate$MH,"HCcreate");
    }
    public static int HCcreate ( int file_id,  short tag,  short ref,  int model_type,  Addressable m_info,  int coder_type,  Addressable c_info) {
        var mh$ = HCcreate$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, model_type, m_info, coder_type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPgetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$91.HCPgetcompress$MH,"HCPgetcompress");
    }
    public static int HCPgetcompress ( int file_id,  short data_tag,  short data_ref,  Addressable coder_type,  Addressable c_info) {
        var mh$ = HCPgetcompress$MH();
        try {
            return (int)mh$.invokeExact(file_id, data_tag, data_ref, coder_type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPgetcompinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$91.HCPgetcompinfo$MH,"HCPgetcompinfo");
    }
    public static int HCPgetcompinfo ( int file_id,  short data_tag,  short data_ref,  Addressable coder_type,  Addressable c_info) {
        var mh$ = HCPgetcompinfo$MH();
        try {
            return (int)mh$.invokeExact(file_id, data_tag, data_ref, coder_type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPgetcomptype$MH() {
        return RuntimeHelper.requireNonNull(constants$92.HCPgetcomptype$MH,"HCPgetcomptype");
    }
    public static int HCPgetcomptype ( int file_id,  short data_tag,  short data_ref,  Addressable coder_type) {
        var mh$ = HCPgetcomptype$MH();
        try {
            return (int)mh$.invokeExact(file_id, data_tag, data_ref, coder_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPgetdatasize$MH() {
        return RuntimeHelper.requireNonNull(constants$92.HCPgetdatasize$MH,"HCPgetdatasize");
    }
    public static int HCPgetdatasize ( int file_id,  short data_tag,  short data_ref,  Addressable comp_size,  Addressable orig_size) {
        var mh$ = HCPgetdatasize$MH();
        try {
            return (int)mh$.invokeExact(file_id, data_tag, data_ref, comp_size, orig_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCget_config_info$MH() {
        return RuntimeHelper.requireNonNull(constants$92.HCget_config_info$MH,"HCget_config_info");
    }
    public static int HCget_config_info ( int coder_type,  Addressable compression_config_info) {
        var mh$ = HCget_config_info$MH();
        try {
            return (int)mh$.invokeExact(coder_type, compression_config_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPquery_encode_header$MH() {
        return RuntimeHelper.requireNonNull(constants$92.HCPquery_encode_header$MH,"HCPquery_encode_header");
    }
    public static int HCPquery_encode_header ( int model_type,  Addressable m_info,  int coder_type,  Addressable c_info) {
        var mh$ = HCPquery_encode_header$MH();
        try {
            return (int)mh$.invokeExact(model_type, m_info, coder_type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPencode_header$MH() {
        return RuntimeHelper.requireNonNull(constants$92.HCPencode_header$MH,"HCPencode_header");
    }
    public static int HCPencode_header ( Addressable p,  int model_type,  Addressable m_info,  int coder_type,  Addressable c_info) {
        var mh$ = HCPencode_header$MH();
        try {
            return (int)mh$.invokeExact(p, model_type, m_info, coder_type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPdecode_header$MH() {
        return RuntimeHelper.requireNonNull(constants$92.HCPdecode_header$MH,"HCPdecode_header");
    }
    public static int HCPdecode_header ( Addressable p,  Addressable model_type,  Addressable m_info,  Addressable coder_type,  Addressable c_info) {
        var mh$ = HCPdecode_header$MH();
        try {
            return (int)mh$.invokeExact(p, model_type, m_info, coder_type, c_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HCPsetup_szip_parms$MH() {
        return RuntimeHelper.requireNonNull(constants$93.HCPsetup_szip_parms$MH,"HCPsetup_szip_parms");
    }
    public static int HCPsetup_szip_parms ( Addressable c_info,  int nt,  int ncomp,  int ndims,  Addressable dims,  Addressable cdims) {
        var mh$ = HCPsetup_szip_parms$MH();
        try {
            return (int)mh$.invokeExact(c_info, nt, ncomp, ndims, dims, cdims);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HBconvert$MH() {
        return RuntimeHelper.requireNonNull(constants$93.HBconvert$MH,"HBconvert");
    }
    public static int HBconvert ( int aid) {
        var mh$ = HBconvert$MH();
        try {
            return (int)mh$.invokeExact(aid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HRPconvert$MH() {
        return RuntimeHelper.requireNonNull(constants$93.HRPconvert$MH,"HRPconvert");
    }
    public static int HRPconvert ( int fid,  short tag,  short ref,  int xdim,  int ydim,  short scheme,  Addressable cinfo,  int pixel_size) {
        var mh$ = HRPconvert$MH();
        try {
            return (int)mh$.invokeExact(fid, tag, ref, xdim, ydim, scheme, cinfo, pixel_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEstring$MH() {
        return RuntimeHelper.requireNonNull(constants$93.HEstring$MH,"HEstring");
    }
    public static MemoryAddress HEstring ( int error_code) {
        var mh$ = HEstring$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(error_code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEpush$MH() {
        return RuntimeHelper.requireNonNull(constants$93.HEpush$MH,"HEpush");
    }
    public static void HEpush ( int error_code,  Addressable function_name,  Addressable file_name,  int line) {
        var mh$ = HEpush$MH();
        try {
            mh$.invokeExact(error_code, function_name, file_name, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEreport$MH() {
        return RuntimeHelper.requireNonNull(constants$93.HEreport$MH,"HEreport");
    }
    public static void HEreport ( Addressable x0, Object... x1) {
        var mh$ = HEreport$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEprint$MH() {
        return RuntimeHelper.requireNonNull(constants$94.HEprint$MH,"HEprint");
    }
    public static void HEprint ( Addressable stream,  int print_level) {
        var mh$ = HEprint$MH();
        try {
            mh$.invokeExact(stream, print_level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$94.HEvalue$MH,"HEvalue");
    }
    public static short HEvalue ( int level) {
        var mh$ = HEvalue$MH();
        try {
            return (short)mh$.invokeExact(level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEclear$MH() {
        return RuntimeHelper.requireNonNull(constants$94.HEclear$MH,"HEclear");
    }
    public static void HEclear () {
        var mh$ = HEclear$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$94.HEshutdown$MH,"HEshutdown");
    }
    public static int HEshutdown () {
        var mh$ = HEshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hstartbitread$MH() {
        return RuntimeHelper.requireNonNull(constants$94.Hstartbitread$MH,"Hstartbitread");
    }
    public static int Hstartbitread ( int file_id,  short tag,  short ref) {
        var mh$ = Hstartbitread$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hstartbitwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$94.Hstartbitwrite$MH,"Hstartbitwrite");
    }
    public static int Hstartbitwrite ( int file_id,  short tag,  short ref,  int length) {
        var mh$ = Hstartbitwrite$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hbitappendable$MH() {
        return RuntimeHelper.requireNonNull(constants$95.Hbitappendable$MH,"Hbitappendable");
    }
    public static int Hbitappendable ( int bitid) {
        var mh$ = Hbitappendable$MH();
        try {
            return (int)mh$.invokeExact(bitid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hbitwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$95.Hbitwrite$MH,"Hbitwrite");
    }
    public static int Hbitwrite ( int bitid,  int count,  int data) {
        var mh$ = Hbitwrite$MH();
        try {
            return (int)mh$.invokeExact(bitid, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hbitread$MH() {
        return RuntimeHelper.requireNonNull(constants$95.Hbitread$MH,"Hbitread");
    }
    public static int Hbitread ( int bitid,  int count,  Addressable data) {
        var mh$ = Hbitread$MH();
        try {
            return (int)mh$.invokeExact(bitid, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hbitseek$MH() {
        return RuntimeHelper.requireNonNull(constants$95.Hbitseek$MH,"Hbitseek");
    }
    public static int Hbitseek ( int bitid,  int byte_offset,  int bit_offset) {
        var mh$ = Hbitseek$MH();
        try {
            return (int)mh$.invokeExact(bitid, byte_offset, bit_offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hgetbit$MH() {
        return RuntimeHelper.requireNonNull(constants$95.Hgetbit$MH,"Hgetbit");
    }
    public static int Hgetbit ( int bitid) {
        var mh$ = Hgetbit$MH();
        try {
            return (int)mh$.invokeExact(bitid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Hendbitaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$95.Hendbitaccess$MH,"Hendbitaccess");
    }
    public static int Hendbitaccess ( int bitfile_id,  int flushbit) {
        var mh$ = Hendbitaccess$MH();
        try {
            return (int)mh$.invokeExact(bitfile_id, flushbit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HPbitshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$96.HPbitshutdown$MH,"HPbitshutdown");
    }
    public static int HPbitshutdown () {
        var mh$ = HPbitshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFfindnextref$MH() {
        return RuntimeHelper.requireNonNull(constants$96.DFfindnextref$MH,"DFfindnextref");
    }
    public static short DFfindnextref ( int file_id,  short tag,  short lref) {
        var mh$ = DFfindnextref$MH();
        try {
            return (short)mh$.invokeExact(file_id, tag, lref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFputcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.DFputcomp$MH,"DFputcomp");
    }
    public static int DFputcomp ( int file_id,  short tag,  short ref,  Addressable image,  int xdim,  int ydim,  Addressable palette,  Addressable newpal,  short scheme,  Addressable cinfo) {
        var mh$ = DFputcomp$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, image, xdim, ydim, palette, newpal, scheme, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFgetcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$96.DFgetcomp$MH,"DFgetcomp");
    }
    public static int DFgetcomp ( int file_id,  short tag,  short ref,  Addressable image,  int xdim,  int ydim,  short scheme) {
        var mh$ = DFgetcomp$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, image, xdim, ydim, scheme);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFCIrle$MH() {
        return RuntimeHelper.requireNonNull(constants$96.DFCIrle$MH,"DFCIrle");
    }
    public static int DFCIrle ( Addressable buf,  Addressable bufto,  int len) {
        var mh$ = DFCIrle$MH();
        try {
            return (int)mh$.invokeExact(buf, bufto, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFCIunrle$MH() {
        return RuntimeHelper.requireNonNull(constants$96.DFCIunrle$MH,"DFCIunrle");
    }
    public static int DFCIunrle ( Addressable buf,  Addressable bufto,  int outlen,  int resetsave) {
        var mh$ = DFCIunrle$MH();
        try {
            return (int)mh$.invokeExact(buf, bufto, outlen, resetsave);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFCIimcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.DFCIimcomp$MH,"DFCIimcomp");
    }
    public static void DFCIimcomp ( int xdim,  int ydim,  Addressable in,  Addressable out,  Addressable in_pal,  Addressable out_pal,  int mode) {
        var mh$ = DFCIimcomp$MH();
        try {
            mh$.invokeExact(xdim, ydim, in, out, in_pal, out_pal, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFCIunimcomp$MH() {
        return RuntimeHelper.requireNonNull(constants$97.DFCIunimcomp$MH,"DFCIunimcomp");
    }
    public static void DFCIunimcomp ( int xdim,  int ydim,  Addressable in,  Addressable out) {
        var mh$ = DFCIunimcomp$MH();
        try {
            mh$.invokeExact(xdim, ydim, in, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFCIjpeg$MH() {
        return RuntimeHelper.requireNonNull(constants$97.DFCIjpeg$MH,"DFCIjpeg");
    }
    public static int DFCIjpeg ( int file_id,  short tag,  short ref,  int xdim,  int ydim,  Addressable image,  short scheme,  Addressable scheme_info) {
        var mh$ = DFCIjpeg$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, xdim, ydim, image, scheme, scheme_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFCIunjpeg$MH() {
        return RuntimeHelper.requireNonNull(constants$97.DFCIunjpeg$MH,"DFCIunjpeg");
    }
    public static int DFCIunjpeg ( int file_id,  short tag,  short ref,  Addressable image,  int xdim,  int ydim,  short scheme) {
        var mh$ = DFCIunjpeg$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref, image, xdim, ydim, scheme);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdiread$MH() {
        return RuntimeHelper.requireNonNull(constants$97.DFdiread$MH,"DFdiread");
    }
    public static int DFdiread ( int file_id,  short tag,  short ref) {
        var mh$ = DFdiread$MH();
        try {
            return (int)mh$.invokeExact(file_id, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdiget$MH() {
        return RuntimeHelper.requireNonNull(constants$97.DFdiget$MH,"DFdiget");
    }
    public static int DFdiget ( int list,  Addressable ptag,  Addressable pref) {
        var mh$ = DFdiget$MH();
        try {
            return (int)mh$.invokeExact(list, ptag, pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdinobj$MH() {
        return RuntimeHelper.requireNonNull(constants$98.DFdinobj$MH,"DFdinobj");
    }
    public static int DFdinobj ( int list) {
        var mh$ = DFdinobj$MH();
        try {
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdisetup$MH() {
        return RuntimeHelper.requireNonNull(constants$98.DFdisetup$MH,"DFdisetup");
    }
    public static int DFdisetup ( int maxsize) {
        var mh$ = DFdisetup$MH();
        try {
            return (int)mh$.invokeExact(maxsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdiput$MH() {
        return RuntimeHelper.requireNonNull(constants$98.DFdiput$MH,"DFdiput");
    }
    public static int DFdiput ( int list,  short tag,  short ref) {
        var mh$ = DFdiput$MH();
        try {
            return (int)mh$.invokeExact(list, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdiwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$98.DFdiwrite$MH,"DFdiwrite");
    }
    public static int DFdiwrite ( int file_id,  int list,  short tag,  short ref) {
        var mh$ = DFdiwrite$MH();
        try {
            return (int)mh$.invokeExact(file_id, list, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFdifree$MH() {
        return RuntimeHelper.requireNonNull(constants$98.DFdifree$MH,"DFdifree");
    }
    public static void DFdifree ( int groupID) {
        var mh$ = DFdifree$MH();
        try {
            mh$.invokeExact(groupID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPgetpal$MH() {
        return RuntimeHelper.requireNonNull(constants$98.DFPgetpal$MH,"DFPgetpal");
    }
    public static int DFPgetpal ( Addressable filename,  Addressable palette) {
        var mh$ = DFPgetpal$MH();
        try {
            return (int)mh$.invokeExact(filename, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPputpal$MH() {
        return RuntimeHelper.requireNonNull(constants$99.DFPputpal$MH,"DFPputpal");
    }
    public static int DFPputpal ( Addressable filename,  Addressable palette,  int overwrite,  Addressable filemode) {
        var mh$ = DFPputpal$MH();
        try {
            return (int)mh$.invokeExact(filename, palette, overwrite, filemode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPaddpal$MH() {
        return RuntimeHelper.requireNonNull(constants$99.DFPaddpal$MH,"DFPaddpal");
    }
    public static int DFPaddpal ( Addressable filename,  Addressable palette) {
        var mh$ = DFPaddpal$MH();
        try {
            return (int)mh$.invokeExact(filename, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPnpals$MH() {
        return RuntimeHelper.requireNonNull(constants$99.DFPnpals$MH,"DFPnpals");
    }
    public static int DFPnpals ( Addressable filename) {
        var mh$ = DFPnpals$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPreadref$MH() {
        return RuntimeHelper.requireNonNull(constants$99.DFPreadref$MH,"DFPreadref");
    }
    public static int DFPreadref ( Addressable filename,  short ref) {
        var mh$ = DFPreadref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPwriteref$MH() {
        return RuntimeHelper.requireNonNull(constants$99.DFPwriteref$MH,"DFPwriteref");
    }
    public static int DFPwriteref ( Addressable filename,  short ref) {
        var mh$ = DFPwriteref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPrestart$MH() {
        return RuntimeHelper.requireNonNull(constants$99.DFPrestart$MH,"DFPrestart");
    }
    public static int DFPrestart () {
        var mh$ = DFPrestart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFPlastref$MH() {
        return RuntimeHelper.requireNonNull(constants$100.DFPlastref$MH,"DFPlastref");
    }
    public static short DFPlastref () {
        var mh$ = DFPlastref$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8setcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$100.DFR8setcompress$MH,"DFR8setcompress");
    }
    public static int DFR8setcompress ( int scheme,  Addressable cinfo) {
        var mh$ = DFR8setcompress$MH();
        try {
            return (int)mh$.invokeExact(scheme, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8getdims$MH() {
        return RuntimeHelper.requireNonNull(constants$100.DFR8getdims$MH,"DFR8getdims");
    }
    public static int DFR8getdims ( Addressable filename,  Addressable pxdim,  Addressable pydim,  Addressable pispal) {
        var mh$ = DFR8getdims$MH();
        try {
            return (int)mh$.invokeExact(filename, pxdim, pydim, pispal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8getimage$MH() {
        return RuntimeHelper.requireNonNull(constants$100.DFR8getimage$MH,"DFR8getimage");
    }
    public static int DFR8getimage ( Addressable filename,  Addressable image,  int xdim,  int ydim,  Addressable pal) {
        var mh$ = DFR8getimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim, pal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8setpalette$MH() {
        return RuntimeHelper.requireNonNull(constants$100.DFR8setpalette$MH,"DFR8setpalette");
    }
    public static int DFR8setpalette ( Addressable pal) {
        var mh$ = DFR8setpalette$MH();
        try {
            return (int)mh$.invokeExact(pal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8putimage$MH() {
        return RuntimeHelper.requireNonNull(constants$100.DFR8putimage$MH,"DFR8putimage");
    }
    public static int DFR8putimage ( Addressable filename,  Addressable image,  int xdim,  int ydim,  short compress) {
        var mh$ = DFR8putimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim, compress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8addimage$MH() {
        return RuntimeHelper.requireNonNull(constants$101.DFR8addimage$MH,"DFR8addimage");
    }
    public static int DFR8addimage ( Addressable filename,  Addressable image,  int xdim,  int ydim,  short compress) {
        var mh$ = DFR8addimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim, compress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8nimages$MH() {
        return RuntimeHelper.requireNonNull(constants$101.DFR8nimages$MH,"DFR8nimages");
    }
    public static int DFR8nimages ( Addressable filename) {
        var mh$ = DFR8nimages$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8readref$MH() {
        return RuntimeHelper.requireNonNull(constants$101.DFR8readref$MH,"DFR8readref");
    }
    public static int DFR8readref ( Addressable filename,  short ref) {
        var mh$ = DFR8readref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8writeref$MH() {
        return RuntimeHelper.requireNonNull(constants$101.DFR8writeref$MH,"DFR8writeref");
    }
    public static int DFR8writeref ( Addressable filename,  short ref) {
        var mh$ = DFR8writeref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8restart$MH() {
        return RuntimeHelper.requireNonNull(constants$101.DFR8restart$MH,"DFR8restart");
    }
    public static int DFR8restart () {
        var mh$ = DFR8restart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8lastref$MH() {
        return RuntimeHelper.requireNonNull(constants$101.DFR8lastref$MH,"DFR8lastref");
    }
    public static short DFR8lastref () {
        var mh$ = DFR8lastref$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8getpalref$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DFR8getpalref$MH,"DFR8getpalref");
    }
    public static int DFR8getpalref ( Addressable pal_ref) {
        var mh$ = DFR8getpalref$MH();
        try {
            return (int)mh$.invokeExact(pal_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFR8Pshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DFR8Pshutdown$MH,"DFR8Pshutdown");
    }
    public static int DFR8Pshutdown () {
        var mh$ = DFR8Pshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRgetlutdims$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DFGRgetlutdims$MH,"DFGRgetlutdims");
    }
    public static int DFGRgetlutdims ( Addressable filename,  Addressable pxdim,  Addressable pydim,  Addressable pncomps,  Addressable pil) {
        var mh$ = DFGRgetlutdims$MH();
        try {
            return (int)mh$.invokeExact(filename, pxdim, pydim, pncomps, pil);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRreqlutil$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DFGRreqlutil$MH,"DFGRreqlutil");
    }
    public static int DFGRreqlutil ( int il) {
        var mh$ = DFGRreqlutil$MH();
        try {
            return (int)mh$.invokeExact(il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRgetlut$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DFGRgetlut$MH,"DFGRgetlut");
    }
    public static int DFGRgetlut ( Addressable filename,  Addressable lut,  int xdim,  int ydim) {
        var mh$ = DFGRgetlut$MH();
        try {
            return (int)mh$.invokeExact(filename, lut, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRgetimdims$MH() {
        return RuntimeHelper.requireNonNull(constants$102.DFGRgetimdims$MH,"DFGRgetimdims");
    }
    public static int DFGRgetimdims ( Addressable filename,  Addressable pxdim,  Addressable pydim,  Addressable pncomps,  Addressable pil) {
        var mh$ = DFGRgetimdims$MH();
        try {
            return (int)mh$.invokeExact(filename, pxdim, pydim, pncomps, pil);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRreqimil$MH() {
        return RuntimeHelper.requireNonNull(constants$103.DFGRreqimil$MH,"DFGRreqimil");
    }
    public static int DFGRreqimil ( int il) {
        var mh$ = DFGRreqimil$MH();
        try {
            return (int)mh$.invokeExact(il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRgetimage$MH() {
        return RuntimeHelper.requireNonNull(constants$103.DFGRgetimage$MH,"DFGRgetimage");
    }
    public static int DFGRgetimage ( Addressable filename,  Addressable image,  int xdim,  int ydim) {
        var mh$ = DFGRgetimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRsetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$103.DFGRsetcompress$MH,"DFGRsetcompress");
    }
    public static int DFGRsetcompress ( int scheme,  Addressable cinfo) {
        var mh$ = DFGRsetcompress$MH();
        try {
            return (int)mh$.invokeExact(scheme, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRsetlutdims$MH() {
        return RuntimeHelper.requireNonNull(constants$103.DFGRsetlutdims$MH,"DFGRsetlutdims");
    }
    public static int DFGRsetlutdims ( int xdim,  int ydim,  int ncomps,  int il) {
        var mh$ = DFGRsetlutdims$MH();
        try {
            return (int)mh$.invokeExact(xdim, ydim, ncomps, il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRsetlut$MH() {
        return RuntimeHelper.requireNonNull(constants$103.DFGRsetlut$MH,"DFGRsetlut");
    }
    public static int DFGRsetlut ( Addressable lut,  int xdim,  int ydim) {
        var mh$ = DFGRsetlut$MH();
        try {
            return (int)mh$.invokeExact(lut, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRaddlut$MH() {
        return RuntimeHelper.requireNonNull(constants$103.DFGRaddlut$MH,"DFGRaddlut");
    }
    public static int DFGRaddlut ( Addressable filename,  Addressable lut,  int xdim,  int ydim) {
        var mh$ = DFGRaddlut$MH();
        try {
            return (int)mh$.invokeExact(filename, lut, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRsetimdims$MH() {
        return RuntimeHelper.requireNonNull(constants$104.DFGRsetimdims$MH,"DFGRsetimdims");
    }
    public static int DFGRsetimdims ( int xdim,  int ydim,  int ncomps,  int il) {
        var mh$ = DFGRsetimdims$MH();
        try {
            return (int)mh$.invokeExact(xdim, ydim, ncomps, il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRaddimage$MH() {
        return RuntimeHelper.requireNonNull(constants$104.DFGRaddimage$MH,"DFGRaddimage");
    }
    public static int DFGRaddimage ( Addressable filename,  Addressable image,  int xdim,  int ydim) {
        var mh$ = DFGRaddimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRputimage$MH() {
        return RuntimeHelper.requireNonNull(constants$104.DFGRputimage$MH,"DFGRputimage");
    }
    public static int DFGRputimage ( Addressable filename,  Addressable image,  int xdim,  int ydim) {
        var mh$ = DFGRputimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRreadref$MH() {
        return RuntimeHelper.requireNonNull(constants$104.DFGRreadref$MH,"DFGRreadref");
    }
    public static int DFGRreadref ( Addressable filename,  short ref) {
        var mh$ = DFGRreadref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIlastref$MH() {
        return RuntimeHelper.requireNonNull(constants$104.DFGRIlastref$MH,"DFGRIlastref");
    }
    public static short DFGRIlastref () {
        var mh$ = DFGRIlastref$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIgetdims$MH() {
        return RuntimeHelper.requireNonNull(constants$104.DFGRIgetdims$MH,"DFGRIgetdims");
    }
    public static int DFGRIgetdims ( Addressable filename,  Addressable pxdim,  Addressable pydim,  Addressable pncomps,  Addressable pil,  int type) {
        var mh$ = DFGRIgetdims$MH();
        try {
            return (int)mh$.invokeExact(filename, pxdim, pydim, pncomps, pil, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIreqil$MH() {
        return RuntimeHelper.requireNonNull(constants$105.DFGRIreqil$MH,"DFGRIreqil");
    }
    public static int DFGRIreqil ( int il,  int type) {
        var mh$ = DFGRIreqil$MH();
        try {
            return (int)mh$.invokeExact(il, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIgetimlut$MH() {
        return RuntimeHelper.requireNonNull(constants$105.DFGRIgetimlut$MH,"DFGRIgetimlut");
    }
    public static int DFGRIgetimlut ( Addressable filename,  Addressable imlut,  int xdim,  int ydim,  int type,  int isfortran,  Addressable compressed,  Addressable compr_type,  Addressable has_pal) {
        var mh$ = DFGRIgetimlut$MH();
        try {
            return (int)mh$.invokeExact(filename, imlut, xdim, ydim, type, isfortran, compressed, compr_type, has_pal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIsetdims$MH() {
        return RuntimeHelper.requireNonNull(constants$105.DFGRIsetdims$MH,"DFGRIsetdims");
    }
    public static int DFGRIsetdims ( int xdim,  int ydim,  int ncomps,  int type) {
        var mh$ = DFGRIsetdims$MH();
        try {
            return (int)mh$.invokeExact(xdim, ydim, ncomps, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIsetil$MH() {
        return RuntimeHelper.requireNonNull(constants$105.DFGRIsetil$MH,"DFGRIsetil");
    }
    public static int DFGRIsetil ( int il,  int type) {
        var mh$ = DFGRIsetil$MH();
        try {
            return (int)mh$.invokeExact(il, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIrestart$MH() {
        return RuntimeHelper.requireNonNull(constants$105.DFGRIrestart$MH,"DFGRIrestart");
    }
    public static int DFGRIrestart () {
        var mh$ = DFGRIrestart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRIaddimlut$MH() {
        return RuntimeHelper.requireNonNull(constants$105.DFGRIaddimlut$MH,"DFGRIaddimlut");
    }
    public static int DFGRIaddimlut ( Addressable filename,  Addressable imlut,  int xdim,  int ydim,  int type,  int isfortran,  int newfile) {
        var mh$ = DFGRIaddimlut$MH();
        try {
            return (int)mh$.invokeExact(filename, imlut, xdim, ydim, type, isfortran, newfile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFGRPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$106.DFGRPshutdown$MH,"DFGRPshutdown");
    }
    public static int DFGRPshutdown () {
        var mh$ = DFGRPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24getdims$MH() {
        return RuntimeHelper.requireNonNull(constants$106.DF24getdims$MH,"DF24getdims");
    }
    public static int DF24getdims ( Addressable filename,  Addressable pxdim,  Addressable pydim,  Addressable pil) {
        var mh$ = DF24getdims$MH();
        try {
            return (int)mh$.invokeExact(filename, pxdim, pydim, pil);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24reqil$MH() {
        return RuntimeHelper.requireNonNull(constants$106.DF24reqil$MH,"DF24reqil");
    }
    public static int DF24reqil ( int il) {
        var mh$ = DF24reqil$MH();
        try {
            return (int)mh$.invokeExact(il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24getimage$MH() {
        return RuntimeHelper.requireNonNull(constants$106.DF24getimage$MH,"DF24getimage");
    }
    public static int DF24getimage ( Addressable filename,  Addressable image,  int xdim,  int ydim) {
        var mh$ = DF24getimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24setdims$MH() {
        return RuntimeHelper.requireNonNull(constants$106.DF24setdims$MH,"DF24setdims");
    }
    public static int DF24setdims ( int xdim,  int ydim) {
        var mh$ = DF24setdims$MH();
        try {
            return (int)mh$.invokeExact(xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24setil$MH() {
        return RuntimeHelper.requireNonNull(constants$106.DF24setil$MH,"DF24setil");
    }
    public static int DF24setil ( int il) {
        var mh$ = DF24setil$MH();
        try {
            return (int)mh$.invokeExact(il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24setcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$107.DF24setcompress$MH,"DF24setcompress");
    }
    public static int DF24setcompress ( int type,  Addressable cinfo) {
        var mh$ = DF24setcompress$MH();
        try {
            return (int)mh$.invokeExact(type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24restart$MH() {
        return RuntimeHelper.requireNonNull(constants$107.DF24restart$MH,"DF24restart");
    }
    public static int DF24restart () {
        var mh$ = DF24restart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24addimage$MH() {
        return RuntimeHelper.requireNonNull(constants$107.DF24addimage$MH,"DF24addimage");
    }
    public static int DF24addimage ( Addressable filename,  Addressable image,  int xdim,  int ydim) {
        var mh$ = DF24addimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24putimage$MH() {
        return RuntimeHelper.requireNonNull(constants$107.DF24putimage$MH,"DF24putimage");
    }
    public static int DF24putimage ( Addressable filename,  Addressable image,  int xdim,  int ydim) {
        var mh$ = DF24putimage$MH();
        try {
            return (int)mh$.invokeExact(filename, image, xdim, ydim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24nimages$MH() {
        return RuntimeHelper.requireNonNull(constants$107.DF24nimages$MH,"DF24nimages");
    }
    public static int DF24nimages ( Addressable filename) {
        var mh$ = DF24nimages$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24readref$MH() {
        return RuntimeHelper.requireNonNull(constants$107.DF24readref$MH,"DF24readref");
    }
    public static int DF24readref ( Addressable filename,  short ref) {
        var mh$ = DF24readref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DF24lastref$MH() {
        return RuntimeHelper.requireNonNull(constants$108.DF24lastref$MH,"DF24lastref");
    }
    public static short DF24lastref () {
        var mh$ = DF24lastref$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetlablen$MH() {
        return RuntimeHelper.requireNonNull(constants$108.DFANgetlablen$MH,"DFANgetlablen");
    }
    public static int DFANgetlablen ( Addressable filename,  short tag,  short ref) {
        var mh$ = DFANgetlablen$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetlabel$MH() {
        return RuntimeHelper.requireNonNull(constants$108.DFANgetlabel$MH,"DFANgetlabel");
    }
    public static int DFANgetlabel ( Addressable filename,  short tag,  short ref,  Addressable label,  int maxlen) {
        var mh$ = DFANgetlabel$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, label, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetdesclen$MH() {
        return RuntimeHelper.requireNonNull(constants$108.DFANgetdesclen$MH,"DFANgetdesclen");
    }
    public static int DFANgetdesclen ( Addressable filename,  short tag,  short ref) {
        var mh$ = DFANgetdesclen$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetdesc$MH() {
        return RuntimeHelper.requireNonNull(constants$108.DFANgetdesc$MH,"DFANgetdesc");
    }
    public static int DFANgetdesc ( Addressable filename,  short tag,  short ref,  Addressable desc,  int maxlen) {
        var mh$ = DFANgetdesc$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, desc, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetfidlen$MH() {
        return RuntimeHelper.requireNonNull(constants$108.DFANgetfidlen$MH,"DFANgetfidlen");
    }
    public static int DFANgetfidlen ( int file_id,  int isfirst) {
        var mh$ = DFANgetfidlen$MH();
        try {
            return (int)mh$.invokeExact(file_id, isfirst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetfid$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DFANgetfid$MH,"DFANgetfid");
    }
    public static int DFANgetfid ( int file_id,  Addressable id,  int maxlen,  int isfirst) {
        var mh$ = DFANgetfid$MH();
        try {
            return (int)mh$.invokeExact(file_id, id, maxlen, isfirst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetfdslen$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DFANgetfdslen$MH,"DFANgetfdslen");
    }
    public static int DFANgetfdslen ( int file_id,  int isfirst) {
        var mh$ = DFANgetfdslen$MH();
        try {
            return (int)mh$.invokeExact(file_id, isfirst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANgetfds$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DFANgetfds$MH,"DFANgetfds");
    }
    public static int DFANgetfds ( int file_id,  Addressable desc,  int maxlen,  int isfirst) {
        var mh$ = DFANgetfds$MH();
        try {
            return (int)mh$.invokeExact(file_id, desc, maxlen, isfirst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANputlabel$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DFANputlabel$MH,"DFANputlabel");
    }
    public static int DFANputlabel ( Addressable filename,  short tag,  short ref,  Addressable label) {
        var mh$ = DFANputlabel$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANputdesc$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DFANputdesc$MH,"DFANputdesc");
    }
    public static int DFANputdesc ( Addressable filename,  short tag,  short ref,  Addressable desc,  int desclen) {
        var mh$ = DFANputdesc$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, desc, desclen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANaddfid$MH() {
        return RuntimeHelper.requireNonNull(constants$109.DFANaddfid$MH,"DFANaddfid");
    }
    public static int DFANaddfid ( int file_id,  Addressable id) {
        var mh$ = DFANaddfid$MH();
        try {
            return (int)mh$.invokeExact(file_id, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANaddfds$MH() {
        return RuntimeHelper.requireNonNull(constants$110.DFANaddfds$MH,"DFANaddfds");
    }
    public static int DFANaddfds ( int file_id,  Addressable desc,  int desclen) {
        var mh$ = DFANaddfds$MH();
        try {
            return (int)mh$.invokeExact(file_id, desc, desclen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANlastref$MH() {
        return RuntimeHelper.requireNonNull(constants$110.DFANlastref$MH,"DFANlastref");
    }
    public static short DFANlastref () {
        var mh$ = DFANlastref$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANlablist$MH() {
        return RuntimeHelper.requireNonNull(constants$110.DFANlablist$MH,"DFANlablist");
    }
    public static int DFANlablist ( Addressable filename,  short tag,  Addressable reflist,  Addressable labellist,  int listsize,  int maxlen,  int startpos) {
        var mh$ = DFANlablist$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, reflist, labellist, listsize, maxlen, startpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANclear$MH() {
        return RuntimeHelper.requireNonNull(constants$110.DFANclear$MH,"DFANclear");
    }
    public static int DFANclear () {
        var mh$ = DFANclear$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIclear$MH() {
        return RuntimeHelper.requireNonNull(constants$110.DFANIclear$MH,"DFANIclear");
    }
    public static int DFANIclear () {
        var mh$ = DFANIclear$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIlocate$MH() {
        return RuntimeHelper.requireNonNull(constants$110.DFANIlocate$MH,"DFANIlocate");
    }
    public static short DFANIlocate ( int file_id,  int type,  short tag,  short ref) {
        var mh$ = DFANIlocate$MH();
        try {
            return (short)mh$.invokeExact(file_id, type, tag, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIaddentry$MH() {
        return RuntimeHelper.requireNonNull(constants$111.DFANIaddentry$MH,"DFANIaddentry");
    }
    public static int DFANIaddentry ( int type,  short annref,  short datatag,  short dataref) {
        var mh$ = DFANIaddentry$MH();
        try {
            return (int)mh$.invokeExact(type, annref, datatag, dataref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIgetannlen$MH() {
        return RuntimeHelper.requireNonNull(constants$111.DFANIgetannlen$MH,"DFANIgetannlen");
    }
    public static int DFANIgetannlen ( Addressable filename,  short tag,  short ref,  int type) {
        var mh$ = DFANIgetannlen$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIgetann$MH() {
        return RuntimeHelper.requireNonNull(constants$111.DFANIgetann$MH,"DFANIgetann");
    }
    public static int DFANIgetann ( Addressable filename,  short tag,  short ref,  Addressable ann,  int maxlen,  int type,  int isfortran) {
        var mh$ = DFANIgetann$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, ann, maxlen, type, isfortran);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIputann$MH() {
        return RuntimeHelper.requireNonNull(constants$111.DFANIputann$MH,"DFANIputann");
    }
    public static int DFANIputann ( Addressable filename,  short tag,  short ref,  Addressable ann,  int annlen,  int type) {
        var mh$ = DFANIputann$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, ref, ann, annlen, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIlablist$MH() {
        return RuntimeHelper.requireNonNull(constants$111.DFANIlablist$MH,"DFANIlablist");
    }
    public static int DFANIlablist ( Addressable filename,  short tag,  Addressable reflist,  Addressable labellist,  int listsize,  int maxlen,  int startpos,  int isfortran) {
        var mh$ = DFANIlablist$MH();
        try {
            return (int)mh$.invokeExact(filename, tag, reflist, labellist, listsize, maxlen, startpos, isfortran);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIaddfann$MH() {
        return RuntimeHelper.requireNonNull(constants$111.DFANIaddfann$MH,"DFANIaddfann");
    }
    public static int DFANIaddfann ( int file_id,  Addressable ann,  int annlen,  int type) {
        var mh$ = DFANIaddfann$MH();
        try {
            return (int)mh$.invokeExact(file_id, ann, annlen, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIgetfannlen$MH() {
        return RuntimeHelper.requireNonNull(constants$112.DFANIgetfannlen$MH,"DFANIgetfannlen");
    }
    public static int DFANIgetfannlen ( int file_id,  int type,  int isfirst) {
        var mh$ = DFANIgetfannlen$MH();
        try {
            return (int)mh$.invokeExact(file_id, type, isfirst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANIgetfann$MH() {
        return RuntimeHelper.requireNonNull(constants$112.DFANIgetfann$MH,"DFANIgetfann");
    }
    public static int DFANIgetfann ( int file_id,  Addressable ann,  int maxlen,  int type,  int isfirst) {
        var mh$ = DFANIgetfann$MH();
        try {
            return (int)mh$.invokeExact(file_id, ann, maxlen, type, isfirst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFANPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$112.DFANPshutdown$MH,"DFANPshutdown");
    }
    public static int DFANPshutdown () {
        var mh$ = DFANPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdims$MH() {
        return RuntimeHelper.requireNonNull(constants$112.DFSDgetdims$MH,"DFSDgetdims");
    }
    public static int DFSDgetdims ( Addressable filename,  Addressable prank,  Addressable sizes,  int maxrank) {
        var mh$ = DFSDgetdims$MH();
        try {
            return (int)mh$.invokeExact(filename, prank, sizes, maxrank);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdatastrs$MH() {
        return RuntimeHelper.requireNonNull(constants$112.DFSDgetdatastrs$MH,"DFSDgetdatastrs");
    }
    public static int DFSDgetdatastrs ( Addressable label,  Addressable unit,  Addressable format,  Addressable coordsys) {
        var mh$ = DFSDgetdatastrs$MH();
        try {
            return (int)mh$.invokeExact(label, unit, format, coordsys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdimstrs$MH() {
        return RuntimeHelper.requireNonNull(constants$112.DFSDgetdimstrs$MH,"DFSDgetdimstrs");
    }
    public static int DFSDgetdimstrs ( int dim,  Addressable label,  Addressable unit,  Addressable format) {
        var mh$ = DFSDgetdimstrs$MH();
        try {
            return (int)mh$.invokeExact(dim, label, unit, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdatalen$MH() {
        return RuntimeHelper.requireNonNull(constants$113.DFSDgetdatalen$MH,"DFSDgetdatalen");
    }
    public static int DFSDgetdatalen ( Addressable llabel,  Addressable lunit,  Addressable lformat,  Addressable lcoordsys) {
        var mh$ = DFSDgetdatalen$MH();
        try {
            return (int)mh$.invokeExact(llabel, lunit, lformat, lcoordsys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdimlen$MH() {
        return RuntimeHelper.requireNonNull(constants$113.DFSDgetdimlen$MH,"DFSDgetdimlen");
    }
    public static int DFSDgetdimlen ( int dim,  Addressable llabel,  Addressable lunit,  Addressable lformat) {
        var mh$ = DFSDgetdimlen$MH();
        try {
            return (int)mh$.invokeExact(dim, llabel, lunit, lformat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdimscale$MH() {
        return RuntimeHelper.requireNonNull(constants$113.DFSDgetdimscale$MH,"DFSDgetdimscale");
    }
    public static int DFSDgetdimscale ( int dim,  int maxsize,  Addressable scale) {
        var mh$ = DFSDgetdimscale$MH();
        try {
            return (int)mh$.invokeExact(dim, maxsize, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetrange$MH() {
        return RuntimeHelper.requireNonNull(constants$113.DFSDgetrange$MH,"DFSDgetrange");
    }
    public static int DFSDgetrange ( Addressable pmax,  Addressable pmin) {
        var mh$ = DFSDgetrange$MH();
        try {
            return (int)mh$.invokeExact(pmax, pmin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetdata$MH() {
        return RuntimeHelper.requireNonNull(constants$113.DFSDgetdata$MH,"DFSDgetdata");
    }
    public static int DFSDgetdata ( Addressable filename,  int rank,  Addressable maxsizes,  Addressable data) {
        var mh$ = DFSDgetdata$MH();
        try {
            return (int)mh$.invokeExact(filename, rank, maxsizes, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetlengths$MH() {
        return RuntimeHelper.requireNonNull(constants$113.DFSDsetlengths$MH,"DFSDsetlengths");
    }
    public static int DFSDsetlengths ( int maxlen_label,  int maxlen_unit,  int maxlen_format,  int maxlen_coordsys) {
        var mh$ = DFSDsetlengths$MH();
        try {
            return (int)mh$.invokeExact(maxlen_label, maxlen_unit, maxlen_format, maxlen_coordsys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetdims$MH() {
        return RuntimeHelper.requireNonNull(constants$114.DFSDsetdims$MH,"DFSDsetdims");
    }
    public static int DFSDsetdims ( int rank,  Addressable dimsizes) {
        var mh$ = DFSDsetdims$MH();
        try {
            return (int)mh$.invokeExact(rank, dimsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetdatastrs$MH() {
        return RuntimeHelper.requireNonNull(constants$114.DFSDsetdatastrs$MH,"DFSDsetdatastrs");
    }
    public static int DFSDsetdatastrs ( Addressable label,  Addressable unit,  Addressable format,  Addressable coordsys) {
        var mh$ = DFSDsetdatastrs$MH();
        try {
            return (int)mh$.invokeExact(label, unit, format, coordsys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetdimstrs$MH() {
        return RuntimeHelper.requireNonNull(constants$114.DFSDsetdimstrs$MH,"DFSDsetdimstrs");
    }
    public static int DFSDsetdimstrs ( int dim,  Addressable label,  Addressable unit,  Addressable format) {
        var mh$ = DFSDsetdimstrs$MH();
        try {
            return (int)mh$.invokeExact(dim, label, unit, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetdimscale$MH() {
        return RuntimeHelper.requireNonNull(constants$114.DFSDsetdimscale$MH,"DFSDsetdimscale");
    }
    public static int DFSDsetdimscale ( int dim,  int dimsize,  Addressable scale) {
        var mh$ = DFSDsetdimscale$MH();
        try {
            return (int)mh$.invokeExact(dim, dimsize, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetrange$MH() {
        return RuntimeHelper.requireNonNull(constants$114.DFSDsetrange$MH,"DFSDsetrange");
    }
    public static int DFSDsetrange ( Addressable maxi,  Addressable mini) {
        var mh$ = DFSDsetrange$MH();
        try {
            return (int)mh$.invokeExact(maxi, mini);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDputdata$MH() {
        return RuntimeHelper.requireNonNull(constants$114.DFSDputdata$MH,"DFSDputdata");
    }
    public static int DFSDputdata ( Addressable filename,  int rank,  Addressable dimsizes,  Addressable data) {
        var mh$ = DFSDputdata$MH();
        try {
            return (int)mh$.invokeExact(filename, rank, dimsizes, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDadddata$MH() {
        return RuntimeHelper.requireNonNull(constants$115.DFSDadddata$MH,"DFSDadddata");
    }
    public static int DFSDadddata ( Addressable filename,  int rank,  Addressable dimsizes,  Addressable data) {
        var mh$ = DFSDadddata$MH();
        try {
            return (int)mh$.invokeExact(filename, rank, dimsizes, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDrestart$MH() {
        return RuntimeHelper.requireNonNull(constants$115.DFSDrestart$MH,"DFSDrestart");
    }
    public static int DFSDrestart () {
        var mh$ = DFSDrestart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDndatasets$MH() {
        return RuntimeHelper.requireNonNull(constants$115.DFSDndatasets$MH,"DFSDndatasets");
    }
    public static int DFSDndatasets ( Addressable filename) {
        var mh$ = DFSDndatasets$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDclear$MH() {
        return RuntimeHelper.requireNonNull(constants$115.DFSDclear$MH,"DFSDclear");
    }
    public static int DFSDclear () {
        var mh$ = DFSDclear$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDlastref$MH() {
        return RuntimeHelper.requireNonNull(constants$115.DFSDlastref$MH,"DFSDlastref");
    }
    public static short DFSDlastref () {
        var mh$ = DFSDlastref$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDreadref$MH() {
        return RuntimeHelper.requireNonNull(constants$115.DFSDreadref$MH,"DFSDreadref");
    }
    public static int DFSDreadref ( Addressable filename,  short ref) {
        var mh$ = DFSDreadref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetslice$MH() {
        return RuntimeHelper.requireNonNull(constants$116.DFSDgetslice$MH,"DFSDgetslice");
    }
    public static int DFSDgetslice ( Addressable filename,  Addressable winst,  Addressable windims,  Addressable data,  Addressable dims) {
        var mh$ = DFSDgetslice$MH();
        try {
            return (int)mh$.invokeExact(filename, winst, windims, data, dims);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDstartslice$MH() {
        return RuntimeHelper.requireNonNull(constants$116.DFSDstartslice$MH,"DFSDstartslice");
    }
    public static int DFSDstartslice ( Addressable filename) {
        var mh$ = DFSDstartslice$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDputslice$MH() {
        return RuntimeHelper.requireNonNull(constants$116.DFSDputslice$MH,"DFSDputslice");
    }
    public static int DFSDputslice ( Addressable winend,  Addressable data,  Addressable dims) {
        var mh$ = DFSDputslice$MH();
        try {
            return (int)mh$.invokeExact(winend, data, dims);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDendslice$MH() {
        return RuntimeHelper.requireNonNull(constants$116.DFSDendslice$MH,"DFSDendslice");
    }
    public static int DFSDendslice () {
        var mh$ = DFSDendslice$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetNT$MH() {
        return RuntimeHelper.requireNonNull(constants$116.DFSDsetNT$MH,"DFSDsetNT");
    }
    public static int DFSDsetNT ( int numbertype) {
        var mh$ = DFSDsetNT$MH();
        try {
            return (int)mh$.invokeExact(numbertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetorder$MH() {
        return RuntimeHelper.requireNonNull(constants$116.DFSDsetorder$MH,"DFSDsetorder");
    }
    public static int DFSDsetorder ( int arrayorder) {
        var mh$ = DFSDsetorder$MH();
        try {
            return (int)mh$.invokeExact(arrayorder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetNT$MH() {
        return RuntimeHelper.requireNonNull(constants$117.DFSDgetNT$MH,"DFSDgetNT");
    }
    public static int DFSDgetNT ( Addressable pnumbertype) {
        var mh$ = DFSDgetNT$MH();
        try {
            return (int)mh$.invokeExact(pnumbertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDpre32sdg$MH() {
        return RuntimeHelper.requireNonNull(constants$117.DFSDpre32sdg$MH,"DFSDpre32sdg");
    }
    public static int DFSDpre32sdg ( Addressable filename,  short ref,  Addressable ispre32) {
        var mh$ = DFSDpre32sdg$MH();
        try {
            return (int)mh$.invokeExact(filename, ref, ispre32);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$117.DFSDsetcal$MH,"DFSDsetcal");
    }
    public static int DFSDsetcal ( double cal,  double cal_err,  double ioff,  double ioff_err,  int cal_nt) {
        var mh$ = DFSDsetcal$MH();
        try {
            return (int)mh$.invokeExact(cal, cal_err, ioff, ioff_err, cal_nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetcal$MH() {
        return RuntimeHelper.requireNonNull(constants$117.DFSDgetcal$MH,"DFSDgetcal");
    }
    public static int DFSDgetcal ( Addressable pcal,  Addressable pcal_err,  Addressable pioff,  Addressable pioff_err,  Addressable cal_nt) {
        var mh$ = DFSDgetcal$MH();
        try {
            return (int)mh$.invokeExact(pcal, pcal_err, pioff, pioff_err, cal_nt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDwriteref$MH() {
        return RuntimeHelper.requireNonNull(constants$117.DFSDwriteref$MH,"DFSDwriteref");
    }
    public static int DFSDwriteref ( Addressable filename,  short ref) {
        var mh$ = DFSDwriteref$MH();
        try {
            return (int)mh$.invokeExact(filename, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDsetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$117.DFSDsetfillvalue$MH,"DFSDsetfillvalue");
    }
    public static int DFSDsetfillvalue ( Addressable fill_value) {
        var mh$ = DFSDsetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(fill_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDgetfillvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$118.DFSDgetfillvalue$MH,"DFSDgetfillvalue");
    }
    public static int DFSDgetfillvalue ( Addressable fill_value) {
        var mh$ = DFSDgetfillvalue$MH();
        try {
            return (int)mh$.invokeExact(fill_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDstartslab$MH() {
        return RuntimeHelper.requireNonNull(constants$118.DFSDstartslab$MH,"DFSDstartslab");
    }
    public static int DFSDstartslab ( Addressable filename) {
        var mh$ = DFSDstartslab$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDwriteslab$MH() {
        return RuntimeHelper.requireNonNull(constants$118.DFSDwriteslab$MH,"DFSDwriteslab");
    }
    public static int DFSDwriteslab ( Addressable start,  Addressable stride,  Addressable count,  Addressable data) {
        var mh$ = DFSDwriteslab$MH();
        try {
            return (int)mh$.invokeExact(start, stride, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDendslab$MH() {
        return RuntimeHelper.requireNonNull(constants$118.DFSDendslab$MH,"DFSDendslab");
    }
    public static int DFSDendslab () {
        var mh$ = DFSDendslab$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDreadslab$MH() {
        return RuntimeHelper.requireNonNull(constants$118.DFSDreadslab$MH,"DFSDreadslab");
    }
    public static int DFSDreadslab ( Addressable filename,  Addressable start,  Addressable slab_size,  Addressable stride,  Addressable buffer,  Addressable buffer_size) {
        var mh$ = DFSDreadslab$MH();
        try {
            return (int)mh$.invokeExact(filename, start, slab_size, stride, buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFSDPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$118.DFSDPshutdown$MH,"DFSDPshutdown");
    }
    public static int DFSDPshutdown () {
        var mh$ = DFSDPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKNTsize$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DFKNTsize$MH,"DFKNTsize");
    }
    public static int DFKNTsize ( int number_type) {
        var mh$ = DFKNTsize$MH();
        try {
            return (int)mh$.invokeExact(number_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKisnativeNT$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DFKisnativeNT$MH,"DFKisnativeNT");
    }
    public static int DFKisnativeNT ( int numbertype) {
        var mh$ = DFKisnativeNT$MH();
        try {
            return (int)mh$.invokeExact(numbertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKislitendNT$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DFKislitendNT$MH,"DFKislitendNT");
    }
    public static int DFKislitendNT ( int numbertype) {
        var mh$ = DFKislitendNT$MH();
        try {
            return (int)mh$.invokeExact(numbertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKgetPNSC$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DFKgetPNSC$MH,"DFKgetPNSC");
    }
    public static byte DFKgetPNSC ( int numbertype,  int machinetype) {
        var mh$ = DFKgetPNSC$MH();
        try {
            return (byte)mh$.invokeExact(numbertype, machinetype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsetNT$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DFKsetNT$MH,"DFKsetNT");
    }
    public static int DFKsetNT ( int ntype) {
        var mh$ = DFKsetNT$MH();
        try {
            return (int)mh$.invokeExact(ntype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKconvert$MH() {
        return RuntimeHelper.requireNonNull(constants$119.DFKconvert$MH,"DFKconvert");
    }
    public static int DFKconvert ( Addressable source,  Addressable dest,  int ntype,  int num_elm,  short acc_mode,  int source_stride,  int dest_stride) {
        var mh$ = DFKconvert$MH();
        try {
            return (int)mh$.invokeExact(source, dest, ntype, num_elm, acc_mode, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb1b$MH() {
        return RuntimeHelper.requireNonNull(constants$120.DFKnb1b$MH,"DFKnb1b");
    }
    public static int DFKnb1b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKnb1b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb2b$MH() {
        return RuntimeHelper.requireNonNull(constants$120.DFKnb2b$MH,"DFKnb2b");
    }
    public static int DFKnb2b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKnb2b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb4b$MH() {
        return RuntimeHelper.requireNonNull(constants$120.DFKnb4b$MH,"DFKnb4b");
    }
    public static int DFKnb4b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKnb4b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKnb8b$MH() {
        return RuntimeHelper.requireNonNull(constants$120.DFKnb8b$MH,"DFKnb8b");
    }
    public static int DFKnb8b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKnb8b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsb2b$MH() {
        return RuntimeHelper.requireNonNull(constants$120.DFKsb2b$MH,"DFKsb2b");
    }
    public static int DFKsb2b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKsb2b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsb4b$MH() {
        return RuntimeHelper.requireNonNull(constants$120.DFKsb4b$MH,"DFKsb4b");
    }
    public static int DFKsb4b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKsb4b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DFKsb8b$MH() {
        return RuntimeHelper.requireNonNull(constants$121.DFKsb8b$MH,"DFKsb8b");
    }
    public static int DFKsb8b ( Addressable s,  Addressable d,  int num_elm,  int source_stride,  int dest_stride) {
        var mh$ = DFKsb8b$MH();
        try {
            return (int)mh$.invokeExact(s, d, num_elm, source_stride, dest_stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANstart$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ANstart$MH,"ANstart");
    }
    public static int ANstart ( int file_id) {
        var mh$ = ANstart$MH();
        try {
            return (int)mh$.invokeExact(file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANfileinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ANfileinfo$MH,"ANfileinfo");
    }
    public static int ANfileinfo ( int an_id,  Addressable n_file_label,  Addressable n_file_desc,  Addressable n_obj_label,  Addressable n_obj_desc) {
        var mh$ = ANfileinfo$MH();
        try {
            return (int)mh$.invokeExact(an_id, n_file_label, n_file_desc, n_obj_label, n_obj_desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANend$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ANend$MH,"ANend");
    }
    public static int ANend ( int an_id) {
        var mh$ = ANend$MH();
        try {
            return (int)mh$.invokeExact(an_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ANcreate$MH,"ANcreate");
    }
    public static int ANcreate ( int an_id,  short elem_tag,  short elem_ref,  int type) {
        var mh$ = ANcreate$MH();
        try {
            return (int)mh$.invokeExact(an_id, elem_tag, elem_ref, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANcreatef$MH() {
        return RuntimeHelper.requireNonNull(constants$121.ANcreatef$MH,"ANcreatef");
    }
    public static int ANcreatef ( int an_id,  int type) {
        var mh$ = ANcreatef$MH();
        try {
            return (int)mh$.invokeExact(an_id, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANselect$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ANselect$MH,"ANselect");
    }
    public static int ANselect ( int an_id,  int idx,  int type) {
        var mh$ = ANselect$MH();
        try {
            return (int)mh$.invokeExact(an_id, idx, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANnumann$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ANnumann$MH,"ANnumann");
    }
    public static int ANnumann ( int an_id,  int type,  short elem_tag,  short elem_ref) {
        var mh$ = ANnumann$MH();
        try {
            return (int)mh$.invokeExact(an_id, type, elem_tag, elem_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANannlist$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ANannlist$MH,"ANannlist");
    }
    public static int ANannlist ( int an_id,  int type,  short elem_tag,  short elem_ref,  Addressable ann_list) {
        var mh$ = ANannlist$MH();
        try {
            return (int)mh$.invokeExact(an_id, type, elem_tag, elem_ref, ann_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANannlen$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ANannlen$MH,"ANannlen");
    }
    public static int ANannlen ( int ann_id) {
        var mh$ = ANannlen$MH();
        try {
            return (int)mh$.invokeExact(ann_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANwriteann$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ANwriteann$MH,"ANwriteann");
    }
    public static int ANwriteann ( int ann_id,  Addressable ann,  int annlen) {
        var mh$ = ANwriteann$MH();
        try {
            return (int)mh$.invokeExact(ann_id, ann, annlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANreadann$MH() {
        return RuntimeHelper.requireNonNull(constants$122.ANreadann$MH,"ANreadann");
    }
    public static int ANreadann ( int ann_id,  Addressable ann,  int maxlen) {
        var mh$ = ANreadann$MH();
        try {
            return (int)mh$.invokeExact(ann_id, ann, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ANendaccess$MH,"ANendaccess");
    }
    public static int ANendaccess ( int ann_id) {
        var mh$ = ANendaccess$MH();
        try {
            return (int)mh$.invokeExact(ann_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANget_tagref$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ANget_tagref$MH,"ANget_tagref");
    }
    public static int ANget_tagref ( int an_id,  int idx,  int type,  Addressable ann_tag,  Addressable ann_ref) {
        var mh$ = ANget_tagref$MH();
        try {
            return (int)mh$.invokeExact(an_id, idx, type, ann_tag, ann_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANid2tagref$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ANid2tagref$MH,"ANid2tagref");
    }
    public static int ANid2tagref ( int an_id,  Addressable ann_tag,  Addressable ann_ref) {
        var mh$ = ANid2tagref$MH();
        try {
            return (int)mh$.invokeExact(an_id, ann_tag, ann_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANtagref2id$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ANtagref2id$MH,"ANtagref2id");
    }
    public static int ANtagref2id ( int an_id,  short ann_tag,  short ann_ref) {
        var mh$ = ANtagref2id$MH();
        try {
            return (int)mh$.invokeExact(an_id, ann_tag, ann_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANatype2tag$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ANatype2tag$MH,"ANatype2tag");
    }
    public static short ANatype2tag ( int atype) {
        var mh$ = ANatype2tag$MH();
        try {
            return (short)mh$.invokeExact(atype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ANtag2atype$MH() {
        return RuntimeHelper.requireNonNull(constants$123.ANtag2atype$MH,"ANtag2atype");
    }
    public static int ANtag2atype ( short atag) {
        var mh$ = ANtag2atype$MH();
        try {
            return (int)mh$.invokeExact(atag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rigcompare$MH() {
        return RuntimeHelper.requireNonNull(constants$124.rigcompare$MH,"rigcompare");
    }
    public static int rigcompare ( Addressable k1,  Addressable k2,  int cmparg) {
        var mh$ = rigcompare$MH();
        try {
            return (int)mh$.invokeExact(k1, k2, cmparg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRstart$MH() {
        return RuntimeHelper.requireNonNull(constants$124.GRstart$MH,"GRstart");
    }
    public static int GRstart ( int hdf_file_id) {
        var mh$ = GRstart$MH();
        try {
            return (int)mh$.invokeExact(hdf_file_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRfileinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$124.GRfileinfo$MH,"GRfileinfo");
    }
    public static int GRfileinfo ( int grid,  Addressable n_datasets,  Addressable n_attrs) {
        var mh$ = GRfileinfo$MH();
        try {
            return (int)mh$.invokeExact(grid, n_datasets, n_attrs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRend$MH() {
        return RuntimeHelper.requireNonNull(constants$124.GRend$MH,"GRend");
    }
    public static int GRend ( int grid) {
        var mh$ = GRend$MH();
        try {
            return (int)mh$.invokeExact(grid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRcreate$MH() {
        return RuntimeHelper.requireNonNull(constants$124.GRcreate$MH,"GRcreate");
    }
    public static int GRcreate ( int grid,  Addressable name,  int ncomp,  int nt,  int il,  Addressable dimsizes) {
        var mh$ = GRcreate$MH();
        try {
            return (int)mh$.invokeExact(grid, name, ncomp, nt, il, dimsizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRselect$MH() {
        return RuntimeHelper.requireNonNull(constants$124.GRselect$MH,"GRselect");
    }
    public static int GRselect ( int grid,  int idx) {
        var mh$ = GRselect$MH();
        try {
            return (int)mh$.invokeExact(grid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRnametoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GRnametoindex$MH,"GRnametoindex");
    }
    public static int GRnametoindex ( int grid,  Addressable name) {
        var mh$ = GRnametoindex$MH();
        try {
            return (int)mh$.invokeExact(grid, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetiminfo$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GRgetiminfo$MH,"GRgetiminfo");
    }
    public static int GRgetiminfo ( int riid,  Addressable name,  Addressable ncomp,  Addressable nt,  Addressable il,  Addressable dimsizes,  Addressable n_attr) {
        var mh$ = GRgetiminfo$MH();
        try {
            return (int)mh$.invokeExact(riid, name, ncomp, nt, il, dimsizes, n_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetnluts$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GRgetnluts$MH,"GRgetnluts");
    }
    public static int GRgetnluts ( int riid) {
        var mh$ = GRgetnluts$MH();
        try {
            return (int)mh$.invokeExact(riid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRwriteimage$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GRwriteimage$MH,"GRwriteimage");
    }
    public static int GRwriteimage ( int riid,  Addressable start,  Addressable stride,  Addressable count,  Addressable data) {
        var mh$ = GRwriteimage$MH();
        try {
            return (int)mh$.invokeExact(riid, start, stride, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreadimage$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GRreadimage$MH,"GRreadimage");
    }
    public static int GRreadimage ( int riid,  Addressable start,  Addressable stride,  Addressable count,  Addressable data) {
        var mh$ = GRreadimage$MH();
        try {
            return (int)mh$.invokeExact(riid, start, stride, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRendaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GRendaccess$MH,"GRendaccess");
    }
    public static int GRendaccess ( int riid) {
        var mh$ = GRendaccess$MH();
        try {
            return (int)mh$.invokeExact(riid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRidtoref$MH() {
        return RuntimeHelper.requireNonNull(constants$126.GRidtoref$MH,"GRidtoref");
    }
    public static short GRidtoref ( int riid) {
        var mh$ = GRidtoref$MH();
        try {
            return (short)mh$.invokeExact(riid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreftoindex$MH() {
        return RuntimeHelper.requireNonNull(constants$126.GRreftoindex$MH,"GRreftoindex");
    }
    public static int GRreftoindex ( int grid,  short ref) {
        var mh$ = GRreftoindex$MH();
        try {
            return (int)mh$.invokeExact(grid, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreqlutil$MH() {
        return RuntimeHelper.requireNonNull(constants$126.GRreqlutil$MH,"GRreqlutil");
    }
    public static int GRreqlutil ( int riid,  int il) {
        var mh$ = GRreqlutil$MH();
        try {
            return (int)mh$.invokeExact(riid, il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreqimageil$MH() {
        return RuntimeHelper.requireNonNull(constants$126.GRreqimageil$MH,"GRreqimageil");
    }
    public static int GRreqimageil ( int riid,  int il) {
        var mh$ = GRreqimageil$MH();
        try {
            return (int)mh$.invokeExact(riid, il);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetlutid$MH() {
        return RuntimeHelper.requireNonNull(constants$126.GRgetlutid$MH,"GRgetlutid");
    }
    public static int GRgetlutid ( int riid,  int idx) {
        var mh$ = GRgetlutid$MH();
        try {
            return (int)mh$.invokeExact(riid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRluttoref$MH() {
        return RuntimeHelper.requireNonNull(constants$126.GRluttoref$MH,"GRluttoref");
    }
    public static short GRluttoref ( int lutid) {
        var mh$ = GRluttoref$MH();
        try {
            return (short)mh$.invokeExact(lutid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetlutinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$127.GRgetlutinfo$MH,"GRgetlutinfo");
    }
    public static int GRgetlutinfo ( int riid,  Addressable ncomp,  Addressable nt,  Addressable il,  Addressable nentries) {
        var mh$ = GRgetlutinfo$MH();
        try {
            return (int)mh$.invokeExact(riid, ncomp, nt, il, nentries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRwritelut$MH() {
        return RuntimeHelper.requireNonNull(constants$127.GRwritelut$MH,"GRwritelut");
    }
    public static int GRwritelut ( int riid,  int ncomps,  int nt,  int il,  int nentries,  Addressable data) {
        var mh$ = GRwritelut$MH();
        try {
            return (int)mh$.invokeExact(riid, ncomps, nt, il, nentries, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreadlut$MH() {
        return RuntimeHelper.requireNonNull(constants$127.GRreadlut$MH,"GRreadlut");
    }
    public static int GRreadlut ( int lutid,  Addressable data) {
        var mh$ = GRreadlut$MH();
        try {
            return (int)mh$.invokeExact(lutid, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetexternalfile$MH() {
        return RuntimeHelper.requireNonNull(constants$127.GRsetexternalfile$MH,"GRsetexternalfile");
    }
    public static int GRsetexternalfile ( int riid,  Addressable filename,  int offset) {
        var mh$ = GRsetexternalfile$MH();
        try {
            return (int)mh$.invokeExact(riid, filename, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetaccesstype$MH() {
        return RuntimeHelper.requireNonNull(constants$127.GRsetaccesstype$MH,"GRsetaccesstype");
    }
    public static int GRsetaccesstype ( int riid,  int accesstype) {
        var mh$ = GRsetaccesstype$MH();
        try {
            return (int)mh$.invokeExact(riid, accesstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$127.GRsetcompress$MH,"GRsetcompress");
    }
    public static int GRsetcompress ( int riid,  int comp_type,  Addressable cinfo) {
        var mh$ = GRsetcompress$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$128.GRgetcompress$MH,"GRgetcompress");
    }
    public static int GRgetcompress ( int riid,  Addressable comp_type,  Addressable cinfo) {
        var mh$ = GRgetcompress$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetcompinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$128.GRgetcompinfo$MH,"GRgetcompinfo");
    }
    public static int GRgetcompinfo ( int riid,  Addressable comp_type,  Addressable cinfo) {
        var mh$ = GRgetcompinfo$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type, cinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$128.GRsetattr$MH,"GRsetattr");
    }
    public static int GRsetattr ( int id,  Addressable name,  int attr_nt,  int count,  Addressable data) {
        var mh$ = GRsetattr$MH();
        try {
            return (int)mh$.invokeExact(id, name, attr_nt, count, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$128.GRattrinfo$MH,"GRattrinfo");
    }
    public static int GRattrinfo ( int id,  int idx,  Addressable name,  Addressable attr_nt,  Addressable count) {
        var mh$ = GRattrinfo$MH();
        try {
            return (int)mh$.invokeExact(id, idx, name, attr_nt, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$128.GRgetattr$MH,"GRgetattr");
    }
    public static int GRgetattr ( int id,  int idx,  Addressable data) {
        var mh$ = GRgetattr$MH();
        try {
            return (int)mh$.invokeExact(id, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$128.GRfindattr$MH,"GRfindattr");
    }
    public static int GRfindattr ( int id,  Addressable name) {
        var mh$ = GRfindattr$MH();
        try {
            return (int)mh$.invokeExact(id, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetcomptype$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GRgetcomptype$MH,"GRgetcomptype");
    }
    public static int GRgetcomptype ( int riid,  Addressable comp_type) {
        var mh$ = GRgetcomptype$MH();
        try {
            return (int)mh$.invokeExact(riid, comp_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRPshutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GRPshutdown$MH,"GRPshutdown");
    }
    public static int GRPshutdown () {
        var mh$ = GRPshutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GR2bmapped$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GR2bmapped$MH,"GR2bmapped");
    }
    public static int GR2bmapped ( int riid,  Addressable tobe_mapped,  Addressable created_byGR) {
        var mh$ = GR2bmapped$MH();
        try {
            return (int)mh$.invokeExact(riid, tobe_mapped, created_byGR);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GRsetchunk$MH,"GRsetchunk");
    }
    public static int GRsetchunk ( int riid,  MemorySegment chunk_def,  int flags) {
        var mh$ = GRsetchunk$MH();
        try {
            return (int)mh$.invokeExact(riid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRgetchunkinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GRgetchunkinfo$MH,"GRgetchunkinfo");
    }
    public static int GRgetchunkinfo ( int riid,  Addressable chunk_def,  Addressable flags) {
        var mh$ = GRgetchunkinfo$MH();
        try {
            return (int)mh$.invokeExact(riid, chunk_def, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRwritechunk$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GRwritechunk$MH,"GRwritechunk");
    }
    public static int GRwritechunk ( int riid,  Addressable origin,  Addressable datap) {
        var mh$ = GRwritechunk$MH();
        try {
            return (int)mh$.invokeExact(riid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRreadchunk$MH() {
        return RuntimeHelper.requireNonNull(constants$130.GRreadchunk$MH,"GRreadchunk");
    }
    public static int GRreadchunk ( int riid,  Addressable origin,  Addressable datap) {
        var mh$ = GRreadchunk$MH();
        try {
            return (int)mh$.invokeExact(riid, origin, datap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GRsetchunkcache$MH() {
        return RuntimeHelper.requireNonNull(constants$130.GRsetchunkcache$MH,"GRsetchunkcache");
    }
    public static int GRsetchunkcache ( int riid,  int maxcache,  int flags) {
        var mh$ = GRsetchunkcache$MH();
        try {
            return (int)mh$.invokeExact(riid, maxcache, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$130.Vsetattr$MH,"Vsetattr");
    }
    public static int Vsetattr ( int vgid,  Addressable attrname,  int datatype,  int count,  Addressable values) {
        var mh$ = Vsetattr$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrname, datatype, count, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$130.Vnattrs$MH,"Vnattrs");
    }
    public static int Vnattrs ( int vgid) {
        var mh$ = Vnattrs$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnattrs2$MH() {
        return RuntimeHelper.requireNonNull(constants$130.Vnattrs2$MH,"Vnattrs2");
    }
    public static int Vnattrs2 ( int vgid) {
        var mh$ = Vnattrs2$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vnoldattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$130.Vnoldattrs$MH,"Vnoldattrs");
    }
    public static int Vnoldattrs ( int vgid) {
        var mh$ = Vnoldattrs$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vfindattr$MH() {
        return RuntimeHelper.requireNonNull(constants$131.Vfindattr$MH,"Vfindattr");
    }
    public static int Vfindattr ( int vgid,  Addressable attrname) {
        var mh$ = Vfindattr$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vattrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$131.Vattrinfo$MH,"Vattrinfo");
    }
    public static int Vattrinfo ( int vgid,  int attrindex,  Addressable name,  Addressable datatype,  Addressable count,  Addressable size) {
        var mh$ = Vattrinfo$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, name, datatype, count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vattrinfo2$MH() {
        return RuntimeHelper.requireNonNull(constants$131.Vattrinfo2$MH,"Vattrinfo2");
    }
    public static int Vattrinfo2 ( int vgid,  int attrindex,  Addressable name,  Addressable datatype,  Addressable count,  Addressable size,  Addressable nfields,  Addressable refnum) {
        var mh$ = Vattrinfo2$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, name, datatype, count, size, nfields, refnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$131.Vgetattr$MH,"Vgetattr");
    }
    public static int Vgetattr ( int vgid,  int attrindex,  Addressable values) {
        var mh$ = Vgetattr$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetattr2$MH() {
        return RuntimeHelper.requireNonNull(constants$131.Vgetattr2$MH,"Vgetattr2");
    }
    public static int Vgetattr2 ( int vgid,  int attrindex,  Addressable values) {
        var mh$ = Vgetattr2$MH();
        try {
            return (int)mh$.invokeExact(vgid, attrindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Vgetversion$MH() {
        return RuntimeHelper.requireNonNull(constants$131.Vgetversion$MH,"Vgetversion");
    }
    public static int Vgetversion ( int vgid) {
        var mh$ = Vgetversion$MH();
        try {
            return (int)mh$.invokeExact(vgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfindex$MH() {
        return RuntimeHelper.requireNonNull(constants$132.VSfindex$MH,"VSfindex");
    }
    public static int VSfindex ( int vsid,  Addressable fieldname,  Addressable fldindex) {
        var mh$ = VSfindex$MH();
        try {
            return (int)mh$.invokeExact(vsid, fieldname, fldindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$132.VSsetattr$MH,"VSsetattr");
    }
    public static int VSsetattr ( int vsid,  int findex,  Addressable attrname,  int datatype,  int count,  Addressable values) {
        var mh$ = VSsetattr$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex, attrname, datatype, count, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSnattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$132.VSnattrs$MH,"VSnattrs");
    }
    public static int VSnattrs ( int vsid) {
        var mh$ = VSnattrs$MH();
        try {
            return (int)mh$.invokeExact(vsid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VSfnattrs$MH() {
        return RuntimeHelper.requireNonNull(constants$132.VSfnattrs$MH,"VSfnattrs");
    }
    public static int VSfnattrs ( int vsid,  int findex) {
        var mh$ = VSfnattrs$MH();
        try {
            return (int)mh$.invokeExact(vsid, findex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


